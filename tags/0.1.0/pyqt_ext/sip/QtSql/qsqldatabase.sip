// qsqldatabase.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QSqlDriverCreatorBase
{

%TypeHeaderCode
#include <qsqldatabase.h>
%End

public:
    virtual ~QSqlDriverCreatorBase();
    virtual QSqlDriver *createObject() const = 0 /Factory/;
};

class QSqlDatabase
{

%TypeHeaderCode
#include <qsqldatabase.h>
%End

public:
    QSqlDatabase();
    QSqlDatabase(const QSqlDatabase &other);
    ~QSqlDatabase();
    bool open() /ReleaseGIL/;
    bool open(const QString &user, const QString &password) /ReleaseGIL/;
    void close();
    bool isOpen() const;
    bool isOpenError() const;
    QStringList tables(QSql::TableType type = QSql::Tables) const;
    QSqlIndex primaryIndex(const QString &tablename) const;
    QSqlRecord record(const QString &tablename) const;
    QSqlQuery exec(const QString &query = QString()) const /PyName=exec_, ReleaseGIL/;
    QSqlError lastError() const;
    bool isValid() const;
    bool transaction() /ReleaseGIL/;
    bool commit() /ReleaseGIL/;
    bool rollback() /ReleaseGIL/;
    void setDatabaseName(const QString &name);
    void setUserName(const QString &name);
    void setPassword(const QString &password);
    void setHostName(const QString &host);
    void setPort(int p);
    void setConnectOptions(const QString &options = QString());
    QString databaseName() const;
    QString userName() const;
    QString password() const;
    QString hostName() const;
    QString driverName() const;
    int port() const;
    QString connectOptions() const;
    QSqlDriver *driver() const;
    static QSqlDatabase addDatabase(const QString &type, const QString &connectionName = QLatin1String(QSqlDatabase::defaultConnection));
    static QSqlDatabase addDatabase(QSqlDriver *driver, const QString &connectionName = QLatin1String(QSqlDatabase::defaultConnection));
    static QSqlDatabase cloneDatabase(const QSqlDatabase &other, const QString &connectionName);
    static QSqlDatabase database(const QString &connectionName = QLatin1String(QSqlDatabase::defaultConnection), bool open = true);
    static void removeDatabase(const QString &connectionName);
    static bool contains(const QString &connectionName = QLatin1String(QSqlDatabase::defaultConnection));
    static QStringList drivers();
    static QStringList connectionNames();
    static void registerSqlDriver(const QString &name, QSqlDriverCreatorBase *creator /Transfer/);
    static bool isDriverAvailable(const QString &name);

protected:
    explicit QSqlDatabase(const QString &type);
    explicit QSqlDatabase(QSqlDriver *driver);
};
