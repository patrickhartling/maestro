// qnetworkinterface.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qnetworkinterface.h>
%End


%If (Qt_4_2_0 -)

class QNetworkAddressEntry
{

%TypeHeaderCode
#include <qnetworkinterface.h>
%End

public:
    QNetworkAddressEntry();
    QNetworkAddressEntry(const QNetworkAddressEntry &other);
    ~QNetworkAddressEntry();
    QHostAddress ip() const;
    void setIp(const QHostAddress &newIp);
    QHostAddress netmask() const;
    void setNetmask(const QHostAddress &newNetmask);
    QHostAddress broadcast() const;
    void setBroadcast(const QHostAddress &newBroadcast);
};

%End
%If (Qt_4_2_0 -)

class QNetworkInterface
{

%TypeHeaderCode
#include <qnetworkinterface.h>
%End

public:
    enum InterfaceFlag
    {
        IsUp,
        IsRunning,
        CanBroadcast,
        IsLoopBack,
        IsPointToPoint,
        CanMulticast,
    };

    typedef QFlags<QNetworkInterface::InterfaceFlag> InterfaceFlags;
    QNetworkInterface();
    QNetworkInterface(const QNetworkInterface &other);
    ~QNetworkInterface();
    bool isValid() const;
    QString name() const;
    QFlags<QNetworkInterface::InterfaceFlag> flags() const;
    QString hardwareAddress() const;
    QList<QNetworkAddressEntry> addressEntries() const;
    static QNetworkInterface interfaceFromName(const QString &name);
    static QNetworkInterface interfaceFromIndex(int index);
    static QList<QNetworkInterface> allInterfaces();
    static QList<QHostAddress> allAddresses();
};

%End
%If (Qt_4_2_0 -)
QFlags<QNetworkInterface::InterfaceFlag> operator|(QNetworkInterface::InterfaceFlag f1, QFlags<QNetworkInterface::InterfaceFlag> f2);
%End
%If (Qt_4_2_0 -)
QFlags<QNetworkInterface::InterfaceFlag> operator|(QNetworkInterface::InterfaceFlag f1, QNetworkInterface::InterfaceFlag f2);
%End
