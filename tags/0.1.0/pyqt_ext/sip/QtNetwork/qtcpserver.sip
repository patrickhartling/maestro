// qtcpserver.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QTcpServer : QObject
{

%TypeHeaderCode
#include <qtcpserver.h>
%End

public:
    explicit QTcpServer(QObject *parent /TransferThis/ = 0);
    virtual ~QTcpServer();
    bool listen(const QHostAddress &address = QHostAddress::Any, quint16 port = 0);
    void close();
    bool isListening() const;
    void setMaxPendingConnections(int numConnections);
    int maxPendingConnections() const;
    quint16 serverPort() const;
    QHostAddress serverAddress() const;
    int socketDescriptor() const;
    bool setSocketDescriptor(int socketDescriptor);
    bool waitForNewConnection(int msec = 0, bool *timedOut = 0) /ReleaseGIL/;
    virtual bool hasPendingConnections() const;
    virtual QTcpSocket *nextPendingConnection();
    QAbstractSocket::SocketError serverError() const;
    QString errorString() const;
    void setProxy(const QNetworkProxy &networkProxy);
    QNetworkProxy proxy() const;

protected:
    virtual void incomingConnection(int handle);

signals:
    void newConnection();

private:
    QTcpServer(const QTcpServer &);
};
