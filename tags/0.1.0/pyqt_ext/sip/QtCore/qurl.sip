// qurl.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qurl.h>
%End


class QUrl
{

%TypeHeaderCode
#include <qurl.h>
%End

public:
    QUrl();
    QUrl(const QString &url);
    QUrl(const QUrl &copy);
    QUrl(const QString &url, QUrl::ParsingMode mode);
    ~QUrl();

    enum FormattingOption
    {
        None,
        RemoveScheme,
        RemovePassword,
        RemoveUserInfo,
        RemovePort,
        RemoveAuthority,
        RemovePath,
        RemoveQuery,
        RemoveFragment,
        StripTrailingSlash,
    };

    typedef QFlags<QUrl::FormattingOption> FormattingOptions;

    enum ParsingMode
    {
        TolerantMode,
        StrictMode,
    };

    void setUrl(const QString &url);
    void setUrl(const QString &url, QUrl::ParsingMode mode);
    void setEncodedUrl(const QByteArray &url);
    void setEncodedUrl(const QByteArray &url, QUrl::ParsingMode mode);
    bool isValid() const;
    bool isEmpty() const;
    void clear();
    void setScheme(const QString &scheme);
    QString scheme() const;
    void setAuthority(const QString &authority);
    QString authority() const;
    void setUserInfo(const QString &userInfo);
    QString userInfo() const;
    void setUserName(const QString &userName);
    QString userName() const;
    void setPassword(const QString &password);
    QString password() const;
    void setHost(const QString &host);
    QString host() const;
    void setPort(int port);
    int port() const;
    int port(int defaultPort) const;
    void setPath(const QString &path);
    QString path() const;
    void setEncodedQuery(const QByteArray &query);
    QByteArray encodedQuery() const;
    void setQueryDelimiters(char valueDelimiter, char pairDelimiter);
    char queryValueDelimiter() const;
    char queryPairDelimiter() const;
    void setQueryItems(const QList<QPair<QString, QString> > &query);
    void addQueryItem(const QString &key, const QString &value);
    QList<QPair<QString, QString> > queryItems() const;
    bool hasQueryItem(const QString &key) const;
    QString queryItemValue(const QString &key) const;
    QStringList allQueryItemValues(const QString &key) const;
    void removeQueryItem(const QString &key);
    void removeAllQueryItems(const QString &key);
    void setFragment(const QString &fragment);
    QString fragment() const;
    QUrl resolved(const QUrl &relative) const;
    bool isRelative() const;
    bool isParentOf(const QUrl &url) const;
    static QUrl fromLocalFile(const QString &localfile);
    QString toLocalFile() const;
    QString toString(QFlags<QUrl::FormattingOption> options = None) const;
    QByteArray toEncoded(QFlags<QUrl::FormattingOption> options = None) const;
    static QUrl fromEncoded(const QByteArray &url);
    static QUrl fromEncoded(const QByteArray &url, QUrl::ParsingMode mode);
    void detach();
    bool isDetached() const;
    bool operator<(const QUrl &url) const;
    bool operator==(const QUrl &url) const;
    bool operator!=(const QUrl &url) const;
    static QString fromPercentEncoding(const QByteArray &);
    static QByteArray toPercentEncoding(const QString &, const QByteArray &exclude = QByteArray(), const QByteArray &include = QByteArray());
    static QString fromPunycode(const QByteArray &);
    static QByteArray toPunycode(const QString &);
};

QFlags<QUrl::FormattingOption> operator|(QUrl::FormattingOption f1, QFlags<QUrl::FormattingOption> f2);
QFlags<QUrl::FormattingOption> operator|(QUrl::FormattingOption f1, QUrl::FormattingOption f2);
QDataStream &operator<<(QDataStream &, const QUrl & /Constrained/);
QDataStream &operator>>(QDataStream &, QUrl & /Constrained/);
