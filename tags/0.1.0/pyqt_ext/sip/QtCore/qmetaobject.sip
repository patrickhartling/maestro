// qmetaobject.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QMetaMethod
{

%TypeHeaderCode
#include <qmetaobject.h>
%End

public:
    QMetaMethod();
    const char *signature() const;
    const char *typeName() const;
    QList<QByteArray> parameterTypes() const;
    QList<QByteArray> parameterNames() const;
    const char *tag() const;

    enum Access
    {
        Private,
        Protected,
        Public,
    };

    QMetaMethod::Access access() const;

    enum MethodType
    {
        Method,
        Signal,
        Slot,
    };

    QMetaMethod::MethodType methodType() const;

    enum Attributes
    {
        Compatibility,
        Cloned,
        Scriptable,
    };

    int attributes() const;
};

class QMetaEnum
{

%TypeHeaderCode
#include <qmetaobject.h>
%End

public:
    QMetaEnum();
    const char *name() const;
    bool isFlag() const;
    int keyCount() const;
    const char *key(int index) const;
    int value(int index) const;
    const char *scope() const;
    int keyToValue(const char *key) const;
    const char *valueToKey(int value) const;
    int keysToValue(const char *keys) const;
    QByteArray valueToKeys(int value) const;
    bool isValid() const;
};

class QMetaProperty
{

%TypeHeaderCode
#include <qmetaobject.h>
%End

public:
    QMetaProperty();
    const char *name() const;
    const char *typeName() const;
    QVariant::Type type() const;
    bool isReadable() const;
    bool isWritable() const;
    bool isDesignable(const QObject *obj = 0) const;
    bool isScriptable(const QObject *obj = 0) const;
    bool isStored(const QObject *obj = 0) const;
    bool isEditable(const QObject *obj = 0) const;
    bool isFlagType() const;
    bool isEnumType() const;
    QMetaEnum enumerator() const;
    QVariant read(const QObject *obj) const;
    bool write(QObject *obj, const QVariant &value) const;
    bool reset(QObject *obj) const;
    bool hasStdCppSet() const;
    bool isValid() const;
    bool isResettable() const;
    bool isUser(const QObject *obj = 0) const;
};

class QMetaClassInfo
{

%TypeHeaderCode
#include <qmetaobject.h>
%End

public:
    QMetaClassInfo();
    const char *name() const;
    const char *value() const;
};
