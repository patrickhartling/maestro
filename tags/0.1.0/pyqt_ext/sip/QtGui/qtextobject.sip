// qtextobject.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QTextObject : QObject
{

%TypeHeaderCode
#include <qtextobject.h>
%End

protected:
    explicit QTextObject(QTextDocument *doc);
    virtual ~QTextObject();
    void setFormat(const QTextFormat &format);

public:
    QTextFormat format() const;
    int formatIndex() const;
    QTextDocument *document() const;
    int objectIndex() const;

private:
    QTextObject(const QTextObject &);
};

class QTextBlockGroup : QTextObject
{

%TypeHeaderCode
#include <qtextobject.h>
%End

protected:
    explicit QTextBlockGroup(QTextDocument *doc);
    virtual ~QTextBlockGroup();
    virtual void blockInserted(const QTextBlock &block);
    virtual void blockRemoved(const QTextBlock &block);
    virtual void blockFormatChanged(const QTextBlock &block);
    QList<QTextBlock> blockList() const;

private:
    QTextBlockGroup(const QTextBlockGroup &);
};

class QTextFrame : QTextObject
{

%TypeHeaderCode
#include <qtextobject.h>
%End

public:
    explicit QTextFrame(QTextDocument *doc);
    virtual ~QTextFrame();
    QTextFrameFormat frameFormat() const;
    QTextCursor firstCursorPosition() const;
    QTextCursor lastCursorPosition() const;
    int firstPosition() const;
    int lastPosition() const;
    QList<QTextFrame*> childFrames() const;
    QTextFrame *parentFrame() const;

    class iterator
    {

%TypeHeaderCode
#include <qtextobject.h>
%End

    public:
        iterator();
        iterator(const QTextFrame::iterator &o);
        QTextFrame *parentFrame() const;
        QTextFrame *currentFrame() const;
        QTextBlock currentBlock() const;
        bool atEnd() const;
        bool operator==(const QTextFrame::iterator &o) const;
        bool operator!=(const QTextFrame::iterator &o) const;
        QTextFrame::iterator &operator+=(int);
%MethodCode
            if (a0 > 0)
                while (a0--)
                    (*sipCpp)++;
            else if (a0 < 0)
                while (a0++)
                    (*sipCpp)--;
%End

        QTextFrame::iterator &operator-=(int);
%MethodCode
            if (a0 > 0)
                while (a0--)
                    (*sipCpp)--;
            else if (a0 < 0)
                while (a0++)
                    (*sipCpp)++;
%End
    };

    typedef QTextFrame::iterator Iterator;
    QTextFrame::iterator begin() const;
    QTextFrame::iterator end() const;

private:
    QTextFrame(const QTextFrame &);

public:
    void setFrameFormat(const QTextFrameFormat &aformat);
};

class QTextBlock
{

%TypeHeaderCode
#include <qtextobject.h>
%End

public:
    QTextBlock();
    QTextBlock(const QTextBlock &o);
    bool isValid() const;
    bool operator==(const QTextBlock &o) const;
    bool operator!=(const QTextBlock &o) const;
    bool operator<(const QTextBlock &o) const;
    int position() const;
    int length() const;
    bool contains(int position) const;
    QTextLayout *layout() const;
    QTextBlockFormat blockFormat() const;
    int blockFormatIndex() const;
    QTextCharFormat charFormat() const;
    int charFormatIndex() const;
    QString text() const;
    const QTextDocument *document() const;
    QTextList *textList() const;

    class iterator
    {

%TypeHeaderCode
#include <qtextobject.h>
%End

    public:
        iterator();
        iterator(const QTextBlock::iterator &o);
        QTextFragment fragment() const;
        bool atEnd() const;
        bool operator==(const QTextBlock::iterator &o) const;
        bool operator!=(const QTextBlock::iterator &o) const;
        QTextBlock::iterator &operator+=(int);
%MethodCode
            if (a0 > 0)
                while (a0--)
                    (*sipCpp)++;
            else if (a0 < 0)
                while (a0++)
                    (*sipCpp)--;
%End

        QTextBlock::iterator &operator-=(int);
%MethodCode
            if (a0 > 0)
                while (a0--)
                    (*sipCpp)--;
            else if (a0 < 0)
                while (a0++)
                    (*sipCpp)++;
%End
    };

    typedef QTextBlock::iterator Iterator;
    QTextBlock::iterator begin() const;
    QTextBlock::iterator end() const;
    QTextBlock next() const;
    QTextBlock previous() const;
    QTextBlockUserData *userData() const;
    void setUserData(QTextBlockUserData *data);
    int userState() const;
    void setUserState(int state);
};

class QTextFragment
{

%TypeHeaderCode
#include <qtextobject.h>
%End

public:
    QTextFragment();
    QTextFragment(const QTextFragment &o);
    bool isValid() const;
    bool operator==(const QTextFragment &o) const;
    bool operator!=(const QTextFragment &o) const;
    bool operator<(const QTextFragment &o) const;
    int position() const;
    int length() const;
    bool contains(int position) const;
    QTextCharFormat charFormat() const;
    int charFormatIndex() const;
    QString text() const;
};

class QTextBlockUserData
{

%TypeHeaderCode
#include <qtextobject.h>
%End

public:
    virtual ~QTextBlockUserData();
};
