// qimagereader.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QImageReader
{

%TypeHeaderCode
#include <qimagereader.h>
%End

public:
    enum ImageReaderError
    {
        UnknownError,
        FileNotFoundError,
        DeviceError,
        UnsupportedFormatError,
        InvalidDataError,
    };

    QImageReader();
    QImageReader(QIODevice *device, const QByteArray &format = QByteArray());
    QImageReader(const QString &fileName, const QByteArray &format = QByteArray());
    ~QImageReader();
    void setFormat(const QByteArray &format);
    QByteArray format() const;
    void setDevice(QIODevice *device);
    QIODevice *device() const;
    void setFileName(const QString &fileName);
    QString fileName() const;
    QSize size() const;
    void setClipRect(const QRect &rect);
    QRect clipRect() const;
    void setScaledSize(const QSize &size);
    QSize scaledSize() const;
    void setScaledClipRect(const QRect &rect);
    QRect scaledClipRect() const;
    bool canRead() const;
    QImage read() /ReleaseGIL/;
    bool jumpToNextImage();
    bool jumpToImage(int imageNumber);
    int loopCount() const;
    int imageCount() const;
    int nextImageDelay() const;
    int currentImageNumber() const;
    QRect currentImageRect() const;
    QImageReader::ImageReaderError error() const;
    QString errorString() const;
    static QByteArray imageFormat(const QString &fileName);
    static QByteArray imageFormat(QIODevice *device);
    static QList<QByteArray> supportedImageFormats();
    QStringList textKeys() const;
    QString text(const QString &key) const;
    void setBackgroundColor(const QColor &color);
    QColor backgroundColor() const;
    bool supportsAnimation() const;

private:
    QImageReader(const QImageReader &);
};
