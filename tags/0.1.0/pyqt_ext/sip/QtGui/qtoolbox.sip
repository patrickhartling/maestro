// qtoolbox.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QToolBox : QFrame
{

%TypeHeaderCode
#include <qtoolbox.h>
%End

public:
    QToolBox(QWidget *parent /TransferThis/ = 0, Qt::WFlags f = 0);
    virtual ~QToolBox();
    int addItem(QWidget *item /Transfer/, const QString &text);
    int addItem(QWidget *item /Transfer/, const QIcon &iconSet, const QString &text);
    int insertItem(int index, QWidget *item /Transfer/, const QString &text);
    int insertItem(int index, QWidget *widget /Transfer/, const QIcon &icon, const QString &text);
    void removeItem(int index);
    void setItemEnabled(int index, bool enabled);
    bool isItemEnabled(int index) const;
    void setItemText(int index, const QString &text);
    QString itemText(int index) const;
    void setItemIcon(int index, const QIcon &icon);
    QIcon itemIcon(int index) const;
    void setItemToolTip(int index, const QString &toolTip);
    QString itemToolTip(int index) const;
    int currentIndex() const;
    QWidget *currentWidget() const;
    QWidget *widget(int index) const;
    int indexOf(QWidget *widget) const;
    int count() const;

public slots:
    void setCurrentIndex(int index);
    void setCurrentWidget(QWidget *widget);

signals:
    void currentChanged(int index);

protected:
    virtual void itemInserted(int index);
    virtual void itemRemoved(int index);
    virtual bool event(QEvent *e);
    virtual void showEvent(QShowEvent *e);
    virtual void changeEvent(QEvent *);

private:
    QToolBox(const QToolBox &);
};
