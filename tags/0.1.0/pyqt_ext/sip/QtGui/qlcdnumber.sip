// qlcdnumber.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QLCDNumber : QFrame
{

%TypeHeaderCode
#include <qlcdnumber.h>
%End

public:
    explicit QLCDNumber(QWidget *parent /TransferThis/ = 0);
    QLCDNumber(uint numDigits, QWidget *parent /TransferThis/ = 0);
    virtual ~QLCDNumber();

    enum Mode
    {
        Hex,
        Dec,
        Oct,
        Bin,
    };

    enum SegmentStyle
    {
        Outline,
        Filled,
        Flat,
    };

    bool smallDecimalPoint() const;
    int numDigits() const;
    void setNumDigits(int nDigits);
    bool checkOverflow(double num /Constrained/) const;
    bool checkOverflow(int num) const;
    QLCDNumber::Mode mode() const;
    void setMode(QLCDNumber::Mode);
    QLCDNumber::SegmentStyle segmentStyle() const;
    void setSegmentStyle(QLCDNumber::SegmentStyle);
    double value() const;
    int intValue() const;
    virtual QSize sizeHint() const;
    void display(const QString &str);
    void display(double num /Constrained/);
    void display(int num);
    void setHexMode();
    void setDecMode();
    void setOctMode();
    void setBinMode();
    void setSmallDecimalPoint(bool);

signals:
    void overflow();

protected:
    virtual bool event(QEvent *e);
    virtual void paintEvent(QPaintEvent *);

private:
    QLCDNumber(const QLCDNumber &);
};
