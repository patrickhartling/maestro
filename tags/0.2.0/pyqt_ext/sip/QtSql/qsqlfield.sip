// qsqlfield.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QSqlField
{

%TypeHeaderCode
#include <qsqlfield.h>
%End

public:
    enum RequiredStatus
    {
        Unknown,
        Optional,
        Required,
    };

    QSqlField(const QString &fieldName = QString(), QVariant::Type type = QVariant::Invalid);
    QSqlField(const QSqlField &other);
    bool operator==(const QSqlField &other) const;
    bool operator!=(const QSqlField &other) const;
    ~QSqlField();
    void setValue(const QVariant &value);
    QVariant value() const;
    void setName(const QString &name);
    QString name() const;
    bool isNull() const;
    void setReadOnly(bool readOnly);
    bool isReadOnly() const;
    void clear();
    QVariant::Type type() const;
    bool isAutoValue() const;
    void setType(QVariant::Type type);
    void setRequiredStatus(QSqlField::RequiredStatus status);
    void setRequired(bool required);
    void setLength(int fieldLength);
    void setPrecision(int precision);
    void setDefaultValue(const QVariant &value);
    void setSqlType(int type);
    void setGenerated(bool gen);
    void setAutoValue(bool autoVal);
    QSqlField::RequiredStatus requiredStatus() const;
    int length() const;
    int precision() const;
    QVariant defaultValue() const;
    int typeID() const;
    bool isGenerated() const;
    bool isValid() const;
};
