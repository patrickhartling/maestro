// qglpixelbuffer.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtOpenGL Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QGLPixelBuffer : QPaintDevice
{

%TypeHeaderCode
#include <qglpixelbuffer.h>
%End

public:
    QGLPixelBuffer(const QSize &size, const QGLFormat &format = QGLFormat::defaultFormat(), QGLWidget *shareWidget = 0);
%If (Qt_4_2_0 -)
    QGLPixelBuffer(int width, int height, const QGLFormat &format = QGLFormat::defaultFormat(), QGLWidget *shareWidget = 0);
%End
    virtual ~QGLPixelBuffer();
    bool isValid() const;
    bool makeCurrent();
    bool doneCurrent();
    GLuint generateDynamicTexture() const;
    bool bindToDynamicTexture(GLuint texture);
    void releaseFromDynamicTexture();
    void updateDynamicTexture(GLuint texture_id) const;
    GLuint bindTexture(const QImage &image, GLenum target = GL_TEXTURE_2D);
    GLuint bindTexture(const QPixmap &pixmap, GLenum target = GL_TEXTURE_2D);
    GLuint bindTexture(const QString &fileName);
    void deleteTexture(GLuint texture_id);
    QSize size() const;
    Qt::HANDLE handle() const;
    QImage toImage() const;
    virtual QPaintEngine *paintEngine() const;
    QGLFormat format() const;
    static bool hasOpenGLPbuffers();

protected:
    virtual int metric(QPaintDevice::PaintDeviceMetric metric) const;
    virtual int devType() const;

private:
    QGLPixelBuffer(const QGLPixelBuffer &);
};
