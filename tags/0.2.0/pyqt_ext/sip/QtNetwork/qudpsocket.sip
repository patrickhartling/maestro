// qudpsocket.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qudpsocket.h>
%End


class QUdpSocket : QAbstractSocket
{

%TypeHeaderCode
#include <qudpsocket.h>
%End

public:
    enum BindFlag
    {
        DefaultForPlatform,
        ShareAddress,
        DontShareAddress,
        ReuseAddressHint,
    };

    typedef QFlags<QUdpSocket::BindFlag> BindMode;
    explicit QUdpSocket(QObject *parent /TransferThis/ = 0);
    virtual ~QUdpSocket();
    bool bind(const QHostAddress &address, quint16 port);
    bool bind(quint16 port = 0);
    bool bind(const QHostAddress &address, quint16 port, QFlags<QUdpSocket::BindFlag> mode);
    bool bind(quint16 port, QFlags<QUdpSocket::BindFlag> mode);
    bool hasPendingDatagrams() const;
    qint64 pendingDatagramSize() const;
    SIP_PYOBJECT readDatagram(qint64 maxlen, QHostAddress *host /Out/ = 0, quint16 *port = 0) /ReleaseGIL/;
%MethodCode
        // Return the data read or None if there was an error.
        char *s;
        
        if ((s = (char *)sipMalloc(a0)) == NULL)
            sipIsErr = 1;
        else
        {
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->readDatagram(s, a0, a1, &a2);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
                sipRes = PyString_FromStringAndSize(s, len);
        
            sipFree((ANY *)s);
        }
%End

    qint64 writeDatagram(const char *data /Array/, qint64 len /ArraySize/, const QHostAddress &host, quint16 port) /ReleaseGIL/;
    qint64 writeDatagram(const QByteArray &datagram, const QHostAddress &host, quint16 port) /ReleaseGIL/;

private:
    QUdpSocket(const QUdpSocket &);
};

%If (Qt_4_2_0 -)
QFlags<QUdpSocket::BindFlag> operator|(QUdpSocket::BindFlag f1, QFlags<QUdpSocket::BindFlag> f2);
%End
%If (Qt_4_2_0 -)
QFlags<QUdpSocket::BindFlag> operator|(QUdpSocket::BindFlag f1, QUdpSocket::BindFlag f2);
%End
