// qbitarray.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qbitarray.h>
%End


class QBitArray
{

%TypeHeaderCode
#include <qbitarray.h>
%End

public:
    QBitArray();
    QBitArray(int size, bool val = false);
    QBitArray(const QBitArray &other);
    int size() const;
    int count() const;
    bool isEmpty() const;
    bool isNull() const;
    void resize(int size);
    void detach();
    bool isDetached() const;
    void clear();
    QBitArray &operator&=(const QBitArray &);
    QBitArray &operator|=(const QBitArray &);
    QBitArray &operator^=(const QBitArray &);
    QBitArray operator~() const;
    bool operator==(const QBitArray &a) const;
    bool operator!=(const QBitArray &a) const;
    void fill(bool val, int first, int last);
    void truncate(int pos);
    bool fill(bool aval, int asize = -1);
    bool testBit(int i) const;
    void setBit(int i);
    void clearBit(int i);
    void setBit(int i, bool val);
    bool toggleBit(int i);
    bool operator[](int i) const;
    bool at(int i) const;
    int count(bool on) const;
};

QBitArray operator&(const QBitArray &, const QBitArray &);
QBitArray operator|(const QBitArray &, const QBitArray &);
QBitArray operator^(const QBitArray &, const QBitArray &);
QDataStream &operator<<(QDataStream &, const QBitArray & /Constrained/);
QDataStream &operator>>(QDataStream &, QBitArray & /Constrained/);
