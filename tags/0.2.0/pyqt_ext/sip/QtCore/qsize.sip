// qsize.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qsize.h>
%End


class QSize
{

%TypeHeaderCode
#include <qsize.h>
%End

public:
    void transpose();
    void scale(const QSize &s, Qt::AspectRatioMode mode);
    QSize();
    QSize(int w, int h);
    bool isNull() const;
    bool isEmpty() const;
    bool isValid() const;
    int __nonzero__() const;
%MethodCode
        sipRes = sipCpp->isValid();
%End

    int width() const;
    int height() const;
    void setWidth(int w);
    void setHeight(int h);
    void scale(int w, int h, Qt::AspectRatioMode mode);
    QSize &operator+=(const QSize &s);
    QSize &operator-=(const QSize &s);
    QSize &operator*=(qreal c);
    QSize &operator/=(qreal c);
    QSize expandedTo(const QSize &otherSize) const;
    QSize boundedTo(const QSize &otherSize) const;
};

QDataStream &operator<<(QDataStream &, const QSize & /Constrained/);
QDataStream &operator>>(QDataStream &, QSize & /Constrained/);
bool operator==(const QSize &s1, const QSize &s2);
bool operator!=(const QSize &s1, const QSize &s2);
const QSize operator+(const QSize &s1, const QSize &s2);
const QSize operator-(const QSize &s1, const QSize &s2);
const QSize operator*(const QSize &s, qreal c);
const QSize operator*(qreal c, const QSize &s);
const QSize operator/(const QSize &s, qreal c);

class QSizeF
{

%TypeHeaderCode
#include <qsize.h>
%End

public:
    void transpose();
    void scale(const QSizeF &s, Qt::AspectRatioMode mode);
    QSizeF();
    QSizeF(const QSize &sz);
    QSizeF(qreal w, qreal h);
    bool isNull() const;
    bool isEmpty() const;
    bool isValid() const;
    int __nonzero__() const;
%MethodCode
        sipRes = sipCpp->isValid();
%End

    qreal width() const;
    qreal height() const;
    void setWidth(qreal w);
    void setHeight(qreal h);
    void scale(qreal w, qreal h, Qt::AspectRatioMode mode);
    QSizeF &operator+=(const QSizeF &s);
    QSizeF &operator-=(const QSizeF &s);
    QSizeF &operator*=(qreal c);
    QSizeF &operator/=(qreal c);
    QSizeF expandedTo(const QSizeF &otherSize) const;
    QSizeF boundedTo(const QSizeF &otherSize) const;
    QSize toSize() const;
};

QDataStream &operator<<(QDataStream &, const QSizeF & /Constrained/);
QDataStream &operator>>(QDataStream &, QSizeF & /Constrained/);
bool operator==(const QSizeF &s1, const QSizeF &s2);
bool operator!=(const QSizeF &s1, const QSizeF &s2);
const QSizeF operator+(const QSizeF &s1, const QSizeF &s2);
const QSizeF operator-(const QSizeF &s1, const QSizeF &s2);
const QSizeF operator*(const QSizeF &s, qreal c);
const QSizeF operator*(qreal c, const QSizeF &s);
const QSizeF operator/(const QSizeF &s, qreal c);
