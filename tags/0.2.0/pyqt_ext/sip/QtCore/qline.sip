// qline.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qline.h>
%End


class QLine
{

%TypeHeaderCode
#include <qline.h>
%End

public:
    bool operator!=(const QLine &d) const;
    QLine();
    QLine(const QPoint &pt1_, const QPoint &pt2_);
    QLine(int x1pos, int y1pos, int x2pos, int y2pos);
    bool isNull() const;
    int __nonzero__() const;
%MethodCode
        sipRes = !sipCpp->isNull();
%End

    int x1() const;
    int y1() const;
    int x2() const;
    int y2() const;
    QPoint p1() const;
    QPoint p2() const;
    int dx() const;
    int dy() const;
    void translate(const QPoint &point);
    void translate(int adx, int ady);
    bool operator==(const QLine &d) const;
};

QDataStream &operator<<(QDataStream &, const QLine & /Constrained/);
QDataStream &operator>>(QDataStream &, QLine & /Constrained/);

class QLineF
{

%TypeHeaderCode
#include <qline.h>
%End

public:
    enum IntersectType
    {
        NoIntersection,
        BoundedIntersection,
        UnboundedIntersection,
    };

    QLineF(const QLine &line);
    bool isNull() const;
    int __nonzero__() const;
%MethodCode
        sipRes = !sipCpp->isNull();
%End

    qreal length() const;
    QLineF unitVector() const;
    QLineF::IntersectType intersect(const QLineF &l, QPointF *intersectionPoint) const;
    qreal angle(const QLineF &l) const;
    bool operator!=(const QLineF &d) const;
    QLineF();
    QLineF(const QPointF &apt1, const QPointF &apt2);
    QLineF(qreal x1pos, qreal y1pos, qreal x2pos, qreal y2pos);
    qreal x1() const;
    qreal y1() const;
    qreal x2() const;
    qreal y2() const;
    QPointF p1() const;
    QPointF p2() const;
    qreal dx() const;
    qreal dy() const;
    QLineF normalVector() const;
    void translate(const QPointF &point);
    void translate(qreal adx, qreal ady);
    void setLength(qreal len);
    QPointF pointAt(qreal t) const;
    QLine toLine() const;
    bool operator==(const QLineF &d) const;
};

QDataStream &operator<<(QDataStream &, const QLineF & /Constrained/);
QDataStream &operator>>(QDataStream &, QLineF & /Constrained/);
