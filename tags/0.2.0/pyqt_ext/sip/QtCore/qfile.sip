// qfile.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qfile.h>
%End


class QFile : QIODevice
{

%TypeHeaderCode
#include <qfile.h>
%End

public:
    enum FileError
    {
        NoError,
        ReadError,
        WriteError,
        FatalError,
        ResourceError,
        OpenError,
        AbortError,
        TimeOutError,
        UnspecifiedError,
        RemoveError,
        RenameError,
        PositionError,
        ResizeError,
        PermissionsError,
        CopyError,
    };

    enum Permission
    {
        ReadOwner,
        WriteOwner,
        ExeOwner,
        ReadUser,
        WriteUser,
        ExeUser,
        ReadGroup,
        WriteGroup,
        ExeGroup,
        ReadOther,
        WriteOther,
        ExeOther,
    };

    typedef QFlags<QFile::Permission> Permissions;
    QFile();
    QFile(const QString &name);
    explicit QFile(QObject *parent /TransferThis/);
    QFile(const QString &name, QObject *parent /TransferThis/);
    virtual ~QFile();
    QFile::FileError error() const;
    void unsetError();
    QString fileName() const;
    void setFileName(const QString &name);
    static QByteArray encodeName(const QString &fileName);
    static QString decodeName(const QByteArray &localFileName);
    static QString decodeName(const char *localFileName);
    bool exists() const;
    static bool exists(const QString &fileName);
    QString readLink() const;
    static QString readLink(const QString &fileName);
    bool remove() /ReleaseGIL/;
    static bool remove(const QString &fileName) /ReleaseGIL/;
    bool rename(const QString &newName) /ReleaseGIL/;
    static bool rename(const QString &oldName, const QString &newName) /ReleaseGIL/;
    bool link(const QString &newName) /ReleaseGIL/;
    static bool link(const QString &oldname, const QString &newName) /ReleaseGIL/;
    bool copy(const QString &newName) /ReleaseGIL/;
    static bool copy(const QString &fileName, const QString &newName) /ReleaseGIL/;
    virtual bool isSequential() const;
    virtual bool open(QFlags<QIODevice::OpenModeFlag> flags) /ReleaseGIL/;
    bool open(int fd, QFlags<QIODevice::OpenModeFlag> flags) /ReleaseGIL/;
    virtual void close() /ReleaseGIL/;
    virtual qint64 size() const;
    virtual qint64 pos() const;
    virtual bool seek(qint64 offset) /ReleaseGIL/;
    virtual bool atEnd() const;
    bool flush() /ReleaseGIL/;
    bool resize(qint64 sz);
    static bool resize(const QString &filename, qint64 sz);
    QFlags<QFile::Permission> permissions() const;
    static QFlags<QFile::Permission> permissions(const QString &filename);
    bool setPermissions(QFlags<QFile::Permission> permissionSpec);
    static bool setPermissions(const QString &filename, QFlags<QFile::Permission> permissionSpec);
    int handle() const;
    virtual QAbstractFileEngine *fileEngine() const;

protected:
    virtual SIP_PYOBJECT readData(qint64 maxlen) /ReleaseGIL/ [qint64 (char *data, qint64 maxlen)];
%MethodCode
        // Return the data read or None if there was an error.
        char *s;
        
        if ((s = (char *)sipMalloc(a0)) == NULL)
            sipIsErr = 1;
        else
        {
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->sipProtectVirt_readData(sipSelfWasArg, s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                sipFree((ANY *)s);
        
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = PyString_FromStringAndSize(s, len);
        
                sipFree((ANY *)s);
        
                if (sipRes == NULL)
                    sipIsErr = 1;
            }
        }
%End

    virtual SIP_PYOBJECT readLineData(qint64 maxlen) /ReleaseGIL/ [qint64 (char *data, qint64 maxlen)];
%MethodCode
        // Return the data read or None if there was an error.
        char *s;
        
        if ((s = (char *)sipMalloc(a0)) == NULL)
            sipIsErr = 1;
        else
        {
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->sipProtectVirt_readLineData(sipSelfWasArg, s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                sipFree((ANY *)s);
        
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = PyString_FromStringAndSize(s, len);
        
                sipFree((ANY *)s);
        
                if (sipRes == NULL)
                    sipIsErr = 1;
            }
        }
%End

    virtual qint64 writeData(const char *data /Array/, qint64 len /ArraySize/) /ReleaseGIL/;

private:
    QFile(const QFile &);
};

QFlags<QFile::Permission> operator|(QFile::Permission f1, QFlags<QFile::Permission> f2);
QFlags<QFile::Permission> operator|(QFile::Permission f1, QFile::Permission f2);
