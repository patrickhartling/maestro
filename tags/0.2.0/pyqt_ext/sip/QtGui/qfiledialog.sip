// qfiledialog.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qfiledialog.h>
%End


class QFileDialog : QDialog
{

%TypeHeaderCode
#include <qfiledialog.h>
%End

public:
    enum ViewMode
    {
        Detail,
        List,
    };

    enum FileMode
    {
        AnyFile,
        ExistingFile,
        Directory,
        ExistingFiles,
        DirectoryOnly,
    };

    enum AcceptMode
    {
        AcceptOpen,
        AcceptSave,
    };

    enum DialogLabel
    {
        LookIn,
        FileName,
        FileType,
        Accept,
        Reject,
    };

    enum Option
    {
        ShowDirsOnly,
        DontResolveSymlinks,
        DontConfirmOverwrite,
        DontUseSheet,
        DontUseNativeDialog,
    };

    typedef QFlags<QFileDialog::Option> Options;
%If (- Qt_4_2_0)
    QFileDialog(QWidget *parent /TransferThis/, Qt::WFlags f);
%End
%If (Qt_4_2_0 -)
    QFileDialog(QWidget *parent /TransferThis/, Qt::WindowFlags f);
%End
    QFileDialog(QWidget *parent /TransferThis/ = 0, const QString &caption = QString(), const QString &directory = QString(), const QString &filter = QString());
    virtual ~QFileDialog();
    void setDirectory(const QString &directory);
    void setDirectory(const QDir &adirectory);
    QDir directory() const;
    void selectFile(const QString &filename);
    QStringList selectedFiles() const;
    void setFilter(const QString &filter);
    void setFilters(const QStringList &filters);
    QStringList filters() const;
    void selectFilter(const QString &filter);
    QString selectedFilter() const;
    void setViewMode(QFileDialog::ViewMode mode);
    QFileDialog::ViewMode viewMode() const;
    void setFileMode(QFileDialog::FileMode mode);
    QFileDialog::FileMode fileMode() const;
    void setAcceptMode(QFileDialog::AcceptMode mode);
    QFileDialog::AcceptMode acceptMode() const;
    void setReadOnly(bool enabled);
    bool isReadOnly() const;
    void setResolveSymlinks(bool enabled);
    bool resolveSymlinks() const;
    void setConfirmOverwrite(bool enabled);
    bool confirmOverwrite() const;
    void setDefaultSuffix(const QString &suffix);
    QString defaultSuffix() const;
    void setHistory(const QStringList &paths);
    QStringList history() const;
    void setItemDelegate(QAbstractItemDelegate *delegate);
    QAbstractItemDelegate *itemDelegate() const;
    void setIconProvider(QFileIconProvider *provider);
    QFileIconProvider *iconProvider() const;
    void setLabelText(QFileDialog::DialogLabel label, const QString &text);
    QString labelText(QFileDialog::DialogLabel label) const;

signals:
    void filesSelected(const QStringList &files);
    void currentChanged(const QString &path);

public:
    static QString getOpenFileName(QWidget *parent = 0, const QString &caption = QString(), const QString &dir = QString(), const QString &filter = QString(), QString *selectedFilter = 0, QFlags<QFileDialog::Option> options = 0) /ReleaseGIL/;
    static QString getSaveFileName(QWidget *parent = 0, const QString &caption = QString(), const QString &dir = QString(), const QString &filter = QString(), QString *selectedFilter = 0, QFlags<QFileDialog::Option> options = 0) /ReleaseGIL/;
    static QString getExistingDirectory(QWidget *parent = 0, const QString &caption = QString(), const QString &dir = QString(), QFlags<QFileDialog::Option> options = ShowDirsOnly) /ReleaseGIL/;
    static QStringList getOpenFileNames(QWidget *parent = 0, const QString &caption = QString(), const QString &dir = QString(), const QString &filter = QString(), QString *selectedFilter = 0, QFlags<QFileDialog::Option> options = 0) /ReleaseGIL/;

protected:
    void done(int result);
    void accept();

private:
    QFileDialog(const QFileDialog &);
};

QFlags<QFileDialog::Option> operator|(QFileDialog::Option f1, QFlags<QFileDialog::Option> f2);
QFlags<QFileDialog::Option> operator|(QFileDialog::Option f1, QFileDialog::Option f2);
