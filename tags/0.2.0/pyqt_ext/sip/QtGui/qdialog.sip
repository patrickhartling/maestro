// qdialog.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QDialog : QWidget
{

%TypeHeaderCode
#include <qdialog.h>
%End

public:
    QDialog(QWidget *parent /TransferThis/ = 0, Qt::WFlags f = 0);
    virtual ~QDialog();

    enum DialogCode
    {
        Rejected,
        Accepted,
    };

    int result() const;
    virtual void setVisible(bool visible);
    void setOrientation(Qt::Orientation orientation);
    Qt::Orientation orientation() const;
    void setExtension(QWidget *extension);
    QWidget *extension() const;
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    void setSizeGripEnabled(bool);
    bool isSizeGripEnabled() const;
    void setModal(bool modal);
    void setResult(int r);

public slots:
    int exec() /PostHook=__pyQtPostEventLoopHook__, PreHook=__pyQtPreEventLoopHook__, PyName=exec_, ReleaseGIL/;
%MethodCode
        // Transfer ownership back to Python (a modal dialog will probably have the
        // main window as it's parent).  This means the Qt dialog will be deleted when
        // the Python wrapper is garbage collected.  Although this is a little
        // inconsistent, it saves having to code it explicitly to avoid the memory
        // leak.
        sipTransferBack(sipSelf);
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = sipCpp->exec();
        Py_END_ALLOW_THREADS
%End

    virtual void done(int);
    virtual void accept();
    virtual void reject();
    void showExtension(bool);

signals:
    void accepted();
    void finished(int result);
    void rejected();

protected:
    virtual void keyPressEvent(QKeyEvent *);
    virtual void closeEvent(QCloseEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void contextMenuEvent(QContextMenuEvent *);
    virtual bool eventFilter(QObject *, QEvent *);

private:
    QDialog(const QDialog &);
};
