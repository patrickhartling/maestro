// qmatrix.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qmatrix.h>
%End


class QMatrix
{

%TypeHeaderCode
#include <qmatrix.h>
%End

public:
    QMatrix();
    QMatrix(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy);
    QMatrix(const QMatrix &matrix);
    void setMatrix(qreal m11, qreal m12, qreal m21, qreal m22, qreal dx, qreal dy);
    qreal m11() const;
    qreal m12() const;
    qreal m21() const;
    qreal m22() const;
    qreal dx() const;
    qreal dy() const;
    void map(int x /Constrained/, int y /Constrained/, int *tx, int *ty) const;
    void map(qreal x, qreal y, qreal *tx, qreal *ty) const;
    QRect mapRect(const QRect &) const;
    QRectF mapRect(const QRectF &) const;
    QPoint map(const QPoint &p) const;
    QPointF map(const QPointF &p) const;
    QLine map(const QLine &l) const;
    QLineF map(const QLineF &l) const;
    QPolygonF map(const QPolygonF &a) const;
    QPolygon map(const QPolygon &a) const;
    QRegion map(const QRegion &r) const;
    QPainterPath map(const QPainterPath &p) const;
    QPolygon mapToPolygon(const QRect &r) const;
    void reset();
    QMatrix &translate(qreal dx, qreal dy);
    QMatrix &scale(qreal sx, qreal sy);
    QMatrix &shear(qreal sh, qreal sv);
    QMatrix &rotate(qreal a);
    bool isInvertible() const;
    qreal det() const;
    QMatrix inverted(bool *invertible = 0) const;
    bool operator==(const QMatrix &) const;
    bool operator!=(const QMatrix &) const;
    QMatrix &operator*=(const QMatrix &);
    QMatrix operator*(const QMatrix &o) const;
    bool isIdentity() const;
};

QPoint operator*(const QPoint &p, const QMatrix &m);
QPointF operator*(const QPointF &p, const QMatrix &m);
QLineF operator*(const QLineF &l, const QMatrix &m);
QLine operator*(const QLine &l, const QMatrix &m);
QPolygon operator*(const QPolygon &a, const QMatrix &m);
QPolygonF operator*(const QPolygonF &a, const QMatrix &m);
QRegion operator*(const QRegion &r, const QMatrix &m);
QPainterPath operator*(const QPainterPath &p, const QMatrix &m);
QDataStream &operator<<(QDataStream &, const QMatrix & /Constrained/);
QDataStream &operator>>(QDataStream &, QMatrix & /Constrained/);
