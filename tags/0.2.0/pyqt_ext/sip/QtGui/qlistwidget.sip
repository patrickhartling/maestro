// qlistwidget.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qlistwidget.h>
%End


class QListWidgetItem
{

%TypeHeaderCode
#include <qlistwidget.h>
%End

public:
    enum
    {
        Type,
        UserType,
    };

    QListWidgetItem(QListWidget *view /TransferThis/ = 0, int type = Type);
    QListWidgetItem(const QString &text, QListWidget *view /TransferThis/ = 0, int type = Type);
    QListWidgetItem(const QIcon &icon, const QString &text, QListWidget *view /TransferThis/ = 0, int type = Type);
    QListWidgetItem(const QListWidgetItem &other);
    virtual ~QListWidgetItem();
    virtual QListWidgetItem *clone() const /Factory/;
    QListWidget *listWidget() const;
    Qt::ItemFlags flags() const;
    QString text() const;
    QIcon icon() const;
    QString statusTip() const;
%If (PyQt_ToolTip)
    QString toolTip() const;
%End
%If (PyQt_WhatsThis)
    QString whatsThis() const;
%End
    QFont font() const;
    int textAlignment() const;
    void setTextAlignment(int alignment);
    QColor backgroundColor() const;
    virtual void setBackgroundColor(const QColor &color);
    QColor textColor() const;
    void setTextColor(const QColor &color);
    Qt::CheckState checkState() const;
    void setCheckState(Qt::CheckState state);
    QSize sizeHint() const;
    void setSizeHint(const QSize &size);
    virtual QVariant data(int role) const;
    virtual void setData(int role, const QVariant &value);
    virtual bool operator<(const QListWidgetItem &other) const;
    virtual void read(QDataStream &in) /ReleaseGIL/;
    virtual void write(QDataStream &out) const /ReleaseGIL/;
    int type() const;
    void setFlags(Qt::ItemFlags aflags);
    void setText(const QString &atext);
    void setIcon(const QIcon &aicon);
    void setStatusTip(const QString &astatusTip);
%If (PyQt_ToolTip)
    void setToolTip(const QString &atoolTip);
%End
%If (PyQt_WhatsThis)
    void setWhatsThis(const QString &awhatsThis);
%End
    void setFont(const QFont &afont);
};

QDataStream &operator<<(QDataStream &out, const QListWidgetItem &item /Constrained/);
QDataStream &operator>>(QDataStream &in, QListWidgetItem &item /Constrained/);

class QListWidget : QListView
{

%TypeHeaderCode
#include <qlistwidget.h>
%End

public:
    explicit QListWidget(QWidget *parent /TransferThis/ = 0);
    virtual ~QListWidget();
    QListWidgetItem *item(int row) const;
    int row(const QListWidgetItem *item) const;
    void insertItem(int row, QListWidgetItem *item /Transfer/);
    void insertItem(int row, const QString &label);
    void insertItems(int row, const QStringList &labels);
    void addItem(QListWidgetItem *aitem /Transfer/);
    void addItem(const QString &label);
    void addItems(const QStringList &labels);
    QListWidgetItem *takeItem(int row) /TransferBack/;
    int count() const;
    QListWidgetItem *currentItem() const;
    void setCurrentItem(QListWidgetItem *item);
    int currentRow() const;
    void setCurrentRow(int row);
    QListWidgetItem *itemAt(const QPoint &p) const;
    QListWidgetItem *itemAt(int ax, int ay) const;
    QWidget *itemWidget(QListWidgetItem *item) const;
    void setItemWidget(QListWidgetItem *item, QWidget *widget);
    QRect visualItemRect(const QListWidgetItem *item) const;
    void sortItems(Qt::SortOrder order = Qt::AscendingOrder);
    void editItem(QListWidgetItem *item);
    void openPersistentEditor(QListWidgetItem *item);
    void closePersistentEditor(QListWidgetItem *item);
    bool isItemSelected(const QListWidgetItem *item) const;
    void setItemSelected(const QListWidgetItem *item, bool select);
    QList<QListWidgetItem*> selectedItems() const;
    QList<QListWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags) const;
    bool isItemHidden(const QListWidgetItem *item) const;
    void setItemHidden(const QListWidgetItem *item, bool hide);

public slots:
    void scrollToItem(const QListWidgetItem *item, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    void clear();

signals:
    void itemPressed(QListWidgetItem *item);
    void itemClicked(QListWidgetItem *item);
    void itemDoubleClicked(QListWidgetItem *item);
    void itemActivated(QListWidgetItem *item);
    void itemEntered(QListWidgetItem *item);
    void itemChanged(QListWidgetItem *item);
    void currentItemChanged(QListWidgetItem *current, QListWidgetItem *previous);
    void currentTextChanged(const QString &currentText);
    void currentRowChanged(int currentRow);
    void itemSelectionChanged();

protected:
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QList<QListWidgetItem*> items) const /TransferBack/;
    virtual bool dropMimeData(int index, const QMimeData *data, Qt::DropAction action);
    virtual Qt::DropActions supportedDropActions() const;
    QList<QListWidgetItem*> items(const QMimeData *data) const;
    QModelIndex indexFromItem(QListWidgetItem *item) const;
    QListWidgetItem *itemFromIndex(const QModelIndex &index) const;
    virtual bool event(QEvent *e);

private:
    QListWidget(const QListWidget &);
};
