// qtextoption.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qtextoption.h>
%End


class QTextOption
{

%TypeHeaderCode
#include <qtextoption.h>
%End

public:
    QTextOption();
    QTextOption(Qt::Alignment alignment);
    ~QTextOption();
    QTextOption(const QTextOption &o);
    Qt::Alignment alignment() const;
    void setTextDirection(Qt::LayoutDirection aDirection);
    Qt::LayoutDirection textDirection() const;

    enum WrapMode
    {
        NoWrap,
        WordWrap,
        ManualWrap,
        WrapAnywhere,
        WrapAtWordBoundaryOrAnywhere,
    };

    void setWrapMode(QTextOption::WrapMode wrap);
    QTextOption::WrapMode wrapMode() const;

    enum Flag
    {
        IncludeTrailingSpaces,
    };

    typedef QFlags<QTextOption::Flag> Flags;
    QFlags<QTextOption::Flag> flags() const;
    qreal tabStop() const;
    void setTabArray(QList<double> tabStops);
    QList<double> tabArray() const;
    void setUseDesignMetrics(bool b);
    bool useDesignMetrics() const;
    void setAlignment(Qt::Alignment aalignment);
    void setFlags(QFlags<QTextOption::Flag> aflags);
    void setTabStop(qreal atabStop);
};

QFlags<QTextOption::Flag> operator|(QTextOption::Flag f1, QFlags<QTextOption::Flag> f2);
QFlags<QTextOption::Flag> operator|(QTextOption::Flag f1, QTextOption::Flag f2);
