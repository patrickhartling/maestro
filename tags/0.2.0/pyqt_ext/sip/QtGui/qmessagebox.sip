// qmessagebox.sip generated by MetaSIP on Thu Oct 19 03:37:32 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qmessagebox.h>
%End

class QMessageBox : QDialog
{

%TypeHeaderCode
#include <qmessagebox.h>
%End

public:
%If (Qt_4_2_0 -)

    enum ButtonRole
    {
        InvalidRole,
        AcceptRole,
        RejectRole,
        DestructiveRole,
        ActionRole,
        HelpRole,
        YesRole,
        NoRole,
        ResetRole,
        ApplyRole,
    };

%End

    enum Icon
    {
        NoIcon,
        Information,
        Warning,
        Critical,
        Question,
    };

%If (Qt_4_2_0 -)

    enum StandardButton
    {
        NoButton,
        Ok,
        Save,
        SaveAll,
        Open,
        Yes,
        YesToAll,
        No,
        NoToAll,
        Abort,
        Retry,
        Ignore,
        Close,
        Cancel,
        Discard,
        Help,
        Apply,
        Reset,
        RestoreDefaults,
        FirstButton,
        LastButton,
        YesAll,
        NoAll,
        Default,
        Escape,
        FlagMask,
        ButtonMask,
    };

%End
%If (Qt_4_2_0 -)
    typedef QFlags<QMessageBox::StandardButton> StandardButtons;
%End
%If (Qt_4_2_0 -)
    typedef QMessageBox::StandardButton Button;
%End
%If (- Qt_4_2_0)

    enum Button
    {
        NoButton,
        Ok,
        Cancel,
        Yes,
        No,
        Abort,
        Retry,
        Ignore,
        YesAll,
        NoAll,
        ButtonMask,
        Default,
        Escape,
        FlagMask,
    };

%End
    explicit QMessageBox(QWidget *parent /TransferThis/ = 0);
%If (Qt_4_2_0 -)
    QMessageBox(QMessageBox::Icon icon, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::NoButton, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags f = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint);
%End
%If (Qt_4_2_0 -)
    QMessageBox(const QString &title, const QString &text, QMessageBox::Icon icon, int button0, int button1, int button2, QWidget *parent /TransferThis/ = 0, Qt::WindowFlags f = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint);
%End
%If (- Qt_4_2_0)
    QMessageBox(const QString &caption, const QString &text, QMessageBox::Icon icon, int button0, int button1, int button2, QWidget *parent /TransferThis/ = 0, Qt::WFlags f = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint);
%End
    virtual ~QMessageBox();
    QString text() const;
    void setText(const QString &);
    QMessageBox::Icon icon() const;
    void setIcon(QMessageBox::Icon);
    QPixmap iconPixmap() const;
    void setIconPixmap(const QPixmap &);
    QString buttonText(int button) const;
    void setButtonText(int button, const QString &);
    Qt::TextFormat textFormat() const;
    void setTextFormat(Qt::TextFormat);
%If (Qt_4_2_0 -)
    static QMessageBox::StandardButton information(QWidget *parent, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::Ok, QMessageBox::StandardButton defaultButton = QMessageBox::NoButton) /ReleaseGIL/;
%End
    static int information(QWidget *parent, const QString &caption, const QString &text, int button0, int button1 = 0, int button2 = 0) /ReleaseGIL/;
%If (Qt_4_2_0 -)
    static int information(QWidget *parent, const QString &title, const QString &text, const QString &button0Text, const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static int information(QWidget *parent, const QString &caption, const QString &text, const QString &button0Text = QString(), const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (Qt_4_2_0 -)
    static QMessageBox::StandardButton question(QWidget *parent, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::Ok, QMessageBox::StandardButton defaultButton = QMessageBox::NoButton) /ReleaseGIL/;
%End
    static int question(QWidget *parent, const QString &caption, const QString &text, int button0, int button1 = 0, int button2 = 0) /ReleaseGIL/;
%If (Qt_4_2_0 -)
    static int question(QWidget *parent, const QString &title, const QString &text, const QString &button0Text, const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static int question(QWidget *parent, const QString &caption, const QString &text, const QString &button0Text = QString(), const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (Qt_4_2_0 -)
    static QMessageBox::StandardButton warning(QWidget *parent, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::Ok, QMessageBox::StandardButton defaultButton = QMessageBox::NoButton) /ReleaseGIL/;
%End
    static int warning(QWidget *parent, const QString &caption, const QString &text, int button0, int button1, int button2 = 0) /ReleaseGIL/;
%If (Qt_4_2_0 -)
    static int warning(QWidget *parent, const QString &title, const QString &text, const QString &button0Text, const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static int warning(QWidget *parent, const QString &caption, const QString &text, const QString &button0Text = QString(), const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (Qt_4_2_0 -)
    static QMessageBox::StandardButton critical(QWidget *parent, const QString &title, const QString &text, QMessageBox::StandardButtons buttons = QMessageBox::Ok, QMessageBox::StandardButton defaultButton = QMessageBox::NoButton) /ReleaseGIL/;
%End
    static int critical(QWidget *parent, const QString &caption, const QString &text, int button0, int button1, int button2 = 0) /ReleaseGIL/;
%If (Qt_4_2_0 -)
    static int critical(QWidget *parent, const QString &title, const QString &text, const QString &button0Text, const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
%If (- Qt_4_2_0)
    static int critical(QWidget *parent, const QString &caption, const QString &text, const QString &button0Text = QString(), const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
%End
    static void about(QWidget *parent, const QString &caption, const QString &text) /ReleaseGIL/;
    static void aboutQt(QWidget *parent, const QString &caption = QString()) /ReleaseGIL/;
    virtual QSize sizeHint() const;
    static QPixmap standardIcon(QMessageBox::Icon icon);

protected:
    virtual void resizeEvent(QResizeEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void closeEvent(QCloseEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void changeEvent(QEvent *);

public:
%If (Qt_4_2_0 -)
    void addButton(QAbstractButton *button /Transfer/, QMessageBox::ButtonRole role);
%End
%If (Qt_4_2_0 -)
    QPushButton *addButton(const QString &text, QMessageBox::ButtonRole role);
%End
%If (Qt_4_2_0 -)
    QPushButton *addButton(QMessageBox::StandardButton button);
%End
%If (Qt_4_2_0 -)
    void removeButton(QAbstractButton *button /TransferBack/);
%End
%If (Qt_4_2_0 -)
    void setStandardButtons(QMessageBox::StandardButtons buttons);
%End
%If (Qt_4_2_0 -)
    QMessageBox::StandardButtons standardButtons() const;
%End
%If (Qt_4_2_0 -)
    QMessageBox::StandardButton standardButton(QAbstractButton *button) const;
%End
%If (Qt_4_2_0 -)
    QAbstractButton *button(QMessageBox::StandardButton which) const;
%End
%If (Qt_4_2_0 -)
    QPushButton *defaultButton() const;
%End
%If (Qt_4_2_0 -)
    void setDefaultButton(QPushButton *button);
%End
%If (Qt_4_2_0 -)
    QAbstractButton *escapeButton() const;
%End
%If (Qt_4_2_0 -)
    void setEscapeButton(QAbstractButton *button);
%End
%If (Qt_4_2_0 -)
    QAbstractButton *clickedButton() const;
%End
%If (Qt_4_2_0 -)
    QString informativeText() const;
%End
%If (Qt_4_2_0 -)
    void setInformativeText(const QString &text);
%End
%If (Qt_4_2_0 -)
    QString detailedText() const;
%End
%If (Qt_4_2_0 -)
    void setDetailedText(const QString &text);
%End
%If (Qt_4_2_0 -)
    void setWindowTitle(const QString &title);
%End
%If (Qt_4_2_0 -)
    void setWindowModality(Qt::WindowModality windowModality);
%End

private:
    QMessageBox(const QMessageBox &);
};

%If (Qt_4_2_0 -)
QMessageBox::StandardButtons operator|(QMessageBox::StandardButton f1, QMessageBox::StandardButtons f2);
%End
%If (Qt_4_2_0 -)
QMessageBox::StandardButtons operator|(QMessageBox::StandardButton f1, QMessageBox::StandardButton f2);
%End
