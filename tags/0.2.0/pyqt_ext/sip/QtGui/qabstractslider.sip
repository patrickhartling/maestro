// qabstractslider.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QAbstractSlider : QWidget
{

%TypeHeaderCode
#include <qabstractslider.h>
%End

public:
    explicit QAbstractSlider(QWidget *parent /TransferThis/ = 0);
    virtual ~QAbstractSlider();
    Qt::Orientation orientation() const;
    void setMinimum(int);
    int minimum() const;
    void setMaximum(int);
    int maximum() const;
    void setRange(int min, int max);
    void setSingleStep(int);
    int singleStep() const;
    void setPageStep(int);
    int pageStep() const;
    void setTracking(bool enable);
    bool hasTracking() const;
    void setSliderDown(bool);
    bool isSliderDown() const;
    void setSliderPosition(int);
    int sliderPosition() const;
    void setInvertedAppearance(bool);
    bool invertedAppearance() const;
    void setInvertedControls(bool);
    bool invertedControls() const;

    enum SliderAction
    {
        SliderNoAction,
        SliderSingleStepAdd,
        SliderSingleStepSub,
        SliderPageStepAdd,
        SliderPageStepSub,
        SliderToMinimum,
        SliderToMaximum,
        SliderMove,
    };

    int value() const;
    void triggerAction(QAbstractSlider::SliderAction action);

public slots:
    void setValue(int);
    void setOrientation(Qt::Orientation);

signals:
    void valueChanged(int value);
    void sliderPressed();
    void sliderMoved(int position);
    void sliderReleased();
    void rangeChanged(int min, int max);
    void actionTriggered(int action);

protected:
    void setRepeatAction(QAbstractSlider::SliderAction action, int thresholdTime = 500, int repeatTime = 50);
    QAbstractSlider::SliderAction repeatAction() const;

    enum SliderChange
    {
        SliderRangeChange,
        SliderOrientationChange,
        SliderStepsChange,
        SliderValueChange,
    };

    virtual void sliderChange(QAbstractSlider::SliderChange change);
    virtual bool event(QEvent *e);
    virtual void keyPressEvent(QKeyEvent *ev);
    virtual void timerEvent(QTimerEvent *);
    virtual void wheelEvent(QWheelEvent *e);
    virtual void changeEvent(QEvent *e);

private:
    QAbstractSlider(const QAbstractSlider &);
};
