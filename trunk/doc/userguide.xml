<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book>
   <bookinfo>
      <title>Maestro User's Guide</title>

      <releaseinfo>Version 0.4</releaseinfo>

      <authorgroup>
         <corpauthor><ulink url="http://www.infiscape.com/">Infiscape
         Corporation</ulink></corpauthor>
      </authorgroup>

      <copyright>
         <year>2006–2007</year>

         <holder>Infiscape Corporation</holder>
      </copyright>

      <address><street>2901 South Loop Drive, Suite 3400</street><city>Ames</city><state>Iowa</state><postcode>50010-8646</postcode><phone>+1.515.296.3787</phone><email>contact@infiscape.com</email><otheraddr>Website: <ulink
               url="http://www.infiscape.com/">http://www.infiscape.com/</ulink></otheraddr></address>

      <legalnotice>
         <para>Permission is granted to copy, distribute and/or modify this
         document under the terms of the GNU Free Documentation License,
         Version 1.2 or any later version published by the Free Software
         Foundation; with the Invariant Sections being <xref
         linkend="appendix.gfdl" />, with no Front-Cover Texts, and with no
         Back-Cover Texts. A copy of the license is included in <xref
         linkend="appendix.gfdl" />.</para>

         <para>Some of the designations used by manufacturers and sellers to
         distinguish their products are claimed as trademarks. Where those
         designations appear in this book, and Infiscape Corporation was aware
         of the trademark claim, the designations have been printed in caps or
         initial caps.</para>
      </legalnotice>

      <pubdate>January 31, 2007</pubdate>
   </bookinfo>

   <preface>
      <title>Preface</title>

      <para>Maestro was originally written by Aron Bierbaum at <ulink
      url="http://www.infiscape.com/">Infiscape Corporation</ulink> in January
      2006 and was known simply as the <quote>Cluster Control Tool.</quote> It
      was born out of a need for improving the launching of <ulink
      url="http://www.vrjuggler.org/">VR Juggler</ulink> applications<footnote>
            <para>Applications that present the user(s) with an interactive,
            immersive virtual space.</para>
         </footnote> on graphics clusters—especially those running
      <productname class="registered">Microsoft Windows</productname> where
      remote execution of interactive applications is atypical. Existing
      techniques for launching VR Juggler applications involved writing custom
      shell scripts or batch files for each application. Through varying means
      (SSH, <ulink
      url="http://www.sysinternals.com/Utilities/PsExec.html">PsExec</ulink>,
      etc.), these scripts would get access to the nodes of the cluster and
      start the application process on each. To see the output from all the
      cluster nodes usually required having a console window open for each
      node (which was usually already open as a side effect of running the
      remote logon and launch commands). All in all, these techniques suffered
      from many limitations and complexities. As we will see in this document,
      Maestro goes a long way to facilitating the easy use and maintenance of
      graphics clusters.</para>

      <para>Before we begin explaining Maestro and its use, we present the
      conventions used in this document in order for readers to get the most
      out of it. In some places, command lines are wrapped to keep the text
      within the margins of a page when this document is rendered to PDF. Such
      cases should be obvious to the reader, but it is important to understand
      that the command lines are intended to appear as a single line when
      used.</para>

      <para>Typesetting conventions used in this document are as
      follows:</para>

      <itemizedlist>
         <listitem>
            <para>File names and paths appear as
            <filename>file.txt</filename></para>
         </listitem>

         <listitem>
            <para>Commands to be entered by the user appear as
            <command>command</command></para>
         </listitem>

         <listitem>
            <para>Environment variables <emphasis>names</emphasis> appear as
            <envar>ENV_VAR</envar></para>
         </listitem>

         <listitem>
            <para>Environment variables <emphasis>values</emphasis> appear as
            <envar>$ENV_VAR</envar></para>
         </listitem>

         <listitem>
            <para>Command line options appear as <option>-o</option></para>
         </listitem>

         <listitem>
            <para>Graphical user interface menus appear as <guimenu>Menu
            Name</guimenu></para>
         </listitem>

         <listitem>
            <para>Graphical user interface menu items appear as
            <guimenuitem>Item Name</guimenuitem> or as <menuchoice>
                  <shortcut>
                     <keycap>Shortcut</keycap>
                  </shortcut>

                  <guimenu>Menu Name</guimenu>

                  <guimenuitem>Item Name</guimenuitem>
               </menuchoice> to identify the menu and menu item together—along
            with the keyboard shortcut in parentheses if one exists</para>
         </listitem>

         <listitem>
            <para>Graphical user interface labels appear as <guilabel>Label
            Text</guilabel></para>
         </listitem>

         <listitem>
            <para>Graphical user interface buttons appear as <guibutton>Button
            Name</guibutton></para>
         </listitem>
      </itemizedlist>

      <para>Acronyms used frequently in this document, though we have avoided
      using abbreviations as much as possible. In a few cases, the text
      switches back and forth between the acronym and the full spelling of the
      acronym. The most frequently used acronyms are the following:</para>

      <itemizedlist>
         <listitem>
            <para><acronym>GUI</acronym>: A graphical user interface</para>
         </listitem>

         <listitem>
            <para><acronym>XML</acronym>: The <ulink
            url="http://www.w3.org/XML/">eXtensible Markup
            Language</ulink></para>
         </listitem>

         <listitem>
            <para><acronym>OS</acronym>: Operating system</para>
         </listitem>

         <listitem>
            <para><acronym>VR</acronym>: Virtual reality</para>
         </listitem>

         <listitem>
            <para><acronym>SSH</acronym>: Secure shell</para>
         </listitem>

         <listitem>
            <para><acronym>PAM</acronym>: Pluggable authentication
            module</para>
         </listitem>
      </itemizedlist>
   </preface>

   <chapter id="chapter.introduction">
      <title>Introduction</title>

      <para>Before we dive into explaining how to use Maestro, we first
      explain the purpose of the software and some history about how it came
      to be. The Maestro software is released under the terms of the GNU
      <ulink url="http://www.gnu.org/copyleft/gpl.html">General Public
      License</ulink>, and the first version of the source was made available
      to the public in August 2006. As of this writing, the current version is
      0.1, and Maestro should be considered to be in a
      <quote>pre-alpha</quote> state. This means that the software will
      continue to evolve and improve with time. More information, including
      downloads, can be found at the <ulink
      url="https://realityforge.vrsource.org/trac/maestro/">Maestro
      website</ulink>.</para>

      <section>
         <title>What is Maestro?</title>

         <para>Maestro is a software package using a simple client/server
         model for utilizing the resources of a cluster of computers. Its
         current intended audience is owners of graphics clusters (also known
         as image generator clusters) used for displaying high-quality,
         real-time graphics on multiple projection surfaces. As with most
         cluster-based technology, the idea is to spread the work load over
         many low-cost machines rather than using a single, expensive
         supercomputer. This means that distinct application processes are run
         on each node of the cluster, and there is typically some sort of
         communication between the processes or between the master node of the
         cluster and all the slave nodes. This communication is used for a
         variety of purposes including sending data and receiving
         results.</para>

         <para>Graphics clusters pose unique challenges. Most obviously, the
         software run on graphics clusters is normally interactive. Users
         provide live input and see immediate results, and to see the results,
         each node normally has one or more display devices (monitor or
         projector) connected to it. Furthermore, the processes running on
         each node normally work in concert to produce what appears to be a
         unified image rather than, say, each node working autonomously to
         compute a small part of a large problem. Thus, users of a graphics
         cluster are actively using all the nodes of the cluster
         simultaneously. This is in contrast to a computational cluster where
         a user sits down at the master node and starts up a computationally
         expensive job and then leaves the computers to run until the work
         completes.</para>

         <para>Users of graphics clusters should not have to sacrifice the
         simplicity of launching an application easily from the master node of
         the cluster, and this is where Maestro comes in. Rather than writing
         custom shell scripts or batch files and using remote shells to launch
         an interactive, immersive application, Maestro allows users to launch
         applications across all the nodes of a cluster in a simple, uniform
         manner. Maestro goes beyond just launching applications by providing
         extensions such as resource monitoring tools and cluster maintenance
         features. Users can write their own cluster-aware tools that plug in
         to Maestro in the form of a paired service and view. (More
         information on that is provided the Maestro <emphasis>Programmer's
         Guide</emphasis>.)</para>
      </section>

      <section>
         <title>Features</title>

         <indexterm class="startofrange" id="index.section.features">
            <primary>features</primary>
         </indexterm>

         <para>Now that we know what Maestro is, we can explain what it does.
         Below are some of the features of Maestro:</para>

         <itemizedlist>
            <listitem>
               <para>Support for multiple platforms (currently Linux and
               <productname class="registered">Microsoft Windows</productname>
               with support for Mac OS X and others to come)</para>
            </listitem>

            <listitem>
               <para>Support for mixed-OS clusters</para>
            </listitem>

            <listitem>
               <para>Remote application launching without requiring local
               logon at each cluster node (currently for Linux only)</para>
            </listitem>

            <listitem>
               <para>Integrated graphical editor for application launch
               files</para>
            </listitem>

            <listitem>
               <para>Remote process viewing and management</para>
            </listitem>

            <listitem>
               <para>Live display of CPU and memory usage statistics</para>
            </listitem>

            <listitem>
               <para>Encrypted communication between client and servers</para>
            </listitem>

            <listitem>
               <para>Pluggable authentication (currently supporting
               PAM<indexterm>
                     <primary>authentication</primary>

                     <secondary>PAM</secondary>
                  </indexterm> and <productname class="registered">Microsoft
               Windows</productname> domains<indexterm>
                     <primary>authentication</primary>

                     <secondary>Windows domains</secondary>
                  </indexterm>)</para>
            </listitem>

            <listitem>
               <para>Remote control of screen saver and power
               management</para>
            </listitem>

            <listitem>
               <para>Ability to reboot any or all nodes of a cluster</para>
            </listitem>

            <listitem>
               <para>Ability to reboot any or all nodes of a cluster to a
               different OS by interacting with the boot loader<indexterm>
                     <primary>boot loader</primary>
                  </indexterm> (currently, GRUB and the NT loader are
               supported)</para>
            </listitem>

            <listitem>
               <para>Graceful handling of disconnection and reconnection on
               the fly</para>
            </listitem>
         </itemizedlist>

         <indexterm class="endofrange" startref="index.section.features"></indexterm>

         <para>Maestro has been designed from the start to address the
         limitations associated with more brute force approaches to launching
         immersive software applications on graphics clusters. Its
         client/server architecture eliminates the need for scripts that rely
         on remote logon in order to launch processes on the cluster nodes.
         Application-specific details are captured in XML files that can
         reference site-wide configuration information in order to avoid
         duplicating common information for every application. These XML files
         are processed in order to create a graphical launching interface on
         the fly that is (roughly) tailored to the application. The processes
         launched on the remote nodes are run as an authenticated user in
         order to provide controlled access to data files and to prevent
         security issues associated with remote code execution.</para>
      </section>

      <section>
         <title>Getting Help</title>

         <para>Members of the Maestro community can post questions, feature
         suggestions, bug reports, etc. using the Maestro mailing lists. There
         are four lists, each with a different focus. The lists are managed by
         the <ulink url="http://www.gnu.org/software/mailman/index.html">GNU
         Mailman</ulink> software, and subscribing and unsubscribing is done
         through an easy-to-use web interface. For each of the lists below, a
         link is provided to the page where users can subscribe or view the
         list archive to search old posts.</para>

         <indexterm class="startofrange" id="index.section.help.lists">
            <primary>support</primary>

            <secondary>mailing lists</secondary>
         </indexterm>

         <orderedlist>
            <listitem>
               <para><ulink
               url="https://realityforge.vrsource.org/mailman/listinfo/maestro-announce">maestro-announce</ulink>:
               Release announcements only—no discussion. All Maestro users
               should subscribe to this list to keep up with releases as well
               as security notices. Since Maestro is designed to run as a
               service/daemon with elevated privileges, security is an
               important aspect of the software. Should a security problem be
               discovered, an announcement will be made on this list
               explaining the problem and providing a solution or workaround
               so that users are informed and can get the appropriate
               patches.</para>
            </listitem>

            <listitem>
               <para><ulink
               url="https://realityforge.vrsource.org/mailman/listinfo/maestro-announce">maestro-users</ulink>:
               Discussion and question &amp; answer forum for users. This is
               the best place to go for help with Maestro. Given a large
               enough community of users, this is the list that would have the
               most traffic as users discuss the software as well as ask and
               answer questions.</para>
            </listitem>

            <listitem>
               <para><ulink
               url="https://realityforge.vrsource.org/mailman/listinfo/maestro-devel">maestro-devel</ulink>:
               Discussion for Maestro developers and contributors. The focus
               of this list is the development of the software itself. Topics
               would include low-level details about the software architecture
               and the overall design. Formal bug reports should be directed
               here to get the attention of the developers and to avoid
               cluttering the maestro-users list. Informal bug reports often
               come in the form of user questions, however, and those would
               normally go to the maestro-users list.</para>
            </listitem>

            <listitem>
               <para><ulink
               url="https://realityforge.vrsource.org/mailman/listinfo/maestro-commits">maestro-commits</ulink>:
               Subversion commit messages. The traffic on this list is solely
               from commits being made to the Subversion repository.
               Subscribers are strongly discouraged from making direct posts
               to this list and should instead direct comments pertaining to
               changes to the maestro-devel list.</para>
            </listitem>
         </orderedlist>

         <indexterm class="endofrange" startref="index.section.help.lists"></indexterm>

         <para>For assistance beyond the mailing lists, <ulink
         url="http://www.infiscape.com/contact.php">contact Infiscape
         Corporation</ulink> to learn more about options for training,
         installation, and support.</para>
      </section>
   </chapter>

   <chapter id="chapter.installation">
      <title>Installation</title>

      <para>Maestro is a tool built on top of other tools. In order to install
      Maestro, its dependencies must be installed first. Since it is broken up
      into a client application and a server application, some nodes will not
      need all the dependencies. For example, a node that only runs the server
      application will not need the widget set (<ulink
      url="http://www.trolltech.com/products/qt">Qt</ulink>) used by the GUI.
      Similarly, a node that only runs the client GUI and not the server will
      not need the authentication modules.</para>

      <sidebar>
         <para>Much of the information here is provided for people who are
         working with an unpackaged version of Maestro. Due to the number of
         dependencies and the usual complexities involved with acquiring,
         building, and installing software, most users should get a
         pre-packaged version of Maestro and install it. A packaged version
         will include the dependencies in one form or another in order to ease
         the installation process.</para>
      </sidebar>

      <section>
         <title>Getting Dependencies</title>

         <para>Below, we list the <emphasis>minimum</emphasis> required
         versions of the Maestro dependencies and provide links to each
         package's download site. This list comes from the Maestro website
         page describing <ulink
         url="https://realityforge.vrsource.org/trac/maestro/wiki/Dev/GettingTheCode">how
         to get Maestro</ulink>. That page will always provide up-to-date
         information, and it should be consulted in case this rendering of the
         documentation is out of date with respect to the current state of the
         dependencies.</para>

         <itemizedlist>
            <listitem>
               <para><ulink
               url="http://www.python.org/download/">Python</ulink> 2.3 or
               newer</para>
            </listitem>

            <listitem>
               <para><ulink url="http://www.openssl.org/">OpenSSL</ulink>
               0.9.7 (<ulink
               url="http://www.slproweb.com/products/Win32OpenSSL.html">Windows
               installer</ulink>)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://www.trolltech.com/products/qt/downloads">Qt</ulink>
               4.2.2 (client GUI only)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="httphttp://www.riverbankcomputing.co.uk/sip/download.php//www.riverbankcomputing.com/Downloads/Snapshots/sip4/">SIP
               4.5.2</ulink> (client GUI only)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://www.riverbankcomputing.co.uk/pyqt/download.php">PyQt
               4.1.1</ulink> (client GUI only)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://effbot.org/downloads/#elementtree">ElementTree</ulink>
               1.2.6-20050316</para>
            </listitem>

            <listitem>
               <para><ulink url="http://twistedmatrix.com/">Twisted</ulink>
               2.4.0</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://www.python.org/pyvault/SRPMS/repodata/repoview/python-crypto-0-2.0.1-2.html">python-crypto</ulink>
               2.0.1</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://pyopenssl.sourceforge.net/">pyOpenSSL</ulink> 0.6.1
               (<ulink
               url="http://twisted.sourceforge.net/contrib/pyOpenSSL-0.6.win32-py2.3.exe">Windows
               installer</ulink>)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://sourceforge.net/project/showfiles.php?group_id=78018">pywin32</ulink>
               Build 211 (<productname class="registered">Microsoft
               Windows</productname> only)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://www.pangalactic.org/PyPAM/">PyPAM</ulink> (or
               python-pam) 0.4.2 (server only, non-<productname
               class="registered">Windows</productname> platforms; <ulink
               url="https://realityforge.vrsource.org/trac/maestro/attachment/wiki/Dev/GettingTheCode/python-pam_0.4.2-10.4.tar.gz">known
               working source</ulink>)</para>
            </listitem>
         </itemizedlist>

         <para>Maestro also relies upon the <ulink
         url="http://www.zope.org/Products/ZopeInterface">zope.interface
         package</ulink>, and the source for this is usually included with the
         Twisted source. It must be installed before installing Twisted, so be
         sure to read the Twisted installation instructions carefully. For
         people who plan on using <application>Qt Designer</application> to
         make custom views or to modify the <application>Maestro
         GUI</application>, <ulink url="http://www.scons.org/">SCons</ulink>
         and <ulink
         url="https://realityforge.vrsource.org/view/SconsAddons/WebHome">SConsAddons</ulink>
         can be used to run <command>pyuic4</command> in order to generate the
         Python code from the <application>Qt Designer</application>
         <filename>.ui</filename> files.</para>
      </section>

      <section>
         <title>Getting Maestro</title>

         <para>Maestro is open source software, and it can be obtained
         directly from its <ulink
         url="http://subversion.tigris.org/">Subversion</ulink> repository.
         This is done using the following command:</para>

         <screen>svn co https://realityforge.vrsource.org/svn/maestro/trunk maestro</screen>

         <para>As of this writing, there are no branches or tags to retrieve,
         so the trunk is the only path to get source.</para>

         <sidebar>
            <para>The certificate used for Subversion access on <ulink
            url="https://realityforge.vrsource.org/">RealityForge</ulink> is
            not signed by a certificate authority. As a result, users must
            accept the certificate manually the first time they connect. A
            message similar to the following will be displayed:</para>

            <screen>Error validating server certificate for 'https://realityforge.vrsource.org:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: *.vrsource.org
 - Valid: from Sep 26 22:15:16 2006 GMT until Sep 25 22:15:16 2008 GMT
 - Issuer: IT, vrsource, Ames, IA, US
 - Fingerprint: 43:86:70:52:50:b2:ef:17:93:fa:e2:c7:ee:ed:09:d5:fe:c3:ca:b8
(R)eject, accept (t)emporarily or accept (p)ermanently?</screen>

            <para>Simply accept the certificate permanently, and this message
            will not appear again (until 2008 when the certificate expires and
            is reissued).</para>
         </sidebar>

         <para>Releases of Maestro are distributed in various ways. The source
         is packaged up as compressed <command>tar</command>(1) archives and
         as ZIP archives. On UNIX-based operating systems, a simple makefile
         is provided for installing into <filename>/usr</filename> or into a
         user-specific prefix. This makefile has very limited capabilities and
         currently exists primarily to help out automated packaging tools such
         as <command>rpmbuild</command>(1). Nevertheless, to use this makefile
         to install into <filename>/usr</filename>, simply run the following
         from the root of the Maestro source tree using GNU Make:</para>

         <screen>make install</screen>

         <para>To install Maestro into a different location (such as
         <filename>/usr/local</filename>), run the following instead:</para>

         <screen>make prefix=/usr/local confdir=/usr/local/etc install</screen>

         <para>For Linux distributions that use the Red Hat Package Manager
         (RPM) for package management, <filename>.rpm</filename> files are
         prepared. The Maestro RPMs are not specific to any distribution or
         Python version, but the dependencies are. As such, it is important to
         get the right dependencies for the Linux distribution where Maestro
         will be used. There are four or five RPMs depending on whether the
         documentation RPM was built, and they are as follows:</para>

         <orderedlist>
            <listitem>
               <para><filename>maestro-base</filename>: The
               <literal>maestro</literal>, <literal>maestro.core</literal>,
               and <literal>maestro.util</literal> packages.</para>
            </listitem>

            <listitem>
               <para><filename>maestro-gui</filename>:
               <filename>Maestro.py</filename>, the
               <filename>maestro/gui</filename> tree, and
               <filename>/usr/bin/maestro</filename> (requires
               <filename>maestro-base</filename>).</para>
            </listitem>

            <listitem>
               <para><filename>maestro-server</filename>:
               <filename>maestrod.py</filename>, the
               <filename>maestro/daemon</filename> tree,
               <filename>/usr/sbin/maestrod</filename>, and
               <filename>/etc/init.d/maestrod</filename> (requires
               <filename>maestro-base</filename>).</para>
            </listitem>

            <listitem>
               <para><filename>maestro</filename>: Optional umbrella package
               that requires <filename>maestro-base</filename>,
               <filename>maestro-gui</filename>, and
               <filename>maestro-server</filename>.</para>
            </listitem>

            <listitem>
               <para><filename>maestro-doc</filename>: This documentation
               rendered to HTML and PDF.</para>
            </listitem>
         </orderedlist>

         <para>After installing the <filename>maestro-server</filename>
         package for the first time, go to the directory
         <filename>/usr/lib/maestro-X.Y.Z</filename> (where
         <quote>X.Y.Z</quote> is the Maestro version number such as 1.0.1) and
         run the script <command>mkpem</command> as root. This will generate a
         file named <filename>server.pem</filename> that is the machine
         certificate for that instance of the Maestro daemon. The certificate
         can be reused with future Maestro installations, though it will
         expire two years after the date of creation.</para>

         <para>If the <filename>maestro-server</filename> package is being
         upgraded, the existing <filename>server.pem</filename> file should be
         moved into the new Maestro installation directory. The
         <filename>maestro-server</filename> RPM does not claim ownership of
         the <filename>server.pem</filename> file, so it does not get removed
         when the package is erased.</para>

         <para>On <productname class="registered">Microsoft
         Windows</productname>, an automated installer is provided. Currently,
         this installer includes all the dependencies
         <emphasis>except</emphasis> Python and <ulink
         url="http://pywin32.sourceforge.net/">pywin32</ulink>. These must be
         installed separately before Maestro is installed.</para>

         <important>
            <para>In order to use the installation wizard, Python 2.4 is
            required. It is hoped that this limitation will be fixed in a
            future release. If the installation wizard is not used and Maestro
            is installed manually, then Python 2.4 or Python 2.5 is
            recommended. Remember that all dependencies must be built using
            the same version of Python.</para>
         </important>

         <para>After installing the <application>Maestro GUI</application>
         and/or the Maestro server, users should configure site-wide settings.
         We delve into these topics in the next chapter.</para>
      </section>
   </chapter>

   <chapter id="chapter.using.maestrod">
      <title>Using Maestro</title>

      <section id="section.usage.server">
         <title>Using the Maestro Server</title>

         <para>The server side of the Maestro software is an application
         called <command>maestrod</command> (pronounced
         <quote>maestro-dee</quote>). On <productname
         class="registered">Microsoft Windows</productname>, it runs as a
         service as the SYSTEM user; on other platforms, it runs as a daemon
         as root. In this section, we explain how to use
         <command>maestrod</command>.</para>

         <section id="section.running.maestrod">
            <title>Running <command>maestrod</command></title>

            <para>In general, maestrod will be running as a background
            service/daemon that users do not need to worry about starting and
            stopping. Nevertheless, to get a complete understanding of how
            Maestro works, it is useful to understand how the server side is
            managed. Below, we explain how the Maestro service is installed
            and started on <productname class="registered">Microsoft
            Windows</productname> and then how the Maestro daemon is installed
            on managed on Linux.</para>

            <section>
               <title>The <productname class="registered">Microsoft
               Windows</productname> Maestro Service</title>

               <indexterm class="startofrange" id="index.maestrod.service">
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>
               </indexterm>

               <para>On <productname class="registered">Microsoft
               Windows</productname>, the automated installer sets up the
               Maestro service and starts it running. Hence, by using that
               installer, there is nothing further that has to be done in
               order to run maestrod on that platform. However, if the
               installer was not used, the process of installing and starting
               the service is quite simple. As a user with administrative
               privileges, simply run the following in the directory
               containing the Maestro distribution:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>installation</tertiary>
               </indexterm>

               <screen>maestrod.py --interactive --startup auto install
maestrod.py start</screen>

               <para>Should it become necessary to remove the service, run
               these commands as a user with administrative privileges in the
               directory containing the Maestro distribution:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>start</tertiary>
               </indexterm>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>stop</tertiary>
               </indexterm>

               <screen>maestrod.py stop
maestrod.py remove</screen>

               <para>Running <command>maestrod</command> as a service causes
               it to be run as the SYSTEM user. In general this is how most
               people would run <command>maestrod</command> since that user
               has all the necessary privileges in order for the Maestro
               software to work. Sometimes it is useful to run
               <command>maestrod</command> in debug mode, but doing this
               requires that the logged on user have the necessary privileges
               to spawn processes as other users and to impersonate other
               users. To get these privileges, follow these steps:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>user security policies</tertiary>
               </indexterm>

               <orderedlist>
                  <listitem>
                     <para>Open the Start Menu, click
                     <guimenuitem>Run...</guimenuitem>, and enter
                     <command>secpol.msc</command>.</para>
                  </listitem>

                  <listitem>
                     <para>Find the policy item labeled <quote>Impersonate a
                     client after authentication</quote> and double-click
                     it.</para>
                  </listitem>

                  <listitem>
                     <para>In the dialog box, enter the user name (with domain
                     if necessary) for the user who will be running
                     <command>maestrod</command> and click OK.</para>
                  </listitem>

                  <listitem>
                     <para>Do the same for the policy item labeled
                     <quote>Replace a process level token.</quote></para>
                  </listitem>

                  <listitem>
                     <para>Log out and log in as the user who can now
                     impersonate other users.</para>
                  </listitem>
               </orderedlist>

               <para>Now, open a command shell and change to the directory
               containing the Maestro distribution. If the Maestro service is
               still running, enter the following:</para>

               <screen>maestrod.py stop</screen>

               <para>At the prompt, run the following:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>debug mode</tertiary>
               </indexterm>

               <screen>maestrod.py -debug</screen>

               <indexterm class="endofrange" startref="index.maestrod.service"></indexterm>
            </section>

            <section>
               <title>The UNIX/Linux Maestro Daemon</title>

               <indexterm class="startofrange" id="index.maestrod.daemon">
                  <primary>maestrod</primary>

                  <secondary>daemon</secondary>
               </indexterm>

               <para>For non-Windows platforms, <command>maestrod</command>
               runs as a background daemon as the root user. Currently, Linux
               is the only non-Windows platform supported, so this part of the
               documentation will focus on how it is installed and used on
               Linux. In the future, this text will be expanded to cover other
               operating systems.</para>

               <para>Maestro is packaged up for deployment on Linux using RPM
               files. For the server side, there are two packages to install:
               maestro-base and maestro-server. The maestro-base package
               contains the core Python code that is used by both
               <command>maestrod</command> and the Maestro client GUI;
               maestro-server contains all the server-side code, scripts, and
               data files. When the maestro-server package is installed on
               Linux, there is a shell script added to
               <filename>/etc/init.d</filename> called
               <filename>maestrod</filename><indexterm>
                     <primary><filename>/etc/init.d/maestrod</filename></primary>

                     <see>maestrod</see>
                  </indexterm><indexterm>
                     <primary>maestrod</primary>

                     <secondary>daemon</secondary>

                     <tertiary><filename>/etc/init.d/maestrod</filename></tertiary>
                  </indexterm>. This script can be used by the root user to
               start and stop the Maestro daemon as shown below:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary>daemon</secondary>

                  <tertiary>Linux start</tertiary>
               </indexterm>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary>daemon</secondary>

                  <tertiary>Linux stop</tertiary>
               </indexterm>

               <screen>/etc/init.d/maestrod start
/etc/init.d/maestrod stop</screen>

               <para>The actual command that is run by this shell script is
               another shell script named <filename>maestrod</filename>
               installed in <filename>/usr/sbin</filename><indexterm>
                     <primary><filename>/usr/sbin/maestrod</filename></primary>

                     <see>maestrod</see>
                  </indexterm><indexterm>
                     <primary>maestrod</primary>

                     <secondary>daemon</secondary>

                     <tertiary><filename>/usr/sbin/maestrod</filename></tertiary>
                  </indexterm>. This command can be run directly in debug mode
               as follows:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary>daemon</secondary>

                  <tertiary>debug mode</tertiary>
               </indexterm>

               <screen>/usr/sbin/maestrod -debug</screen>

               <para>Running <command>/usr/sbin/maestrod</command> without the
               <option>-debug</option> option causes it to start up as a
               background daemon. Running <command>maestrod</command> requires
               root privileges in order to perform the PAM authentication of
               remote users<indexterm>
                     <primary>authentication</primary>

                     <secondary>PAM</secondary>
                  </indexterm>, so all of the above must be run as
               root.</para>

               <indexterm class="endofrange" startref="index.maestrod.daemon"></indexterm>
            </section>
         </section>

         <section>
            <title>Configuring <command>maestrod</command></title>

            <indexterm class="startofrange" id="index.section.maestrod.config">
               <primary>maestrod</primary>

               <secondary>configuration</secondary>

               <seealso><filename>maestrod.xcfg</filename></seealso>
            </indexterm>

            <para>The <command>maestrod</command> software uses a
            configuration file named <filename>maestrod.xcfg</filename>. This
            file can be located in the same directory as the
            <filename>maestrod.py</filename> file or in
            <filename>/etc</filename>. It uses XML, but its form is quite
            flexible. This flexibility is offered to allow service plug-in
            authors (see the Maestro <emphasis>Programmer's Guide</emphasis>)
            to configure their plug-ins in the manner that best suits their
            needs. The only requirement is that the root node must be
            <sgmltag>&lt;maestrod&gt;</sgmltag><indexterm>
                  <primary><filename>maestrod.xcfg</filename></primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;maestrod&gt;</sgmltag></tertiary>
               </indexterm>. Beneath that, the structure can be arbitrarily
            deep nesting with any attributes and CDATA needed to configure
            server-side components. In this section, we explain how to
            configure <command>maestrod</command> and the services that are
            included with Maestro by default.</para>

            <section>
               <title><command>maestrod</command> Settings</title>

               <para>When <command>maestrod</command> is running on a
               operating system that uses the X Window System, the
               authenticated user must be allowed to open windows on the local
               X server. This is done by granting modifying the authenticated
               user's <filename>~/.Xauthority</filename> file to include the
               local X server's authorization key using the
               <command>xauth</command>(1) command. To avoid tying
               <command>maestrod</command> to any specific operating system
               installation or site configuration, the path to
               <command>xauth</command>(1) and the local X server's Xauthority
               file are configurable. For example, we see in <xref
               linkend="example.maestrod.xcfg.rhel4" /> how to configure
               maestrod to run on Red Hat Enterprise Linux 4. For Fedora Core
               5, the configuration is slightly different, as seen in <xref
               linkend="example.maestrod.xcfg.fc5" />. In both cases, <ulink
               url="http://www.gnome.org/projects/gdm/">GDM</ulink> (the GNOME
               Display Manager) is being used as the X display manager. The
               path to the Xauthority file would differ if using <ulink
               url="http://docs.kde.org/en/HEAD/kdebase/kdm/">KDM</ulink> (the
               KDE Display Manager) or XDM (the X Display Manager).</para>

               <indexterm>
                  <primary><filename>maestrod.xcfg</filename></primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;xauth_cmd&gt;</sgmltag></tertiary>
               </indexterm>

               <indexterm>
                  <primary><filename>maestrod.xcfg</filename></primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;xauthority_file&gt;</sgmltag></tertiary>
               </indexterm>

               <example id="example.maestrod.xcfg.rhel4">
                  <title><command>maestrod.xcfg</command> for Red Hat
                  Enterprise Linux 4</title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
&lt;/maestrod&gt;</programlisting>
               </example>

               <example id="example.maestrod.xcfg.fc5">
                  <title><command>maestrod.xcfg</command> for Fedora Core
                  5</title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
&lt;/maestrod&gt;</programlisting>
               </example>

               <note>
                  <para>If <sgmltag>&lt;xauth_cmd&gt;</sgmltag> is not
                  specified or has no value, the default setting is
                  <literal>/usr/X11R6/bin/xauth</literal>. This may not be
                  valid for all operating systems using the X Window System,
                  so it is better to set this value than to rely on the
                  default.</para>

                  <para>If <sgmltag>&lt;xauthority_file&gt;</sgmltag> is not
                  specified or has no value, the default setting is
                  <literal>/var/gdm/:0.Xauth</literal>. This is only valid
                  when using GDM on display :0, and this path may still vary
                  between operating systems. As such, it is better to set this
                  value than to rely on the default.</para>
               </note>
            </section>

            <section id="section.maestrod.settings.reboot">
               <title>Reboot Service Settings</title>

               <indexterm class="startofrange"
                          id="index.sectcion.service.reboot.settings">
                  <primary>services</primary>

                  <secondary>reboot</secondary>

                  <tertiary>settings</tertiary>
               </indexterm>

               <indexterm class="startofrange">
                  <primary>maestrod</primary>

                  <secondary>configuration</secondary>

                  <tertiary>Reboot Service</tertiary>

                  <see>services</see>
               </indexterm>

               <indexterm>
                  <primary>rebooting</primary>

                  <seealso>boot loader</seealso>
               </indexterm>

               <para>The Reboot Service<indexterm>
                     <primary>services</primary>

                     <secondary>reboot</secondary>
                  </indexterm> makes it possible for the <application>Maestro
               GUI</application> user to reboot the machine where maestrod is
               running and, when possible, to change the operating system
               loaded on the next boot. To do this in a flexible manner, the
               service uses pluggable boot loader handling plug-ins. In order
               for the service to know which plug-in to use, it looks at
               <filename>maestrod.xcfg</filename> and the
               <sgmltag>&lt;boot_loader&gt;</sgmltag><indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;boot_loader&gt;</sgmltag></tertiary>
                  </indexterm> XML element. The CDATA in this element names
               which loader to use. Maestro comes with plug-ins for
               GRUB<indexterm>
                     <primary>boot loader</primary>

                     <secondary>GRUB</secondary>
                  </indexterm> and for the NT Loader<indexterm>
                     <primary>boot loader</primary>

                     <secondary>NT Loader</secondary>
                  </indexterm> (used by <productname
               class="registered">Microsoft Windows</productname> NT 4.0
               through <productname class="registered">Windows</productname>
               XP). The corresponding values to use for the
               <sgmltag>&lt;boot_loader&gt;</sgmltag> CDATA are
               <literal>GRUB</literal> and <literal>ntldr</literal>
               respectively. If no value is set, the GRUB plug-in is used as
               the default.</para>

               <para>The GRUB plug-in itself looks at maestrod.xcfg for
               information. More specifically, the plug-in needs to know where
               to find <filename>grub.conf</filename>. This path is set using
               the <sgmltag>&lt;grub_conf&gt;</sgmltag> XML element. Examples
               of configuring the Reboot Service for GRUB and the NT Loader
               are shown in <xref
               linkend="example.maestrod.xcfg.reboot.grub" /> and in <xref
               linkend="example.maestrod.xcfg.reboot.ntldr" /> respectively.
               Note that the NT Loader example includes the
               <sgmltag>&lt;grub_conf&gt;<indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;grub_conf&gt;</sgmltag></tertiary>
                  </indexterm></sgmltag> XML element. This is not necessary
               since the NT Loader plug-in does not care about
               <filename>grub.conf</filename>, but it demonstrates that having
               additional, unused data is not invalid. (For that matter, the
               <filename>maestrod.xcfg</filename> in <xref
               linkend="example.maestrod.xcfg.reboot.ntldr" /> might be for a
               <productname class="registered">Microsoft Windows</productname>
               installation of <command>maestrod</command>, and thus the
               Xauthority information would be ignored entirely.)</para>

               <example id="example.maestrod.xcfg.reboot.grub">
                  <title><command>maestrod.xcfg</command>: Using GRUB with the
                  Reboot Service</title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/boot/grub/grub.conf&lt;/grub_conf&gt;
&lt;/maestrod&gt;</programlisting>
               </example>

               <example id="example.maestrod.xcfg.reboot.ntldr">
                  <title><command>maestrod.xcfg</command>: Using the NT Loader
                  with the Reboot Service</title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;ntldr&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/boot/grub/grub.conf&lt;/grub_conf&gt;
&lt;/maestrod&gt;</programlisting>
               </example>

               <para>Being able to change the target OS for rebooting relies
               upon two things: knowledge of the boot loader<indexterm>
                     <primary>boot loader</primary>
                  </indexterm> on the server side and access to the boot
               loader configuration from all installed operating systems.
               Without both of these, it is not possible to change the target
               OS. For example, if the GRUB configuration file cannot be
               accessed from <productname class="registered">Microsoft
               Windows</productname>, then it is not possible to change the
               default OS that GRUB boots when the computer is currently
               booted into <productname class="registered">Microsoft
               Windows</productname>. Similarly, if boot loader is being used
               that is unknown to the Reboot Service<indexterm>
                     <primary>services</primary>

                     <secondary>reboot</secondary>
                  </indexterm> (such as <productname
               class="trade">BootMagic</productname><indexterm>
                     <primary>boot loader</primary>

                     <secondary>BootMagic</secondary>
                  </indexterm>), then it is not possible to change the target
               OS at all. Support for different boot loaders can be added as a
               plug-in to the Maestro Reboot Service<indexterm>
                     <primary>services</primary>

                     <secondary>reboot</secondary>
                  </indexterm>.</para>

               <para>Given these constraints, it is vital to make the boot
               loader configuration editable by all operating systems on the
               computer. If there is only one OS involved, then the default
               installation of the boot loader will be fine. (For a computer
               that only has <productname class="registered">Microsoft
               Windows</productname> installed, there may not be any obvious
               use of a boot loader even though it is present and involved
               with the boot process every time.) For multiple operating
               systems, however, things get more complicated. Below, we
               provide recommendations for how to make supported boot loaders
               work with Maestro and its rebooting capabilities.</para>

               <section>
                  <title>Setting Up GRUB for use with Maestro</title>

                  <indexterm class="startofrange"
                             id="index.section.boot.loader.config.grub">
                     <primary>boot loader</primary>

                     <secondary>GRUB</secondary>

                     <tertiary>use with Maestro</tertiary>
                  </indexterm>

                  <indexterm>
                     <primary>GRUB</primary>

                     <see>boot loader</see>
                  </indexterm>

                  <important>
                     <para>Before making any changes to the GRUB installation,
                     read this entire section very carefully. It is
                     <emphasis>not</emphasis> intended to be used in a
                     step-by-step fashion where readers are performing the
                     steps as they read them for the first time. Rather,
                     readers should understand the whole process first and be
                     prepared to perform the steps before actually executing
                     them.</para>
                  </important>

                  <para>On a computer that uses GRUB (the <ulink
                  url="http://www.gnu.org/software/grub/">Grand Unified
                  Bootloader</ulink>) to choose which operating system to
                  load, a file called <filename>grub.conf</filename><indexterm>
                        <primary>boot loader</primary>

                        <secondary>GRUB</secondary>

                        <tertiary>grub.conf</tertiary>
                     </indexterm> is stored on disk in a location that must be
                  readable by the GRUB second stage loader. This file lists
                  all the known operating systems with instructions on how to
                  boot each one. If GRUB was installed as part of a Linux
                  installation, then the GRUB files are likely to be in the
                  directory <filename>/boot/grub</filename>. Depending on how
                  things were installed, this may be in its own partition or
                  in the partition containing the root Linux file
                  system.</para>

                  <indexterm class="startofrange"
                             id="index.section.boot.loader.config.grub.fat32">
                     <primary>boot loader</primary>

                     <secondary>GRUB</secondary>

                     <tertiary>FAT32 installation</tertiary>
                  </indexterm>

                  <para>The Maestro Reboot Service<indexterm>
                        <primary>services</primary>

                        <secondary>reboot</secondary>
                     </indexterm> has a plug-in that knows how to read and
                  modify <filename>grub.conf</filename> in order to allow
                  rebooting into any of the operating systems known to GRUB.
                  Getting <filename>grub.conf</filename> and all the other
                  GRUB files into a location that is readable and writable by
                  all installed operating systems is the tricky part.
                  Fortunately, GRUB comes with support for many file system
                  types, so it can be installed just about anywhere. At the
                  same time, <productname class="registered">Microsoft
                  Windows</productname> does not include support for many file
                  system types, so it becomes the limiting factor. The lowest
                  common denominator among most modern operating systems and
                  GRUB is the FAT32 file system. By (re-)installing GRUB into
                  a FAT32 partition, the <filename>grub.conf</filename> file
                  will be readable and writable by all operating systems and
                  by GRUB at boot time.</para>

                  <caution>
                     <para>The process for installing GRUB into a FAT32 file
                     system manually is not difficult, but it requires care.
                     If the boot blocks of a disk are not set up properly, the
                     computer will be rendered unbootable, so having a
                     recovery CD that can reinstall some boot loader (such as
                     the default Master Boot Record [MBR] or GRUB's first
                     stage loader) is highly recommended. Furthermore, a good
                     understanding of how boot loaders and boot blocks work
                     will come in very handy if anything should go
                     wrong.</para>
                  </caution>

                  <para>The first step of installing GRUB onto a FAT32
                  partition is to create the partition. It does not need to be
                  large (a GRUB installation requires roughly 200 kB of
                  storage), and since the partition may be used for other
                  things that just giving GRUB a home, users should consider
                  carefully just how large to make it. For the purposes of
                  this discussion, let us say that the FAT32 partition is the
                  third primary partition on the first hard disk. In <ulink
                  url="http://www.gnu.org/software/grub/manual/html_node/Naming-convention.html#Naming-convention">GRUB
                  terminology</ulink>, this makes it partition (hd0,2). The
                  actual disk and partition used will vary from site to
                  site.</para>

                  <important>
                     <para>It is highly recommended that the FAT32 partition
                     be created as part of setting up the computer rather than
                     as an afterthought. However, this is not always possible,
                     and in that case, the FAT32 partition should go
                     <emphasis>after</emphasis> the existing primary
                     partitions on the hard disk where it is created. (It does
                     not have to be on the first disk.) Doing it this way
                     prevents the BIOS partitions from being renumbered which
                     would cause problems with existing boot loader
                     configurations. This is because boot loaders generally
                     rely upon BIOS partition ordering to know which OS to
                     load.</para>
                  </important>

                  <para>Once the partition is created, the existing GRUB
                  installation needs to be copied into the directory. In most
                  cases, GRUB will only be accessible from a non-<productname
                  class="registered">Windows</productname> platform, so the
                  FAT32 partition must be mounted under the operating system
                  where the GRUB files are currently installed. Let us assume
                  that the GRUB files are currently available under
                  <filename>/boot/grub</filename> and that the new FAT32
                  partition is mounted at <filename>/mnt</filename>. The
                  following command (run as root or another user with write
                  access to <filename>/mnt</filename>) copies the existing
                  GRUB files to the FAT32 partition where they need to
                  be:</para>

                  <screen>cp -rp /boot/grub /mnt</screen>

                  <para>When we are finished, the old
                  <filename>/boot/grub</filename> will no longer be the
                  official GRUB installation. For that reason, the FAT32
                  partition must be mounted when the non-Windows operating
                  system is booted (add an entry to
                  <filename>/etc/fstab</filename> to do this), and the
                  <filename>/boot/grub</filename> directory should be moved
                  out of the way to be replaced with a symbolic link. For
                  example, let us say that the FAT32 partition will be mounted
                  under <filename>/fat32</filename> every time the computer
                  boots. In that case, the following commands would set up the
                  new <filename>/boot/grub</filename> as a symbolic link to
                  the actual GRUB installation:</para>

                  <screen>cd /boot
mv grub grub-off
ln -s /fat32/grub ./</screen>

                  <para>At this point, it is a good idea to check
                  <filename>grub.conf</filename> (i.e.,
                  <filename>/mnt/grub/grub.conf</filename> in our example so
                  far) for any partition and/or path references that may need
                  to be updated. For example, if a splash screen is being used
                  with GRUB, then it will be referenced relative to its GRUB
                  partition identifier. For example, a Red Hat-based Linux
                  distribution will usually have the splash image set to
                  something similar to to
                  <filename>(hd0,0)/grub/splash.xpm.gz</filename>. Since GRUB
                  installation partition has now changed to (hd0,2) in our
                  example, the partition identifer part of the path must be
                  updated. (Taking this step at this stage saves some hassle
                  later.)</para>

                  <para>Next, a decision must be made about how to tell the
                  GRUB first stage loader (the GRUB boot blocks) about the new
                  location of the installation. If GRUB was already being used
                  as the boot loader for the computer, then the process is
                  very simple. First, make sure that the file
                  <filename>fat_stage_1_5</filename> exists in
                  <filename>/fat32/grub</filename>. Next, we have two ways to
                  go about updating the existing GRUB boot blocks. We can do
                  it from within the booted operating system, or we can reboot
                  the computer. Either way, we end up at a
                  <literal>grub&gt;</literal> prompt and execute the same
                  commands. If we choose to update the GRUB boot blocks from
                  within the booted OS (likely to be the more convenient
                  approach), we need to run the <command>grub</command>
                  command (usually found in <filename>/sbin</filename> or
                  <filename>/usr/local/sbin</filename>). At the
                  <literal>grub&gt;</literal> prompt, enter the following
                  commands:</para>

                  <screen>root (hd0,2)
setup (hd0)</screen>

                  <para>If instead we choose to reboot the computer, then the
                  GRUB first stage loader will run as usual, but it will not
                  be able to find the second stage loader because it has moved
                  to a different partition. At this point, we will be sitting
                  at a <literal>grub&gt;</literal> prompt, so we can issue the
                  same commands as above and reboot again.</para>

                  <para>Both approaches will update the GRUB first stage
                  loader to look at the FAT32 partition (for this example) to
                  find the second stage loader. At this point, booting should
                  be back to normal, but GRUB will be loading its information
                  from the FAT32 partition instead of from the Linux
                  partition.</para>

                  <para>If GRUB was not being used as the boot loader for the
                  computer, then it will be necessary to set it up as the boot
                  loader. This can be accomplished from within Linux (or
                  whatever operating system is currently hosting the GRUB
                  files). Run the <command>grub</command> command as root, and
                  at the <literal>grub&gt;</literal> prompt, and enter the
                  same commands as above.</para>

                  <para>If none of the previous approaches are viable for
                  getting GRUB ready to boot from the FAT32 partition, then a
                  GRUB <ulink
                  url="http://www.gnu.org/software/grub/manual/html_node/Creating-a-GRUB-boot-floppy.html">boot
                  floppy</ulink> or <ulink
                  url="http://www.gnu.org/software/grub/manual/html_node/Making-a-GRUB-bootable-CD-ROM.html">boot
                  CD</ulink> will be needed. However, the steps described in
                  the referenced pages will not produce a complete GRUB
                  installation device. Instead, they are intended to give the
                  user a way to <emphasis>load</emphasis> GRUB, not install
                  it. To simplify things, we have made a <ulink
                  url="https://realityforge.vrsource.org/trac/maestro/attachment/wiki/Start/MaestroAndGrub/grub.iso">GRUB
                  0.95 boot CD ISO image</ulink><indexterm>
                        <primary>boot loader</primary>

                        <secondary>GRUB</secondary>

                        <tertiary>bootable CD installation image</tertiary>
                     </indexterm> that can be burned to a CD (using a CD-R or
                  a CD-RW works). The resulting CD will be capable of
                  installing GRUB onto any file system supported by
                  GRUB.</para>

                  <para>The bootable GRUB CD can be used for the case when
                  GRUB is currently not installed on any disk. For this case,
                  first make a directory called <filename>grub</filename> (or
                  <filename>&lt;drive&gt;:\grub</filename> if the FAT32
                  partition is being created from within <productname
                  class="registered">Microsoft Windows</productname>) in the
                  empty FAT32 partition. Then, boot the computer using the
                  GRUB CD. At the <literal>grub&gt;</literal> prompt, run the
                  same commands for the previous cases. The GRUB files will be
                  installed to <filename>grub</filename> on the FAT32
                  partition, and the first stage loader will be set up just as
                  it would be for the other cases.</para>

                  <indexterm class="endofrange"
                             startref="index.section.boot.loader.config.grub.fat32"></indexterm>

                  <para>Once we have GRUB installed in the FAT32 partition
                  with a working <filename>grub.conf</filename>, we can boot
                  the computer as normal. The key difference is that now the
                  Maestro Reboot Service<indexterm>
                        <primary>services</primary>

                        <secondary>reboot</secondary>
                     </indexterm> plug-in for GRUB can edit
                  <filename>grub.conf</filename> on all operating systems.
                  Remember that the directory contaning
                  <filename>grub.conf</filename> will be accessed as
                  <filename>&lt;drive&gt;:\grub</filename> in <productname
                  class="registered">Microsoft Windows</productname>. On
                  non-Windows operating systems, the FAT32 partition mount
                  point determines how it will be accessed.</para>

                  <para>After all of that, <filename>maestrod.xcfg</filename>
                  must be updated to point to the new location for
                  <filename>grub.conf</filename>. For the non-<productname
                  class="registered">Windows</productname> operating system,
                  remember that we are mounting the FAT32 partition at
                  <filename>/fat32</filename> every time the computer boots.
                  In that case, <filename>maestrod.xcfg</filename> would be
                  similar to what is shown in <xref
                  linkend="example.maestrod.xcfg.reboot.grub.linux" />. On
                  <productname class="registered">Microsoft
                  Windows</productname>, let us assume that the FAT32
                  partition is accessed as drive <filename>E:</filename>,
                  which would mean that <filename>maestrod.xcfg</filename>
                  would be similar to that shown in <xref
                  linkend="example.maestrod.xcfg.reboot.grub.windows" />.</para>

                  <indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;grub_conf&gt;</sgmltag></tertiary>
                  </indexterm>

                  <example id="example.maestrod.xcfg.reboot.grub.linux">
                     <title><command>maestrod.xcfg</command>: Multi-Platform
                     <filename>grub.conf</filename> Access (Linux)</title>

                     <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/fat32/grub/grub.conf&lt;/grub_conf&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <example id="example.maestrod.xcfg.reboot.grub.windows">
                     <title><command>maestrod.xcfg</command>: Multi-Platform
                     <filename>grub.conf</filename> Access (<productname
                     class="registered">Microsoft
                     Windows</productname>)</title>

                     <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;E:\grub\grub.conf&lt;/grub_conf&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <indexterm class="endofrange"
                             startref="index.section.boot.loader.config.grub"></indexterm>
               </section>

               <section>
                  <title>Setting Up the NT Loader for use with Maestro</title>

                  <indexterm class="startofrange"
                             id="index.section.boot.loader.config.nt">
                     <primary>boot loader</primary>

                     <secondary>NT Loader</secondary>

                     <tertiary>use with Maestro</tertiary>
                  </indexterm>

                  <indexterm>
                     <primary>NT Loader</primary>

                     <see>boot loader</see>
                  </indexterm>

                  <indexterm>
                     <primary>NTLDR</primary>

                     <see>boot loader</see>
                  </indexterm>

                  <note>
                     <para>As of this writing, the NT Loader plug-in for the
                     Reboot Service is only available on <productname
                     class="registered">Microsoft Windows</productname>. It
                     still needs to be extended to be able to access boot.ini
                     from non-Windows platforms. As such, it is not yet
                     suitable for switching back and forth between
                     <productname class="registered">Microsoft
                     Windows</productname> and other operating systems.</para>
                  </note>

                  <para>The boot loader used by <productname
                  class="registered">Microsoft Windows</productname> NT 4.0
                  through <productname
                  class="registered">Windows</productname> XP is known as
                  <ulink
                  url="http://en.wikipedia.org/wiki/NTLDR">NTLDR</ulink> (or
                  the NT Loader). It uses a file named
                  <filename>boot.ini</filename><indexterm>
                        <primary>boot loader</primary>

                        <secondary>NT Loader</secondary>

                        <tertiary>boot.ini</tertiary>
                     </indexterm> (located on the same disk as the NT Loader)
                  to present the user with a menu of options to choose for
                  booting the computer. By editing this file, the Maestro
                  Reboot Service<indexterm>
                        <primary>services</primary>

                        <secondary>reboot</secondary>
                     </indexterm> plug-in for the NT Loader can change which
                  OS is chosen as the default boot target the next time the
                  computer is booted. As with GRUB<indexterm>
                        <primary>boot loader</primary>

                        <secondary>GRUB</secondary>
                     </indexterm> and its <filename>grub.conf</filename> file,
                  however, the <filename>boot.ini</filename> file must be
                  writable from all operating systems installed on the
                  computer in order to allow rebooting from one OS to
                  another.</para>

                  <para>Changing <filename>boot.ini</filename> from
                  <productname class="registered">Microsoft
                  Windows</productname> is not a problem. The complexity comes
                  in when using the NT file system (<ulink
                  url="http://en.wikipedia.org/wiki/NTFS">NTFS</ulink>) and
                  trying to modify <filename>boot.ini</filename> from another
                  operating system such as Linux. There is a freely available
                  <ulink url="http://www.linux-ntfs.org/">Linux kernel
                  module</ulink> that adds support for accessing NTFS
                  partitions. While reading from an NTFS partition in Linux
                  works very well, writing is still considered to be
                  dangerous. File system corruption resulting from writing to
                  an NTFS partition from Linux is something that is well
                  within the realm of possibility. Nevertheless, the <ulink
                  url="http://www.linux-ntfs.org/content/view/15/29/">information
                  about the current version</ulink> of said Linux kernel
                  module (2.1.20 at the time of this writing) states that it
                  allows resizing of existing files. Given that the default
                  boot target specification in <filename>boot.ini</filename>
                  is a path rather than an index, the likelihood of changing
                  the size of <filename>boot.ini</filename> in order to modify
                  the default setting is quite high. Therefore, it is vital
                  that resizing of existing files in an NTFS partition from
                  Linux be supported.</para>

                  <para>An alternative to using the Linux kernel module is to
                  use <ulink
                  url="http://wiki.linux-ntfs.org/doku.php?id=ntfsmount">ntfsmount</ulink>.
                  It is a more fully featured approach to accessing NTFS
                  partitions from Linux, though it tends to have slower
                  performance than the kernel module. Resizing of files always
                  works with ntfsmount, and if performance is not a concern
                  for accessing the NTFS partition, then it would probably be
                  a safer approach. Documentation is provided on the <ulink
                  url="http://wiki.linux-ntfs.org/doku.php?id=ntfsmount">ntfsmount
                  page</ulink> for using it to access NTFS partitions from
                  Linux.</para>

                  <indexterm class="endofrange"
                             startref="index.section.boot.loader.config.nt"></indexterm>

                  <indexterm class="endofrange"
                             startref="index.sectcion.service.reboot.settings"></indexterm>
               </section>
            </section>

            <section>
               <title>Desktop Service Settings</title>

               <indexterm class="startofrange"
                          id="index.sectcion.service.desktop.settings">
                  <primary>services</primary>

                  <secondary>desktop</secondary>

                  <tertiary>settings</tertiary>
               </indexterm>

               <indexterm class="startofrange">
                  <primary>maestrod</primary>

                  <secondary>configuration</secondary>

                  <tertiary>Desktop Service</tertiary>

                  <see>services</see>
               </indexterm>

               <para>The Desktop Service<indexterm>
                     <primary>services</primary>

                     <secondary>desktop</secondary>
                  </indexterm> controls the use of a screen saver and power
               management on the machine running <command>maestrod</command>,
               and it allows remote manipulation of the local desktop
               wallpaper image (when a user is logged on to the local node).
               This is made possible through the use of a collection of
               plug-ins that capture various mechanisms for screen saver
               usage, power management, and desktop wallpaper switching, and
               the plug-ins to use are chosen through
               <filename>maestrod.xcfg</filename>. We begin with the screen
               saver and power management together since they are closely
               related. We then explain how the desktop wallpaper switching is
               configured.</para>

               <section>
                  <title>Screen Saver and Power Management Settings</title>

                  <para>Screen savers and power management are very common
                  features of modern operating systems. Both, however,
                  interfere with the usage of graphics applications that are
                  run on clusters. We do not want a screen saver to activate
                  or a screen to go black in the middle of running a VR
                  demonstration as it would, among other things, ruin the
                  suspension of disbelief. The Desktop Service uses one or
                  more plug-ins to disable and deactivate screen savers and
                  power management. The plug-ins to use are identified using
                  the <sgmltag>&lt;saver_types&gt;</sgmltag><indexterm>
                        <primary><filename>maestrod.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;saver_types&gt;</sgmltag></tertiary>
                     </indexterm> XML element in
                  <filename>maestrod.xcfg</filename>. The value is a
                  comma-separated list of plug-ins to use. The current set of
                  screen saver and power management plug-ins are as follows
                  (identified by their <emphasis>case-sensitive</emphasis>
                  name used in the <sgmltag>&lt;saver_types&gt;</sgmltag>
                  list):</para>

                  <itemizedlist>
                     <listitem>
                        <para><literal>windows</literal>: Screen saver
                        management using the regular Windows desktop screen
                        saver.</para>

                        <important>
                           <para>This plug-in does not support unlocking a
                           display that is locked by a screen saver that
                           requires a password. It could be extended to disable
                           password authorization prior to the screen saver
                           being activated, but in general, cluster nodes
                           running <productname class="registered">Microsoft
                           Windows</productname> must currently be configured
                           so that the logged on user's screen saver does not
                           require a password to be deactivated.</para>
                        </important>
                     </listitem>

                     <listitem>
                        <para><literal>powercfg</literal>: Power management
                        using the Windows utility program
                        <command>powercfg.exe</command> to control monitor
                        power off.</para>

                        <note>
                           <para>The <command>powercfg.exe</command> utility
                           was introduced with <productname
                           class="registered">Microsoft Windows</productname>
                           Server 2003 and is available on <productname
                           class="registered">Windows</productname> XP SP2.
                           According to Microsoft, it is not guaranteed to work
                           with <productname class="registered">Microsoft
                           Windows</productname> 2000.</para>
                        </note>
                     </listitem>

                     <listitem>
                        <para><literal>xset</literal>: Screen blanking and
                        DPMS management through the X server. Unless the X
                        server is configured to disable screen blanking and
                        DPMS explicitly, this plug-in will always be needed on
                        operating systems using the X Window System.</para>
                     </listitem>

                     <listitem>
                        <para><literal>xscreensaver</literal>: Screen saver
                        and screen locking using the <ulink
                        url="http://www.jwz.org/xscreensaver/">XScreenSaver</ulink>
                        software. This is only needed when users are routinely
                        logged on to cluster nodes in order to prevent their
                        screen saver from activating. For cluster nodes using
                        the X Window System, it is not necessary for users to
                        be logged on locally in order for graphics windows to
                        be displayed, so this plug-in would generally not be
                        needed.</para>
                     </listitem>
                  </itemizedlist>

                  <para>Below, we show examples of
                  <filename>maestrod.xcfg</filename> settings for Microsoft
                  Windows and Linux. Note that <xref
                  linkend="example.maestrod.xcfg.desktop.saver.linux.xscreensaver" />
                  includes additional settings used by the
                  <literal>xscreensaver</literal> plug-in. These settings
                  provide the paths to the XScreenSaver commands
                  <command>xscreensaver</command> and
                  <command>xscreensaver-command</command>. Both are used by
                  the plug-in and must be set when it is in use.</para>

                  <important>
                     <para>If there is no value set for
                     <sgmltag>&lt;saver_types&gt;</sgmltag><indexterm>
                           <primary><filename>maestrod.xcfg</filename></primary>

                           <secondary>elements</secondary>

                           <tertiary><sgmltag>&lt;saver_types&gt;</sgmltag></tertiary>
                        </indexterm> or the
                     <sgmltag>&lt;saver_types&gt;</sgmltag> XML element is not
                     present in <filename>maestrod.xcfg</filename>, then the
                     Desktop Service has platform-specific default settings
                     for the screen saver plug-in list. For <productname
                     class="registered">Microsoft Windows</productname>, the
                     default setting is to use the <literal>windows</literal>
                     and <literal>powercfg</literal> plug-ins; for non-Windows
                     platforms, the default setting is to use the
                     <literal>xset</literal> plug-in.</para>
                  </important>

                  <example id="example.maestrod.xcfg.desktop.saver.linux">
                     <title><command>maestrod.xcfg</command>: Screen Saver and
                     Power Management on Linux Without Local Logon</title>

                     <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/fat32/grub/grub.conf&lt;/grub_conf&gt;
   &lt;saver_types&gt;xset&lt;/saver_types&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;xscreensaver_cmd&gt;</sgmltag></tertiary>
                  </indexterm>

                  <indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;xscreensaver_command_cmd&gt;</sgmltag></tertiary>
                  </indexterm>

                  <example id="example.maestrod.xcfg.desktop.saver.linux.xscreensaver">
                     <title><command>maestrod.xcfg</command>: Screen Saver and
                     Power Management on Linux With Local Logon</title>

                     <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/fat32/grub/grub.conf&lt;/grub_conf&gt;
   &lt;saver_types&gt;xset,xscreensaver&lt;/saver_types&gt;
   &lt;xscreensaver_cmd&gt;/usr/X11R6/bin/xscreensaver&lt;/xscreensaver_cmd&gt;
   &lt;xscreensaver_command_cmd&gt;
      /usr/X11R6/bin/xscreensaver-command
   &lt;/xscreensaver_command_cmd&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <example id="example.maestrod.xcfg.desktop.saver.windows">
                     <title><command>maestrod.xcfg</command>: Screen Saver and
                     Power Management on <productname
                     class="registered">Microsoft
                     Windows</productname></title>

                     <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;E:\grub\grub.conf&lt;/grub_conf&gt;
   &lt;saver_types&gt;windows,powercfg&lt;/saver_types&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <para>Additional configuration can be performed for the
                  <literal>powercfg</literal> plug-in available for use on
                  <productname class="registered">Microsoft
                  Windows</productname>. The (current) job of this plug-in is
                  to change the power-off timeout for a monitor drawing AC
                  power. It does this by switching time timeout value between
                  0 minutes (no power off) and some other number of minutes.
                  The plug-in will query the current power-off timeout setting
                  when the Maestro service is launched and use that as the
                  non-zero value. However, if the power-off timeout is 0 when
                  the Maestro service starts, then it falls back on a
                  twenty-minute timeout. This may not be appropriate, and the
                  <filename>maestrod.xcfg</filename> file provides a means to
                  override this behavior. As shown in <xref
                  linkend="example.maestrod.xcfg.desktop.saver.windows.powercfg" />,
                  we see that the power-off timeout can be set to some number
                  of minutes explicitly. This value can be set to 0 to prevent
                  the powercfg plug-in from enabling the power-off timeout
                  altogether, though in this case, it may be better to set the
                  <sgmltag>&lt;saver_types&gt;</sgmltag> value to be
                  <literal>windows</literal> alone.</para>

                  <example id="example.maestrod.xcfg.desktop.saver.windows.powercfg">
                     <title><command>maestrod.xcfg</command>: Screen Saver and
                     Power Management on <productname
                     class="registered">Microsoft Windows</productname>
                     (2)</title>

                     <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestrod&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;E:\grub\grub.conf&lt;/grub_conf&gt;
   &lt;saver_types&gt;windows,powercfg&lt;/saver_types&gt;
   &lt;powercfg&gt;
      &lt;ac_off_time&gt;120&lt;/ac_off_time&gt;
   &lt;/powercfg&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>
               </section>

               <section>
                  <title>Desktop Wallpaper Switching Settings</title>

                  <para>When a cluster node has a locally logged on user, that
                  user will sometimes have an image displayed on his or
                  desktop. This is commonly referred to as <quote>desktop
                  wallpaper,</quote> and the Desktop Service has a mechanism
                  for changing this image from the <application>Maestro
                  GUI</application>. As with the screen saver and power
                  management capability, the platform- and site-specific
                  details are captured in different plug-ins. The
                  configuration of which plug-in to use is quite simple. Just
                  choose one of the plug-ins named in the list below and set
                  it as the CDATA of the
                  <sgmltag>&lt;background_image_manager&gt;</sgmltag><indexterm>
                        <primary><filename>maestrod.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;background_image_manager&gt;</sgmltag></tertiary>
                     </indexterm> XML element in
                  <filename>maestrod.xcfg</filename>. Supported values at the
                  time of this writing are as follows:</para>

                  <itemizedlist>
                     <listitem>
                        <para><literal>windows</literal>: Desktop wallpaper
                        management using the regular Windows desktop.</para>

                        <important>
                           <para>Presently, only BMP images can be used as the
                           input to this plug-in (see <xref
                           linkend="section.viewer.reboot" />). In a future
                           version of Maestro, on-the-fly conversion to BMP may
                           be implemented to allow other formats such as JPEG
                           and PNG to be used.</para>
                        </important>
                     </listitem>

                     <listitem>
                        <para><literal>gnome</literal>: Background querying
                        and switching using GConf (via
                        <command>gconftool-2</command>). The path to
                        gconftool-2 can be specified by setting the value of
                        the <sgmltag>&lt;gconftool_cmd&gt;</sgmltag><indexterm>
                              <primary><filename>maestrod.xcfg</filename></primary>

                              <secondary>elements</secondary>

                              <tertiary><sgmltag>&lt;gconftool_cmd&gt;</sgmltag></tertiary>
                           </indexterm> XML element in
                        <filename>maestrod.xcfg</filename>. If not set, this
                        path defaults to
                        <filename>/usr/bin/gconftool-2</filename>.</para>
                     </listitem>
                  </itemizedlist>

                  <para>If the
                  <sgmltag>&lt;background_image_manager&gt;</sgmltag> XML
                  element has no value or is not present, the Desktop Service
                  defaults to using the plug-in <literal>windows</literal> on
                  <productname class="registered">Microsoft
                  Windows</productname> and the plug-in
                  <literal>gnome</literal> on other platforms.</para>

                  <indexterm class="endofrange"
                             startref="index.sectcion.service.desktop.settings"></indexterm>

                  <indexterm class="endofrange"
                             startref="index.section.maestrod.config"></indexterm>
               </section>
            </section>
         </section>
      </section>

      <section id="section.usage.gui">
         <title>Using the <application>Maestro GUI</application>
         Client</title>

         <para>The client side of Maestro is a cross-platform GUI written in
         the Python programming language with PyQt as the widget set. As we
         will see, it is designed to be a dynamic and flexible interface for
         utilizing a cluster.</para>

         <para>Before we get into the usage of the <application>Maestro
         GUI</application>, we must introduce some terminology. In keeping
         with the musical theme of Maestro, there are two data files (XML
         files) utilized by the <application>Maestro GUI</application>:
         ensemble files and stanza files. An
         <firstterm>ensemble</firstterm><indexterm>
               <primary>ensemble</primary>

               <secondary>definition of</secondary>
            </indexterm> file identifies the nodes of the cluster, and in the
         usage of Maestro, we frequently refer to the cluster nodes together
         as an ensemble. The name ensemble was chosen because it represents a
         group of musicians who perform together—an apropos choice in the
         context of a graphics cluster.</para>

         <para>The <firstterm>stanza</firstterm><indexterm>
               <primary>stanza</primary>

               <secondary>definition of</secondary>
            </indexterm> file describes how to run an application. If we
         consider that running an application is the performance of the
         cluster, then this name is quite meaningful. The term stanza also has
         relevance in the realm of computing where it is <quote>a block or
         subsection of a human-readable configuration file for computer
         software.</quote> Application developers write stanza files by
         filling in the executable name, command line options, and any
         environment variables needed to launch the software. The stanza file
         is then used by the <application>Maestro GUI</application> to
         construct a graphical interface for that application in the Maestro
         Launch Viewer (see <xref linkend="section.viewer.launch" />). Thus,
         it is up to the stanza author to create a stanza that results in an
         understandable, flexible user interface when loaded by the
         <application>Maestro GUI</application>.</para>

         <section id="section.running.maestro.gui">
            <title>Running the <application>Maestro GUI</application></title>

            <para>To load the <application>Maestro GUI</application>, run the
            command <command>maestro</command> or double-click on the
            application icon. A splash screen appears while all the
            dynamically loaded code and data files are loaded. Next, a login
            dialog is displayed asking for the user name, the password, and
            (optionally) the <productname class="registered">Microsoft
            Windows</productname> domain for the user who will be launching
            applications on the cluster. At this time, the login information
            must be the same for all nodes of the ensemble, and a user cannot
            authenticate as a different person without restarting the
            <application>Maestro GUI</application>.</para>

            <sidebar>
               <para>Once the user enters his or her password, the
               authentication process starts for each of the nodes, and it
               continues asynchronously while the GUI is in use until login
               completes on all the nodes in the ensemble. If login access is
               denied on a node, the user will be presented with a dialog box
               asking him or her if reauthentication should be performed. If a
               node cannot be contacted for logging in, the process will be
               reattempted in the background periodically until it succeeds.
               Furthermore, if a server node goes down and comes back up after
               login takes place, the user will be reauthenticated with the
               server automatically without any further necessary action on
               the part of the user.</para>
            </sidebar>

            <indexterm>
               <primary>Windows</primary>

               <secondary>drive letters</secondary>
            </indexterm>

            <indexterm>
               <primary>drive letters</primary>

               <see>Windows</see>
            </indexterm>

            <indexterm>
               <primary>Windows</primary>

               <secondary>user profile</secondary>
            </indexterm>

            <para>For users of Microsoft Windows, drive letter mappings are
            handled when the <application>Maestro GUI</application> user
            authenticates with the Maestro server. The drive letters mapped
            are the user's home directory and all persistent drive mappings in
            the user's profile. This information gets loaded into the local
            Windows Registry when the user's profile is loaded after
            authentication.</para>

            <indexterm>
               <primary>Windows</primary>

               <secondary>user profile</secondary>

               <tertiary>logon scripts</tertiary>
            </indexterm>

            <note>
               <para>As of this writing, user logon scripts defined as part of
               the user profile are not being executed when the profile is
               loaded.</para>
            </note>

            <para>The main interface panel of the <application>Maestro
            GUI</application> has three parts: a tool bar, the viewer panel,
            and the log window. The tool bar contains buttons for basic
            operations such as loading and saving the ensemble file. Within
            the viewer panel, the various viewer plug-ins can be accessed.
            Only one viewer is displayed at a time, and switching viewers is
            done by clicking on an icon in the left side of the viewer panel.
            Tool bars and menu items may be added and removed on the fly as
            the current viewer changes.</para>

            <section id="section.gui.command.line.options">
               <title>Command Line Options for the <application>Maestro
               GUI</application></title>

               <indexterm class="startofrange"
                          id="index.section.maestro.cmd.opts">
                  <primary>maestro</primary>

                  <secondary>command line options</secondary>
               </indexterm>

               <para>There are six command line options to the
               <command>maestro</command> command:
               <option>--ensemble</option>, <option>--stanza</option>,
               <option>--launch-only</option>,
               <option>--launch-all-from</option>, <option>--view</option>,
               <option>--override</option>. These options have short forms
               that are, respectively, <option>-e</option>,
               <option>-s</option>, <option>-l</option>, <option>-L</option>,
               <option>-v</option>, and <option>-o</option>, and we will refer
               to the command line options henceforth using the form
               <option>-a/--arg</option>. The exact syntax and usage
               information for these options can be displayed by running the
               following:</para>

               <screen>maestro --help</screen>

               <indexterm class="startofrange"
                          id="index.section.maestro.cmd.opts.ensemble">
                  <primary>maestro</primary>

                  <secondary>command line options</secondary>

                  <tertiary><option>-e/--ensemble</option></tertiary>
               </indexterm>

               <para>The <option>-e/--ensemble</option> option names an
               ensemble file to load when the <application>Maestro
               GUI</application> starts. Using this option eliminates the need
               to open an ensemble after the GUI opens, but it does not
               preclude the user from changing the current ensemble (as we
               will see in <xref linkend="section.gui.ensemble.load" />). One
               use of this command line option would be in the context of
               associations that cause the <application>Maestro
               GUI</application> to load when a user double-clicks on a file.
               The file association action could include this option to cause
               a specific ensemble to be loaded by default so that the
               <application>Maestro GUI</application> automatically connects
               to a cluster when it opens.</para>

               <indexterm class="endofrange"
                          startref="index.section.maestro.cmd.opts.ensemble"></indexterm>

               <indexterm class="startofrange"
                          id="index.section.maestro.cmd.opts.stanza">
                  <primary>maestro</primary>

                  <secondary>command line options</secondary>

                  <tertiary><option>-s/--stanza</option></tertiary>
               </indexterm>

               <para>The <option>-s/--stanza</option> option names a stanza
               file that will be loaded by the <application>Maestro
               GUI</application> in addition to those found by scanning the
               stanza search path<indexterm>
                     <primary>stanza</primary>

                     <secondary>search path</secondary>
                  </indexterm><footnote>
                     <para>If the named file is found during the stanza search
                     path scanning, it will not be loaded twice.</para>
                  </footnote>. This option can be specified repeatedly to
               identify multiple stanza files to load. As with the
               <option>--ensemble</option> option, one way of using this
               option is in the context of file associations. If the file
               associated with launching the <application>Maestro
               GUI</application> is an input file to an application, the
               stanza for the application that uses the input file could be
               identified as the default to use when the Launch View<indexterm>
                     <primary>viewers</primary>

                     <secondary>launch</secondary>
                  </indexterm> (see <xref linkend="section.viewer.launch" />)
               is first displayed.</para>

               <indexterm class="endofrange"
                          startref="index.section.maestro.cmd.opts.stanza"></indexterm>

               <para>The use of the <option>-e/--ensemble</option><indexterm>
                     <primary>maestro</primary>

                     <secondary>command line options</secondary>

                     <tertiary><option>-e/--ensemble</option></tertiary>
                  </indexterm> and <option>-s/--stanza</option><indexterm>
                     <primary>maestro</primary>

                     <secondary>command line options</secondary>

                     <tertiary><option>-s/--stanza</option></tertiary>
                  </indexterm> options are not strictly necessary to delineate
               ensemble and stanza files. When processing command line
               options, those that are not preceded by one of the five options
               are treated as positional arguments. Positional arguments are
               treated as XML files, and they are examined to determine the
               document type. Documents with the root tag
               <sgmltag>&lt;ensemble&gt;</sgmltag><indexterm>
                     <primary>ensemble</primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;ensemble&gt;</sgmltag></tertiary>
                  </indexterm> are treated as ensemble files, and those with
               the root tag <sgmltag>&lt;stanza&gt;</sgmltag><indexterm>
                     <primary>stanza</primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;stanza&gt;</sgmltag></tertiary>
                  </indexterm> are treated as stanza files. Among other
               things, this behavior facilitates file associations and
               double-click launching actions.</para>

               <indexterm class="startofrange"
                          id="index.section.maestro.cmd.opts.launchonly">
                  <primary>maestro</primary>

                  <secondary>command line options</secondary>

                  <tertiary><option>-l/--launch-only</option></tertiary>
               </indexterm>

               <para>The <option>-l/--launch-only</option> option directs the
               Launch Viewer<indexterm>
                     <primary>viewers</primary>

                     <secondary>launch</secondary>
                  </indexterm> (see <xref linkend="section.viewer.launch" />)
               to display <emphasis>only</emphasis> the named application in
               its pull-down menu. The argument to this option must be the
               name of an application defined in a stanza that will be found
               by the <application>Maestro GUI</application>, either by
               scanning the search path or from the
               <option>-s/--stanza</option> option. If the application name
               contains spaces, the argument to the
               <option>-l/--launch-only</option> command line option must be
               quoted appropriately. If the file associated with launching the
               <application>Maestro GUI</application> is an input file to an
               application, the application that uses the input file could be
               identified as the one (and only) to use in the
               <application>Maestro GUI</application>. In that way, the user
               would be presented with a <application>Maestro
               GUI</application> configuration that only pertains to the
               application and input file in question.</para>

               <indexterm class="endofrange"
                          startref="index.section.maestro.cmd.opts.launchonly"></indexterm>

               <indexterm class="startofrange"
                          id="index.section.maestro.cmd.opts.launchallfrom">
                  <primary>maestro</primary>

                  <secondary>command line options</secondary>

                  <tertiary><option>-L/--launch-all-from</option></tertiary>
               </indexterm>

               <para>The <option>-L/--launch-all-from</option> option directs
               the Launch Viewer (see <xref
               linkend="section.viewer.launch" />) to display all the
               applications defined in the named stanza file but no others.
               This approach is less restrictive than the
               <option>-l/--launch-only</option> option, though it may still
               display only one application if that is all that is defined in
               the named stanza file. The stanza file named by this argument
               must be a valid path to a stanza file.</para>

               <note>
                  <para>The <option>-l/--launch-only</option> and
                  <option>-L/--launch-all-from</option> options do not prevent
                  the stanza search path<indexterm>
                        <primary>stanza</primary>

                        <secondary>search path</secondary>
                     </indexterm> from being scanned. As such, all discovered
                  stanzas are still available to be edited using the Stanza
                  Editor<indexterm>
                        <primary>viewers</primary>

                        <secondary>stanza editor</secondary>
                     </indexterm> (see <xref
                  linkend="section.files.stanza" />), but the applications
                  displayed in the Launch Viewer will be restricted based on
                  the use of one of these options.</para>
               </note>

               <sidebar>
                  <para>Only one of the options
                  <option>-l/--launch-only</option><indexterm>
                        <primary>maestro</primary>

                        <secondary>command line options</secondary>

                        <tertiary><option>-l/--launch-only</option></tertiary>
                     </indexterm> or <option>-L/--launch-all-from</option>
                  should be given when running the <application>Maestro
                  GUI</application>. If both are used, the
                  <option>-l/--launch-only</option> option takes
                  precedence.</para>
               </sidebar>

               <indexterm class="endofrange"
                          startref="index.section.maestro.cmd.opts.launchallfrom"></indexterm>

               <indexterm class="startofrange"
                          id="index.section.maestro.cmd.opts.view">
                  <primary>maestro</primary>

                  <secondary>command line options</secondary>

                  <tertiary><option>-v/--view</option></tertiary>
               </indexterm>

               <para>The <option>-v/--view</option> option tells the
               <application>Maestro GUI</application> which viewer plug-in to
               display when it opens. By default, the <application>Maestro
               GUI</application> displays whichever viewer plug-in is the
               first in the list when it opens. This option overrides that
               behavior. The viewer plug-in to use is identified by its name,
               and the names of the viewer plug-ins that come with Maestro are
               as follows<footnote>
                     <para>We explain more about the viewers in later
                     subsections.</para>
                  </footnote>:</para>

               <indexterm>
                  <primary>viewers</primary>
               </indexterm>

               <itemizedlist>
                  <listitem>
                     <para>Launch View</para>
                  </listitem>

                  <listitem>
                     <para>Reboot View</para>
                  </listitem>

                  <listitem>
                     <para>Process View</para>
                  </listitem>

                  <listitem>
                     <para>Resource View</para>
                  </listitem>

                  <listitem>
                     <para>Desktop View</para>
                  </listitem>

                  <listitem>
                     <para>Ensemble View</para>
                  </listitem>

                  <listitem>
                     <para>Stanza Editor</para>
                  </listitem>
               </itemizedlist>

               <para>Using any of these names on a command line would require
               proper quoting to avoid misinterpreting the space in the viewer
               name. For example, here is one way that the
               <application>Maestro GUI</application> could be launched as a
               result of a file association on <productname
               class="registered">Microsoft Windows</productname> (the wrapped
               line is to facilitate rendering rather than to indicate
               syntax):</para>

               <screen>maestro.py --ensemble="C:\site\cluster.ensem"
           --stanza="C:\apps\myapp.stanza" --view="Launch View"</screen>

               <para>A simpler form of the same is the following:</para>

               <screen>maestro.py --view="Launch View" C:\site\cluster.ensem
           C:\apps\myapp.stanza</screen>

               <para>By using the short form of the <option>-v/--view</option>
               option, we can shrink the command line a little further, as
               shown below:</para>

               <screen>maestro.py -v "Launch View" C:\site\cluster.ensem
           C:\apps\myapp.stanza</screen>

               <indexterm class="endofrange"
                          startref="index.section.maestro.cmd.opts.view"></indexterm>

               <para>We will see in <xref linkend="section.maestro.config" />
               how this command can be simplified further through the
               <application>Maestro GUI</application> configuration. By
               configuring the <application>Maestro GUI</application>
               appropriately, we can avoid having to list the ensemble file
               every time the GUI is launched. Moreover, site-wide and
               user-specific extensions to the stanza search path can
               eliminate the need to name any stanza files on the command line
               in many cases.</para>

               <indexterm class="startofrange"
                          id="index.section.maestro.cmd.opts.override">
                  <primary>maestro</primary>

                  <secondary>command line options</secondary>

                  <tertiary><option>-o/--override</option></tertiary>
               </indexterm>

               <para>The <option>-o/--override</option> option offers a great
               deal of power to users of the <application>Maestro
               GUI</application>, though its use is by no means simple. Later,
               in <xref linkend="section.stanza.items" />, we will explain how
               one stanza file entry can reference <emphasis>and</emphasis>
               refine content from one or more other stanza entries. Reusing
               stanza constructs from files is a very static process, however,
               and this is not always sufficient. The
               <option>-o/--override</option> offers some of this same
               functionality by allowing the <application>Maestro
               GUI</application> user to change the behavior of a stanza when
               the GUI is launched.</para>

               <para>To understand when this overriding behavior can be
               useful, consider the case of a clustered application that loads
               a data file. This data file determines what the application
               will display. To make things simple for new users, the stanza
               file for this application defines a default data file. In this
               way, a single click of the Launch button is sufficient to get
               the application running. More experienced users may have their
               own data files, however, and they would like to be able to use
               them by double-clicking on the data file. To make this work, a
               file association would need to be created between the data file
               type and the <application>Maestro GUI</application>. In our
               file association setup, we can use the
               <option>-l/--launch-only</option> option to restrict what
               application can be launched and the <option>-v/--view</option>
               option to go straight to the Launch View. The only remaining
               step is to replace the default data file option in the stanza
               with the file name provided through the double-click launch
               operation, and this is where the <option>-o/--override</option>
               option plays a role.</para>

               <para>Without getting into the details of the stanza file
               format at this point (refer to <xref
               linkend="section.files.stanza" /> for more on that topic), let
               us assume that we have the stanza file shown in <xref
               linkend="example.stanza.file.simple" />. Notice that the root
               <sgmltag>&lt;stanza&gt;</sgmltag><indexterm>
                     <primary>stanza</primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;stanza&gt;</sgmltag></tertiary>
                  </indexterm> XML element has an attribute called
               <literal>namespace</literal> and that each XML element under
               the <sgmltag>&lt;stanza&gt;</sgmltag> root has an attribute
               called <literal>name</literal>. These attributes are used in
               constructing the path to an entry in the stanza, and we can use
               the <option>-o/--override</option> with any child of the
               <sgmltag>&lt;stanza&gt;</sgmltag> root, no matter how deeply
               nested it may be. In this case, we need to change the path to
               the data file based on what is provided through the file
               association action. The path to the data file item is
               <literal>mine:app/input</literal>, and we need to change the
               CDATA for that XML element. To do this, the command line option
               would be similar to <literal>-o
               "mine:app/input?cdata=/path/to/myfile.ext"</literal>. In the
               context of a file association action, the syntax depends on
               what operating environment is being used. For example, a
               Windows Registry association would for this case would be
               <literal>-o "mine:app/input?cdata=%1"</literal>, and a <ulink
               url="???">freedesktop.org</ulink> association would be
               <literal>-o "mine:app/input?cdata=%f"</literal>. (Details on
               setting up file association actions are well beyond the scope
               of this document.)</para>

               <example id="example.stanza.file.simple">
                  <title>Basic Stanza File</title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;stanza namespace="mine"&gt;
   &lt;application label="My App" name="app"&gt;
      &lt;command class="" hidden="true" label="Application" name="cmd"&gt;
         myApp
      &lt;/command&gt;
      &lt;arg name="input" class="" editable="true" label="Data File"
           flag="-d"&gt;
         ${HOME}/data/datafile.ext
      &lt;/arg&gt;
      &lt;arg name="vrjconfig" clsss="" hidden="true"
           label="VR Juggler Configuration" flag="-j"&gt;
         ${VJ_CONFIG}/cluster.jconf
      &lt;/arg&gt;
   &lt;/application&gt;
&lt;/stanza&gt;</programlisting>
               </example>

               <para>The behavior of the <option>-o/--override</option> option
               is not limited to changing the CDATA of an XML element. Any
               attribute of the identified element can be changed using the
               syntax <literal>path?attr=value</literal> where
               <literal>path</literal> is a valid stanza ID path,
               <literal>attr</literal> is the name of the attribute (such as
               <literal>class</literal>, <literal>label</literal>, etc.) and
               <literal>value</literal> is the new value for the named
               attribute. Multiple overrides can be performed on a stanza
               entry using a single <option>-o/--override</option> option or
               by repeating the ID path in multiple
               <option>-o/--override</option> options. To see how we can do
               this using a single <option>-o/--override</option> option, let
               us say that we want to change the command line flag used to
               name the data file to be loaded from <option>-d</option> to
               <option>--input</option> in addition to our override from
               above. In this case, the option for use in the Windows Registry
               would be <literal>-o
               "mine:app/input?cdata=%1&amp;flag=--input"</literal> and
               <literal>-o
               "mine:app/input?cdata=%f&amp;flag=--input"</literal> for a
               freedesktop.org association. The key point here is the use of
               the <literal>&amp;</literal> character to separate multiple
               overrides for a single ID path. (That and we slipped in an
               example of how to change the value of an XML attribute.)</para>

               <indexterm class="endofrange"
                          startref="index.section.maestro.cmd.opts.override"></indexterm>

               <indexterm class="endofrange"
                          startref="index.section.maestro.cmd.opts"></indexterm>
            </section>

            <section id="section.stanza.search.path">
               <title>Stanza Search Path</title>

               <indexterm class="startofrange"
                          id="index.section.stanza.search.path">
                  <primary>stanza</primary>

                  <secondary>search path</secondary>
               </indexterm>

               <para>Every time the <application>Maestro GUI</application>
               starts, it scans a collection of directories looking for files
               with the extension <filename>.stanza</filename> (unless told
               not to do so by the <application>Maestro GUI</application>
               configuration—see <xref linkend="section.maestro.config" />).
               The default search path consists of the following three
               directories (searched in this order):</para>

               <orderedlist>
                  <listitem>
                     <para>The <filename>stanzas</filename> subdirectory of
                     the <application>Maestro GUI</application>
                     installation</para>
                  </listitem>

                  <listitem>
                     <para>The <filename>stanzas</filename> subdirectory of
                     the user-specific Maestro directory
                     (<filename>%APPDATA%\Maestro</filename> or
                     <filename>%USERPROFILE%\Application
                     Data\Maestro</filename> on <productname
                     class="registered">Microsoft Windows</productname>,
                     <filename>$HOME/Library/Application
                     Support/Maestro</filename> on Mac OS X, and
                     <filename>$HOME/.maestro</filename> on all other
                     platforms)</para>
                  </listitem>

                  <listitem>
                     <para>The <filename>stanzas</filename> subdirectory of
                     the system-wide Maestro directory
                     (<filename>%SystemDrive%\Documents and Settings\All
                     Users\maestro</filename> on <productname
                     class="registered">Microsoft Windows</productname> and
                     <filename>/etc/maestro</filename> on all other
                     platforms)</para>
                  </listitem>
               </orderedlist>

               <para>If the environment variable <envar>STANZA_PATH</envar> is
               set, the directories listed in the value of that variable are
               appended to the above list. Note that this environment variable
               uses platform-specific conventions for path separation. On
               <productname class="registered">Microsoft
               Windows</productname>, the path separation character is
               <literal>;</literal>, and on all other platforms it is
               <literal>:</literal>.</para>

               <para>The default search path can be extended further using a
               system-wide path setting and a user-specific path setting. We
               will see more about these in <xref
               linkend="section.maestro.config.system" /> and <xref
               linkend="section.maestro.config.user" />. Putting it all
               together, then, we have the following list of places scanned
               for <filename>.stanza</filename> files (in order):</para>

               <orderedlist>
                  <listitem>
                     <para>The user-specific list of directories from
                     <filename>maestro.xml</filename><indexterm>
                           <primary><filename>maestro.xml</filename></primary>
                        </indexterm></para>
                  </listitem>

                  <listitem>
                     <para>The system-wide list of directories from
                     <filename>maestro.xcfg</filename><indexterm>
                           <primary><filename>maestro.xcfg</filename></primary>
                        </indexterm></para>
                  </listitem>

                  <listitem>
                     <para>The <filename>stanzas</filename> subdirectory of
                     the <application>Maestro GUI</application>
                     installation</para>
                  </listitem>

                  <listitem>
                     <para>The <filename>stanzas</filename> subdirectory of
                     the user-specific Maestro directory</para>
                  </listitem>

                  <listitem>
                     <para>The <filename>stanzas</filename> subdirectory of
                     the system-wide Maestro directory</para>
                  </listitem>

                  <listitem>
                     <para>The directories listed in the
                     <envar>STANZA_PATH</envar> environment variable</para>
                  </listitem>
               </orderedlist>

               <para>The search process goes one step further by searching
               each directory in the stanza search path recursively. This
               means that subdirectories under each of the searched
               directories are also scanned. As such, users can set up
               hierarchical stanza organizational schemes very easily without
               having to list every single directory in the stanza search
               path. Only the root of the hierarchy need be named in order for
               all the <filename>.stanza</filename> files to be found.</para>

               <indexterm class="endofrange"
                          startref="index.section.stanza.search.path"></indexterm>
            </section>

            <section id="section.gui.ensemble.load">
               <title>Loading an Ensemble</title>

               <para>When the <application>Maestro GUI</application> starts,
               it either loads either an ensemble as specified on the command
               line, the default ensemble named in the Maestro configuration
               (see <xref linkend="section.maestro.config" />), or no
               ensemble. In the third case, the user must load an ensemble
               through the GUI. This can be accomplished by selecting
               <menuchoice>
                     <guimenu>File</guimenu>

                     <guimenuitem>Load Ensemble</guimenuitem>
                  </menuchoice> or by clicking on the <guibutton>Load
               Ensemble</guibutton> tool bar button. If there is already an
               ensemble loaded, this operation <emphasis>replaces</emphasis>
               the existing ensemble. That means that all existing cluster
               node connections are closed, and new connections set
               made.</para>
            </section>

            <section id="section.viewer.launch">
               <title>Launch Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.launch">
                  <primary>viewers</primary>

                  <secondary>launch</secondary>
               </indexterm>

               <para>The Launch Viewer is likely to be the one seen most
               frequently by Maestro users. This module provides the end user
               interface to remote application launching. The interface itself
               is composed dynamically based on the configuration file (known
               as a <firstterm>stanza</firstterm>) for each application. This
               means that every application is likely to have a different
               launching interface in terms of options and parameters, and it
               is entirely up to each application author to devise a stanza
               that results in a clear, simple interface to launching an
               application. The interface for choosing which application to
               launch and the actual launch controls, however, will always be
               the same. In this section, we explain these
               application-agnostic controls as well as the basic controls
               that are available for stanza authors to utilize.</para>

               <section>
                  <title>Basic Launch Controls</title>

                  <para>At the top of the Launch Viewer panel is a pull-down
                  menu that lists all the known applications. Recall that the
                  applications are described using stanzas, so this pull-down
                  menu lists all the loaded stanzas. By selecting an
                  application in the Launch Viewer, the user is indicating
                  which application will be launched.</para>

                  <para>At the bottom of the Launch Viewer, there are three
                  buttons at the bottom of the panel:
                  <guibutton>Launch</guibutton>,
                  <guibutton>Terminate</guibutton>, and
                  <guibutton>Help</guibutton>. The
                  <guibutton>Launch</guibutton> button tells all the remote
                  nodes to run the command with the options provided by the
                  user. The <guibutton>Terminate</guibutton> button kills the
                  launched application. The <guibutton>Help</guibutton> button
                  loads HTML help associated with the selected application (as
                  specified in its stanza file). The
                  <guibutton>Help</guibutton> button is only enabled when an
                  application stanza includes information about where to find
                  the HTML help.</para>

                  <para>When an application is launched, any output that it
                  would normally write to a console window is streamed back to
                  the <application>Maestro GUI</application> and displayed in
                  the tabbed panel of log windows. This panel is normally at
                  the bottom of the <application>Maestro GUI</application>.
                  Note that each tab can be detached from the
                  <application>Maestro GUI</application> and moved &amp;
                  resized independently. This allows the output from multiple
                  nodes to be seen simultaneously if so desired. Otherwise, as
                  a tabbed panel, it offers a very compact view of the log
                  output.</para>

                  <para>The output from the launched application is also
                  written to node-specific log files in the user's home
                  directory. In some instances, it may be necessary or useful
                  to save this output. This can be done at any time by
                  selecting the <menuchoice>
                        <guimenu>File</guimenu>

                        <guimenuitem>Archive Logs</guimenuitem>
                     </menuchoice> item or by clicking the <guibutton>Archive
                  Logs</guibutton> tool bar button. A file chooser dialog will
                  open asking the user to name the file used for the archive.
                  Upon choosing a file, the log files are collected into a ZIP
                  archive.</para>
               </section>

               <section>
                  <title>Application Option Controls</title>

                  <para>To manipulate the launch options for an application, a
                  basic set of controls are used. These controls are
                  structured based on the stanza file. The GUI layout for the
                  Launch Viewer will reflect the nesting and grouping of
                  options as they are specified in the stanza. The controls
                  used are the following:</para>

                  <itemizedlist>
                     <listitem>
                        <para>Text fields where users enter values, strings,
                        paths, etc. In the case of a file path, the stanza
                        author may choose to indicate that a file chooser
                        dialog box can be opened. Should that information be
                        present in the stanza, a button will be placed to the
                        right of the text field for opening the file chooser
                        dialog.</para>
                     </listitem>

                     <listitem>
                        <para>Radio button groups are used for controlling
                        which mutually exclusive choice the user can make
                        among different cases.</para>
                     </listitem>

                     <listitem>
                        <para>Pull-down menus are used for long lists of
                        mutually exclusive options in order to save space in
                        the GUI layout. The stanza author is responsible for
                        making the decision about when a pull-down menu is
                        more appropriate than a group of radio buttons.</para>
                     </listitem>

                     <listitem>
                        <para>Check boxes are used for groups of options that
                        are not mutually exclusive.</para>
                     </listitem>
                  </itemizedlist>

                  <indexterm class="endofrange"
                             startref="index.section.viewer.launch"></indexterm>
               </section>
            </section>

            <section id="section.viewer.reboot">
               <title>Reboot Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.reboot">
                  <primary>viewers</primary>

                  <secondary>reboot</secondary>
               </indexterm>

               <para>The Reboot Viewer allows the GUI user to reboot
               individual nodes of the ensemble or all the nodes of the
               ensemble with the click of a button. When possible<footnote>
                     <para>Information about how to set up the Reboot Service
                     was provided earlier in <xref
                     linkend="section.maestrod.settings.reboot" />.</para>
                  </footnote>, the Reboot Viewer allows the GUI user to change
               the target operating system when rebooting so that it is not
               necessary to have direct access to the remote computer in order
               to change which OS it loads upon booting. This can be done for
               all nodes at once using the buttons at the top of the view
               panel, or it can be done for individual nodes. To change the
               boot target for an individual node, click on the table item
               that identifies the current OS, and a pull-down menu will be
               activated that allows the target OS to change.</para>

               <indexterm class="endofrange"
                          startref="index.section.viewer.reboot"></indexterm>
            </section>

            <section id="section.viewer.process">
               <title>Process Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.process">
                  <primary>viewers</primary>

                  <secondary>process</secondary>
               </indexterm>

               <para>The Process Viewer provides a view of all the processes
               currently running on the ensemble as well as a means to
               terminate individual processes. In conjunction with the
               Resource Viewer<indexterm>
                     <primary>viewers</primary>

                     <secondary>resource</secondary>
                  </indexterm>, users can identify errant processes can kill
               them. Since the Process Management Service<indexterm>
                     <primary>services</primary>

                     <secondary>process management</secondary>
                  </indexterm> runs on the server side with administrative
               privileges, it is possible to kill any process.</para>

               <caution>
                  <para>It is important to be careful when killing processes
                  using the Process Viewer. Users are effectively given
                  administrator privileges to end any process that they
                  choose. These being the early stages of Maestro's existence,
                  this aspect may change so that users only have access to
                  kill processes that they own.</para>
               </caution>

               <para>When first loaded, the Process Viewer displays nothing.
               To populate the process list, click the
               <guibutton>Refresh</guibutton> button. Queries will be sent to
               each of the ensemble nodes requesting the instantaneous state
               of the running processes. To update the list, click the
               <guibutton>Refresh</guibutton> button again. To kill a process,
               right-click on it and select <menuchoice>
                     <shortcut>
                        <keycap>Ctrl+T</keycap>
                     </shortcut>

                     <guimenuitem>Terminate</guimenuitem>
                  </menuchoice> from the context menu.</para>

               <indexterm class="endofrange"
                          startref="index.section.viewer.process"></indexterm>
            </section>

            <section id="section.viewer.resource">
               <title>Resource Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.resource">
                  <primary>viewers</primary>

                  <secondary>resource</secondary>
               </indexterm>

               <para>The Resource Viewer shows the current state of resource
               consumption on each of the nodes in the ensemble using graphs.
               Currently, the resources tracked are CPU and memory usage, and
               the graphs show this usage as a percentage of the total
               available. When the Resource Viewer is first loaded, it shows
               all the nodes of the ensemble in a static state. Clicking the
               <guibutton>Refresh</guibutton> button will get an instantaneous
               snapshot of the resource usage. To get continuous updates,
               right-click on a node and select the desired update rate from
               the context menu. To stop the updates, choose the
               <guimenuitem>Off</guimenuitem> item from the context
               menu.</para>

               <indexterm class="endofrange"
                          startref="index.section.viewer.resource"></indexterm>
            </section>

            <section id="section.viewer.desktop">
               <title>Desktop Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.desktop">
                  <primary>viewers</primary>

                  <secondary>desktop</secondary>
               </indexterm>

               <para>The Desktop Viewer is where users can control the state
               of screen savers and display power management on the nodes of
               the ensemble. At the top of the view, there is a pull-down menu
               listing all the nodes of the ensemble as well as an item
               labeled <guilabel>All</guilabel> indicating all ensemble nodes.
               By selecting an individual node from this menu, the screen
               saver usage can be enabled or disabled (disabling the screen
               saver implies that display power management should be
               disabled). A running screen saver can be terminated by clicking
               the <guibutton>Stop Screen Saver</guibutton> button. This
               button also has the effect of unblanking a display and waking
               up a sleeping display if power management is still active.
               After clicking this button, the screen saver and power
               management are both disabled.</para>

               <important>
                  <para>Unlocking a locked display on <productname
                  class="registered">Microsoft Windows</productname> is not
                  currently supported. Thus far, no workaround has been found
                  for this limitation, so it is important to avoid enabling
                  password protection for the screen saver of the user logged
                  on to the individual ensemble nodes running <productname
                  class="registered">Microsoft Windows</productname>. This
                  limitation does not exist on Linux as long as XScreenSaver
                  is being used by the logged on user (if a user is logged on
                  at all).</para>
               </important>

               <para>An in-development capability of the Desktop Viewer is the
               ability to change the desktop background image (also known as
               desktop wallpaper) of nodes of the ensemble. This can be useful
               in cases where it is necessary to distinguish between nodes on
               the display surface while no application is running or when it
               is necessary to get all nodes to use the same wallpaper. To
               change the wallpaper of a given node, select it from the
               pull-down menu. Then, click the <guibutton>...</guibutton>
               button to the right of the image file name field to open a file
               dialog box to choose an image file to use as the replacement
               wallpaper. The node will be told about the new image, and if
               the same path does not exist on that node, the image file will
               be transmitted to it and used as the new wallpaper
               image.</para>

               <important>
                  <para>This feature is still undergoing development and has
                  known bugs and limitations. In particular, to change the
                  wallpaper of nodes running <productname
                  class="registered">Microsoft Windows</productname>, a BMP
                  image must be used. Furthermore, it is not yet possible to
                  use something such as a solid color for the wallpaper. An
                  image has to be used.</para>
               </important>

               <indexterm class="endofrange"
                          startref="index.section.viewer.desktop"></indexterm>
            </section>

            <section id="section.viewer.settings">
               <title>Settings Viewer/Ensemble Editor</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.settings">
                  <primary>viewers</primary>

                  <secondary>settings</secondary>
               </indexterm>

               <para>The Settings Viewer allows the user to browse information
               about each of the nodes in the current ensemble. It displays
               the computer host name, its IP address, the up time, and
               low-level details about the running operating system. To see
               the information for a node, simply click on its name in the
               left panel containing the list of ensemble nodes. This viewer
               serves another purpose as the ensemble editor<indexterm>
                     <primary>ensemble</primary>

                     <secondary>editing</secondary>
                  </indexterm>. We will explain more about editing the
               ensemble in <xref linkend="section.files.ensemble" />.</para>

               <indexterm class="endofrange"
                          startref="index.section.viewer.settings"></indexterm>
            </section>

            <section>
               <title>Clone Viewer</title>

               <indexterm class="startofrange" id="index.section.viewer.clone">
                  <primary>viewers</primary>

                  <secondary>clone</secondary>
               </indexterm>

               <para>The Clone Viewer offers a way for cluster administrators
               to manage the updating of cluster nodes through a cloning
               process. This viewer requires that a node cloning/deployment
               solution already be in place. <emphasis>Maestro does not
               include cloning software itself or have any features for direct
               assistance with software deployment on a cluster</emphasis>.
               Since there are many different ways of managing a cluster
               through cloning, this viewer is designed to be extensible
               through the use of a plug-in that implements the actual details
               of running the cloning software.</para>

               <section>
                  <title>SystemImager Cloning Plug-in</title>

                  <indexterm>
                     <primary>viewers</primary>

                     <secondary>clone</secondary>

                     <tertiary>SystemImager</tertiary>

                     <see>cloning plug-ins</see>
                  </indexterm>

                  <indexterm class="startofrange"
                             id="index.section.viewer.clone.systemimager">
                     <primary>cloning plug-ins</primary>

                     <secondary>SystemImager</secondary>
                  </indexterm>

                  <para>The use of <ulink
                  url="http://www.systemimager.org/">SystemImager</ulink> for
                  <emphasis>updating</emphasis> existing cloned nodes is
                  supported by the SystemImager Cloning Plug-in. This plug-in
                  handles communication with the golden client, the image
                  server, and all the cloned client nodes. More generally,
                  this plug-in has the following features:</para>

                  <itemizedlist>
                     <listitem>
                        <para>Prepares the golden client to have its image
                        uploaded to the image server.</para>
                     </listitem>

                     <listitem>
                        <para>Pulls the golden client image to the image
                        server.</para>
                     </listitem>

                     <listitem>
                        <para>Shuts down the synchronization process on the
                        golden client to reduce the risk of unauthorized users
                        accessing the sytem image.</para>
                     </listitem>

                     <listitem>
                        <para>Pulls the image from the image server to each of
                        the cloned clients in parallel.</para>
                     </listitem>

                     <listitem>
                        <para>Runs any post-update commands on each of the
                        cloned clients.</para>
                     </listitem>
                  </itemizedlist>

                  <para>Ultimately, this plug-in just runs the SystemImager
                  client- and server-side commands
                  <command>si_prepareclient</command>,
                  <command>si_getimage</command>, and
                  <command>si_updateclient</command>. It has been tested with
                  the simple use case of SystemImager that does not use <ulink
                  url="http://sourceforge.net/projects/flamethrower/">flamethrower</ulink>,
                  <ulink url="http://www.bittorrent.com/">BitTorrent</ulink>,
                  or SSH for image deployment/installation. There is plenty of
                  room for improving this plug-in.</para>

                  <indexterm class="startofrange"
                             id="index.section.viewer.clone.systemimager.reqs">
                     <primary>cloning plug-ins</primary>

                     <secondary>SystemImager</secondary>

                     <tertiary>usage requirements</tertiary>
                  </indexterm>

                  <para>Users can customize the behavior of the SystemImager
                  Cloning Plug-in to some extent, though there are a few
                  assumptions currently made by this plug-in. These
                  assumptions impact the functionality of this plug-in (and
                  thus the Clone Viewer) in fundamental ways, so it is
                  important to understand these details. At a high level, the
                  assumptions made during the implementation of this plug-in
                  are as follows:</para>

                  <itemizedlist>
                     <listitem>
                        <para>SystemImager is already set up and ready to use
                        for updating cloned client nodes.</para>
                     </listitem>

                     <listitem>
                        <para>The user who will run the cloning process knows
                        the root password for all the nodes in the
                        cluster.</para>
                     </listitem>

                     <listitem>
                        <para>The image server is not part of the ensemble and
                        instead is accessed from the golden cllient via SSH
                        without a password.</para>
                     </listitem>

                     <listitem>
                        <para>The golden client is one of the nodes of the
                        ensemble.</para>
                     </listitem>
                  </itemizedlist>

                  <para>The first assumption comes from the fact that Maestro
                  is not designed to support all the details of node cloning.
                  It is relatively easy for Maestro to run the commands needed
                  to update a cluster through cloning, but setting up cloning
                  is a much more complex task that often involves careful
                  planning and customzation steps. With the current version of
                  SystemImager, the initial setup process is simply too
                  complicated to be automated entirely by software written by
                  a third party who has no direct knowledge of the cluster
                  where SystemImager will be installed.</para>

                  <para>The next assumption is based on the requirement of
                  SystemImager that the commands be run as the
                  <literal>root</literal> user. At a lower level, this plug-in
                  is implemented without a corresponding service plug-in on
                  the server side. Instead, it reuses the Launch
                  Service<indexterm>
                        <primary>services</primary>

                        <secondary>launch</secondary>
                     </indexterm>. Since the Launch Service only executes
                  commands as the user who gets authenticated through the
                  Maestro client GUI, the authenticated user must be
                  <literal>root</literal> in order for this plug-in to do its
                  job. While this may seem like a frustrating limitation, the
                  alternative is to have a server-side service plug-in that
                  runs the SystemImager commands as <literal>root</literal>
                  regardless of who is authenticated through Maestro.</para>

                  <para>The next assumption deals with the relationship of the
                  image server to the cluster. In general, the image server
                  will not be a node in the cluster due to various reasons
                  (not the least of which is that having the image server be
                  one of the cluster nodes complicates usage of SystemImager
                  to some extent). Since this node is not part of the cluster,
                  it will not appear in the ensemble as a node. In order to
                  pull the image from the golden client, we have to be able to
                  execute a command on the image server. This is done by
                  running <command>ssh</command> from the golden client to log
                  in to the image server and execute
                  <command>si_getimage</command>. For this to happen in a
                  convenient manner (and to work around the fact that Maestro
                  does not currently have a way to get the root password for
                  the image server to the <command>ssh</command> command), it
                  must be possible for the <literal>root</literal> user on the
                  golden client to log on to the image server as
                  <literal>root</literal> without a password. This can be
                  accomplished by setting up an RSA2 SSH key <emphasis>with no
                  passphrase</emphasis> for <literal>root</literal> on the
                  golden client and then by adding the created public key to
                  <filename>~/.ssh/authorized_keys</filename> for
                  <literal>root</literal> on the image server. To create this
                  SSH key, simply run the following as <literal>root</literal>
                  and do not enter a passphrase when prompted:</para>

                  <screen>ssh-keygen -t rsa</screen>

                  <caution>
                     <para>Allowing root logins to the image server from the
                     golden client without a password poses a security risk.
                     However, an attacker would have already had to have
                     gained root access on the cluster golden client in order
                     to be able to take advantage of this setup.</para>
                  </caution>

                  <para>The last assumption requires that the golden client be
                  one of the nodes in the ensemble. This assumption is perhaps
                  the most difficult to justify because a site with more than
                  one or two Linux-based clusters would probably have only one
                  golden client for all the clusters. For now, however, the
                  golden client must be one of the cluster nodes. A future
                  version of Maestro (one with more flexible ensemble support)
                  may remove this limitation. The golden client is identified
                  in the ensemble by including the token
                  <literal>golden</literal> in the class identifiers for that
                  node. See <xref
                  linkend="section.maestro.config.systemimager.plugin" /> and
                  <xref linkend="section.files.ensemble" /> for more
                  details.</para>

                  <para><indexterm class="endofrange"
                  startref="index.section.viewer.clone.systemimager.reqs"></indexterm><indexterm
                        class="startofrange"
                        id="index.section.viewer.clone.systemimager.use">
                        <primary>cloning plug-ins</primary>

                        <secondary>SystemImager</secondary>

                        <tertiary>usage</tertiary>
                     </indexterm></para>

                  <para>With all of that in mind, using the SytemImager
                  Cloning Plug-in is usually quite easy. Given a complete
                  configuration for the plug-in (see <xref
                  linkend="section.maestro.config.systemimager.plugin" />),
                  users can simply click the <guibutton>Clone</guibutton>
                  button and then sit back and wait for the process to
                  complete. The cloning process can be interrupted at any time
                  by clicking the <guibutton>Stop</guibutton> button. Output
                  from the individual cluster nodes is shown in the log window
                  just as it would for regular program execution via the
                  Launch Viewer<indexterm>
                        <primary>viewers</primary>

                        <secondary>launch</secondary>
                     </indexterm>. The overall progress of the cloning process
                  is displayed in the lower half of the panel for the plug-in
                  itself.</para>

                  <para>The user interface for the SystemImager Cloning
                  Plug-in allows the end user to make some adjustment to the
                  behavior of the cloning process when necessary. Specfically,
                  there are two details that can be changed through the GUI:
                  the name of the image used for cloning and the directories
                  excluded from the cloning process. The most common settings
                  for the cluster can be specified in the Maestro GUI
                  system-wide configuration file. Currently, changes made to
                  these settings are not saved to the user's Maestro GUI
                  settings file, so the changes will be lost when the GUI
                  exits.</para>

                  <indexterm class="endofrange"
                             startref="index.section.viewer.clone.systemimager.use"></indexterm>

                  <indexterm class="endofrange"
                             startref="index.section.viewer.clone.systemimager"></indexterm>

                  <indexterm class="endofrange"
                             startref="index.section.viewer.clone"></indexterm>
               </section>
            </section>
         </section>

         <section id="section.maestro.config">
            <title>Configuring the <application>Maestro
            GUI</application></title>

            <indexterm class="startofrange" id="index.section.maestro.config">
               <primary>maestro</primary>

               <secondary>configuration</secondary>

               <seealso><filename>maestro.xcfg</filename></seealso>

               <seealso><filename>maestro.xml</filename></seealso>
            </indexterm>

            <para>The <application>Maestro GUI</application> can be configured
            using a system-wide configuration file and a user-specific
            configuration file. The system-wide configuration file will be
            <filename>/etc/maestro.xcfg</filename><indexterm>
                  <primary><filename>maestro.xcfg</filename></primary>
               </indexterm> on Linux and <filename>maestro.xcfg</filename>
            under the Maestro installation directory (e.g.,
            <filename>C:\Program Files\Infiscape\Maestro 1.0.0</filename>) on
            <productname class="registered">Microsoft Windows</productname>.
            The user-specific configuration file will be
            <filename>$HOME/.maestro/maestro.xml</filename><indexterm>
                  <primary><filename>maestro.xml</filename></primary>
               </indexterm> on Linux and
            <filename>%APPDATA%\Maestro\maestro.xml</filename> or
            <filename>%USERPROFILE%\Application
            Data\Maestro\maestro.xml</filename> on <productname
            class="registered">Microsoft Windows</productname>.</para>

            <para>If both the system-wide <filename>maestro.xcfg</filename>
            and the user-specific <filename>maestro.xml</filename> are
            present, the two collections of settings are merged (conceptually)
            at run time with the user-specific settings taking precedence.
            This means that the user can override <emphasis>any</emphasis>
            system-wide settings from <filename>maestro.xcfg</filename> in his
            or her <filename>maestro.xml</filename> file. This capability
            should be used with care.</para>

            <para>Both <application>Maestro GUI</application> settings files
            can reference environment variables as part of path names. This is
            done using the syntax of UNIX shells. For example, using
            <literal>${MY_ENV_VAR}</literal> would look up the environment
            variable <envar>MY_ENV_VAR</envar> in the runtime environment of
            the <application>Maestro GUI</application>. This means that
            <envar>MY_ENV_VAR</envar> must be set when the
            <application>Maestro GUI</application> is launched.</para>

            <section id="section.maestro.config.system">
               <title>System-Wide <application>Maestro GUI</application>
               Settings</title>

               <para>The system-wide <application>Maestro GUI</application>
               settings file will usually contain two key pieces of
               information: a site-specific stanza search path<indexterm>
                     <primary>stanza</primary>

                     <secondary>search path</secondary>

                     <tertiary>site</tertiary>
                  </indexterm> and a site-specific default ensemble<indexterm>
                     <primary>ensemble</primary>

                     <secondary>default</secondary>

                     <tertiary>site</tertiary>
                  </indexterm>. Both of these settings are optional, and there
               is no default value for either if they are not present. Refer
               back to <xref linkend="section.stanza.search.path" /> for more
               information about the default stanza search path and to <xref
               linkend="section.gui.command.line.options" /> and <xref
               linkend="section.gui.ensemble.load" /> for the handling of
               ensemble files.</para>

               <para>The site-specific stanza search path will be used to
               extend the default stanza search path for all users of the
               <application>Maestro GUI</application>. It is set using the
               <sgmltag>&lt;site_stanza_path&gt;</sgmltag><indexterm>
                     <primary><filename>maestro.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;site_stanza_path&gt;</sgmltag></tertiary>
                  </indexterm><indexterm>
                     <primary><filename>maestro.xml</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;site_stanza_path&gt;</sgmltag></tertiary>
                  </indexterm> XML tag, the value of which is a
               platform-specific list of directories separated by the
               platform-specific path separator character
               (<literal>;</literal> on <productname
               class="registered">Microsoft Windows</productname> and
               <literal>:</literal> on all other platforms).</para>

               <para>The default ensemble setting identifies an ensemble file
               that should be loaded by default when the <application>Maestro
               GUI</application> is launched unless one is named explicitly
               using the <option>-e/--ensemble</option> command line option.
               The default ensemble file is named using a platform-specific
               path in the
               <sgmltag>&lt;default_ensemble&gt;</sgmltag><indexterm>
                     <primary><filename>maestro.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;default_ensemble&gt;</sgmltag></tertiary>
                  </indexterm><indexterm>
                     <primary><filename>maestro.xml</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;default_ensemble&gt;</sgmltag></tertiary>
                  </indexterm> XML tag.</para>

               <para>Below, we show example <filename>maestro.xcfg</filename>
               files. The first, <xref
               linkend="example.maestro.gui.config.site.unix" />, is for a
               non-Windows platform. In this case, the directories
               <filename>/usr/local/maestro/stanzas</filename> and
               <filename>/opt/software/stanzas</filename> will be searched
               before the directories in the default stanza search path.
               Secondly, the default ensemble file that will be loaded is
               <filename>/usr/local/maestro/site.ensemble</filename>. The
               second file, shown in <xref
               linkend="example.maestro.gui.config.site.windows" />, is for a
               <productname class="registered">Microsoft Windows</productname>
               installation, and the ideas are the same; only the paths have
               changed.</para>

               <example id="example.maestro.gui.config.site.unix">
                  <title>Sample <filename>maestro.xcfg</filename> for a
                  non-<productname class="registered">Windows</productname>
                  Platform</title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestro&gt;
   &lt;site_stanza_path&gt;
      /usr/local/maestro/stanzas:/opt/software/stanzas
   &lt;/site_stanza_path&gt;
   &lt;default_ensemble&gt;
      /usr/local/maestro/site.ensemble
   &lt;/default_ensemble&gt;
&lt;/maestro&gt;</programlisting>
               </example>

               <example id="example.maestro.gui.config.site.windows">
                  <title>Sample <filename>maestro.xcfg</filename> for
                  <productname class="registered">Microsoft
                  Windows</productname></title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestro&gt;
   &lt;site_stanza_path&gt;
      Z:\maestro\stanzas;X:\software\stanzas
   &lt;/site_stanza_path&gt;
   &lt;default_ensemble&gt;
      Z:\maestro\site.ensemble
   &lt;/default_ensemble&gt;
&lt;/maestro&gt;</programlisting>
               </example>
            </section>

            <section id="section.maestro.config.user">
               <title>User-Specific <application>Maestro GUI</application>
               Settings</title>

               <para>As we noted earlier, the system-wide and user-specific
               <application>Maestro GUI</application> configuration files are
               merged into one at run time with the user settings taking
               precedence over system-wide settings. This means that the
               user-specific <application>Maestro GUI</application> file can
               contain the same XML tags as the system-wide file. In this
               subsection, we explain how to utilize this feature to extend
               and override system-wide settings and to control behavior of
               the <application>Maestro GUI</application> that would usually
               not be appropriate for system-wide settings.</para>

               <sidebar>
                  <para>Recall that the user-specific <application>Maestro
                  GUI</application> settings are in a file named maestro.xml
                  that is located in a platform-specific directory. For
                  Microsoft Windows, the file is either
                  <filename>%APPDATA%\Maestro\maestro.xml</filename> or
                  <filename>%USERPROFILE%\Application
                  Data\Maestro\maestro.xml</filename>. For Mac OS X, the file
                  is <filename>$HOME/Library/Application
                  Support/maestro.xml</filename>. For all other platforms, it
                  is <filename>$HOME/.maestro/maestro.xml</filename>.</para>
               </sidebar>

               <para>The first user-specific setting that we will examine is
               the user-defined stanza search path. If set, this list of
               directories is the <emphasis>first</emphasis> searched when
               scanning for <filename>.stanza</filename> files (refer back to
               <xref linkend="section.stanza.search.path" /> for more
               details). The user-defined stanza search path is set using the
               <sgmltag>&lt;user_stanza_path&gt;</sgmltag><indexterm>
                     <primary><filename>maestro.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;user_stanza_path&gt;</sgmltag></tertiary>
                  </indexterm><indexterm>
                     <primary><filename>maestro.xml</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;user_stanza_path&gt;</sgmltag></tertiary>
                  </indexterm> XML tag, the value of which is a
               platform-specific list of directories separated by the
               platform-specific path separator character
               (<literal>;</literal> on <productname
               class="registered">Microsoft Windows</productname> and
               <literal>:</literal> on all other platforms). A convenient use
               of this setting is when several applications are being
               developed in the user's home directory. While the
               <filename>.stanza</filename> files for the applications could
               be found using the <envar>STANZA_PATH</envar> environment
               variable or the <option>-s/--stanza</option> command line
               option, this setting would tend to be more practical for a
               sufficiently large number of application directories to
               scan.</para>

               <para>In some cases, the user may wish to prevent the
               <application>Maestro GUI</application> from scanning
               directories for <filename>.stanza</filename> files. This can be
               accomplished by overriding the system-wide stanza search path
               and/or by preventing the scanning the default stanza search
               path. In the user-specific settings, the
               <sgmltag>&lt;site_stanza_path&gt;</sgmltag><indexterm>
                     <primary><filename>maestro.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;site_stanza_path&gt;</sgmltag></tertiary>
                  </indexterm><indexterm>
                     <primary><filename>maestro.xml</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;site_stanza_path&gt;</sgmltag></tertiary>
                  </indexterm> XML tag can be set to have no value,
               effectively wiping out the system-wide stanza search path for
               the use<footnote>
                     <para>Remember that these per-user settings, and one
                     user's <filename>maestro.xml</filename> file does not
                     interfere with another's.</para>
                  </footnote>. To prevent the default stanza search path from
               being scanned, the user can set the value of the
               <sgmltag>&lt;use_builtin_stanza_path&gt;</sgmltag><indexterm>
                     <primary><filename>maestro.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;use_builtin_stanza_path&gt;</sgmltag></tertiary>
                  </indexterm><indexterm>
                     <primary><filename>maestro.xml</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;use_builtin_stanza_path&gt;</sgmltag></tertiary>
                  </indexterm> XML tag to the value of
               <literal>false</literal> or <literal>0</literal><footnote>
                     <para>The
                     <sgmltag>&lt;use_builtin_stanza_path&gt;</sgmltag> XML
                     tag could also be used in
                     <filename>maestro.xcfg</filename>, but it might not
                     always be a good idea to prevent scanning the default
                     stanza path on a system-wide basis.</para>
                  </footnote>. By taking both of these steps, the user can
               limit the stanza search path to the user-defined search path
               and the directories listed in <envar>STANZA_PATH</envar> (if
               any). An example of this is shown in <xref
               linkend="example.maestro.gui.config.user.unix" />.</para>

               <example id="example.maestro.gui.config.user.unix">
                  <title>Sample <filename>maestro.xml</filename> for a
                  non-<productname class="registered">Windows</productname>
                  Platform</title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestro&gt;
   &lt;user_stanza_path&gt;
      ${HOME}/.maestro/stanzas:${HOME}/src/vrj-apps
   &lt;/user_stanza_path&gt;
   &lt;site_stanza_path /&gt;
   &lt;use_builtin_stanza_path&gt;false&lt;/use_builtin_stanza_path&gt;
&lt;/maestro&gt;</programlisting>
               </example>

               <para>The user-specific <application>Maestro GUI</application>
               settings can also change the system-wide default ensemble file
               by setting a value for the
               <sgmltag>&lt;default_ensemble&gt;</sgmltag><indexterm>
                     <primary><filename>maestro.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;default_ensemble&gt;</sgmltag></tertiary>
                  </indexterm><indexterm>
                     <primary><filename>maestro.xml</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;default_ensemble&gt;</sgmltag></tertiary>
                  </indexterm> XML tag.</para>

               <para>Finally, the <application>Maestro GUI</application> has
               three settings that fall under the category of <quote>user
               preferences</quote>: the user skill level, the directory where
               the log files get stored during execution, and whether to
               delete these log files when the GUI exits. The GUI does not yet
               provide a graphical means to edit these preferences, so users
               must edit <filename>maestro.xml</filename> by hand. An example
               version of this file is shown in <xref
               linkend="example.maestro.gui.config" />.</para>

               <indexterm>
                  <primary><filename>maestro.xml</filename></primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;maestro&gt;</sgmltag></tertiary>
               </indexterm>

               <example id="example.maestro.gui.config">
                  <title>Sample <filename>maestro.xml</filename> for User
                  Preferences</title>

                  <programlisting>&lt;?xml version="1.0"?&gt;
&lt;maestro&gt;
   &lt;logdir&gt;/var/tmp&lt;/logdir&gt;
   &lt;clean_logfiles&gt;true&lt;/clean_logfiles&gt;
&lt;/maestro&gt;</programlisting>
               </example>

               <para>This example demonstrates a key aspect of the
               <application>Maestro GUI</application> configuration. Namely,
               the lack of a setting (in this case, the user skill level) is
               not a problem. Reasonable defaults exist for the current
               settings, and there is not usually a need to override the
               defaults by adding to this file. The defaults for the settings
               are as follows:</para>

               <itemizedlist>
                  <listitem>
                     <para><literal>logdir</literal><indexterm>
                           <primary><filename>maestro.xml</filename></primary>

                           <secondary>elements</secondary>

                           <tertiary><sgmltag>&lt;logdir&gt;</sgmltag></tertiary>
                        </indexterm>: The platform-specific home directory of
                     the user running the <application>Maestro
                     GUI</application></para>
                  </listitem>

                  <listitem>
                     <para><literal>clean_logfiles</literal><indexterm>
                           <primary><filename>maestro.xml</filename></primary>

                           <secondary>elements</secondary>

                           <tertiary><sgmltag>&lt;clean_logfiles&gt;</sgmltag></tertiary>
                        </indexterm>: <literal>true</literal></para>
                  </listitem>

                  <listitem>
                     <para><literal>user_mode</literal><indexterm>
                           <primary><filename>maestro.xml</filename></primary>

                           <secondary>elements</secondary>

                           <tertiary><sgmltag>&lt;user_mode&gt;</sgmltag></tertiary>
                        </indexterm>: <literal>100</literal> (meaning
                     novice)</para>
                  </listitem>
               </itemizedlist>
            </section>

            <section>
               <title>Configuring the Clone Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.clone.config">
                  <primary>viewers</primary>

                  <secondary>clone</secondary>

                  <tertiary>configuration</tertiary>
               </indexterm>

               <para>Configuring the Clone Viewer involves two pieces:
               identifying the cloning plug-in to use and configuring the
               cloning plug-in (if necessary). Identifying the cloning plug-in
               means changing the CDATA value of the XML element
               <sgmltag>&lt;clone_view&gt;</sgmltag><indexterm>
                     <primary><filename>maestro.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;clone_view&gt;</sgmltag></tertiary>
                  </indexterm><indexterm>
                     <primary><filename>maestro.xml</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;clone_view&gt;</sgmltag></tertiary>
                  </indexterm> under the root
               <sgmltag>&lt;maestro&gt;</sgmltag> node so that it identifies
               the Python class to be instantiated. This XML element can
               appear in either the system-wide GUI configuration file or in
               the user's personal GUI configuration file.</para>

               <section id="section.maestro.config.systemimager.plugin">
                  <title>Configuring the SystemImager Cloning Plug-in</title>

                  <indexterm class="startofrange"
                             id="index.section.viewer.clone.systemimager.config">
                     <primary>cloning plug-ins</primary>

                     <secondary>SystemImager</secondary>

                     <tertiary>configuration</tertiary>
                  </indexterm>

                  <highlights>
                     <para>Below is a quick overview of the configuration
                     information associated with the SystemImager Cloning
                     Plug-in:</para>

                     <itemizedlist>
                        <listitem>
                           <para>Python class (for the
                           <sgmltag>&lt;clone_view&gt;</sgmltag> element):
                           <classname>views.clone.systemimager.SystemImager</classname></para>
                        </listitem>

                        <listitem>
                           <para>Root XML element:
                           <sgmltag>&lt;systemimager&gt;</sgmltag></para>
                        </listitem>

                        <listitem>
                           <para>Required children of root XML element:</para>

                           <itemizedlist>
                              <listitem>
                                 <para><sgmltag>&lt;image&gt;</sgmltag>: Identifies
                                 the name of the image in its CDATA</para>
                              </listitem>

                              <listitem>
                                 <para><sgmltag>&lt;image_server&gt;</sgmltag>:
                                 Identifies the image server in the CDATA of its
                                 <sgmltag>&lt;name&gt;</sgmltag> child; allows
                                 addition of arguments to the
                                 <command>si_getimage</command> command through its
                                 <sgmltag>&lt;cmd_args&gt;</sgmltag> child</para>
                              </listitem>
                           </itemizedlist>
                        </listitem>

                        <listitem>
                           <para>Other children of the root XML element:</para>

                           <itemizedlist>
                              <listitem>
                                 <para><sgmltag>&lt;golden_client&gt;</sgmltag>:
                                 Allows addition of arguments to the
                                 <command>si_prepareclient</command> command through
                                 its <sgmltag>&lt;prep_cmd_args&gt;</sgmltag> child;
                                 allows for specification of commands to be executed
                                 before and after cloning through its
                                 <sgmltag>&lt;pre_clone_cmds&gt;</sgmltag> and
                                 <sgmltag>&lt;post_clone_cmds&gt;</sgmltag>
                                 children</para>
                              </listitem>

                              <listitem>
                                 <para><sgmltag>&lt;cloned_client&gt;</sgmltag>:
                                 Allows for specification of commands to be executed
                                 before and after cloning through its
                                 <sgmltag>&lt;pre_clone_cmds&gt;</sgmltag> and
                                 <sgmltag>&lt;post_clone_cmds&gt;</sgmltag>
                                 children</para>
                              </listitem>

                              <listitem>
                                 <para><sgmltag>&lt;exclusions&gt;</sgmltag>: Lists
                                 files and/or directories to be excluded from the
                                 cloning process</para>
                              </listitem>
                           </itemizedlist>
                        </listitem>

                        <listitem>
                           <para>The golden client is identified using the
                           class token <literal>golden</literal> in the
                           ensemble</para>
                        </listitem>
                     </itemizedlist>
                  </highlights>

                  <para>The SystemImager Cloning Plug-in has a large
                  collection of configurable parameters. The intention is to
                  make this plug-in adapt well to variations in the use of
                  SystemImager. All parameters are children of the root XML
                  element <sgmltag>&lt;systemimager&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;systemimager&gt;</sgmltag></tertiary>
                     </indexterm>, and only the system-wide Maestro GUI
                  configuration file is examined for these settings. This is
                  because the plug-in requires root authentication on all
                  nodes of the cluster and the image server. Allowing users to
                  override these settings poses a major security risk<footnote>
                        <para>Of course, the use of the SystemImager Cloning
                        Plug-in requires root access to be used with any
                        efficacy. If an untrusted user already knows the root
                        password for the cluster nodes, then there are bigger
                        problems afoot. Nevertheless, this plug-in would
                        provide a nice springboard for a malicious user to
                        wreak havoc on a cluster with a single button
                        click.</para>
                     </footnote>.</para>

                  <para>The &lt;systemimager&gt;<indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;systemimager&gt;</sgmltag></tertiary>
                     </indexterm> XML tag has two required children:
                  <sgmltag>&lt;image&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;image&gt;</sgmltag></tertiary>
                     </indexterm> and
                  <sgmltag>&lt;image_server&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;image_server&gt;</sgmltag></tertiary>
                     </indexterm>. The first identifies the name of the image
                  to be used for the cloning process through its CDATA
                  (leading and trailing whitespace is ignored). In general, a
                  system administrator will probably have only one such image
                  for a cluster, but the GUI user can change the image name
                  temporarily.</para>

                  <para>The <sgmltag>&lt;image_server&gt;</sgmltag> element
                  has child elements of its own. The first,
                  <sgmltag>&lt;name&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;name&gt;</sgmltag></tertiary>
                     </indexterm>, is required as it identifies the name
                  (either the host name or the IP address) of the image
                  server. This value will be used repeatedly during the
                  cloning process since every node in the cluster needs to
                  know the name of the image server. Moreover, it is used for
                  communicating with the image server to run the
                  <command>si_getimage</command> command.</para>

                  <para>The second child of the
                  <sgmltag>&lt;image_server&gt;</sgmltag> element is optional.
                  It is <sgmltag>&lt;cmd_args&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;cmd_args&gt;</sgmltag></tertiary>
                     </indexterm>, and its
                  <sgmltag>&lt;arg&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;arg&gt;</sgmltag></tertiary>
                     </indexterm> children identify additional arguments to be
                  passed to the <command>si_getimage</command> command when it
                  is executed on the image server (via SSH). Without any
                  additional arguments specified in
                  <filename>maestro.xcfg</filename>,
                  <command>si_getimage</command> is run with the arguments
                  <option>--quiet</option>, <option>--golden-client</option>,
                  and <option>--image</option> (with appropriate values for
                  the name of the golden client and the image). Each argument
                  must be specified as a separate
                  <sgmltag>&lt;arg&gt;</sgmltag> child element. Arguments that
                  are made up of a flag and a value (such as
                  <option>--update-script NO</option>) will utilize the
                  <literal>flag</literal> attribute and the CDATA of the
                  <sgmltag>&lt;arg&gt;</sgmltag> XML element. An example of
                  specifying additional arguments for
                  <command>si_getimage</command> is shown in <xref
                  linkend="example.maestro.xcfg.systemimager1" />.</para>

                  <example id="example.maestro.xcfg.systemimager1">
                     <title>System-Wide <filename>maestro.xcfg</filename> for
                     SystemImager Image Server</title>

                     <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestro&gt;
   &lt;clone_view&gt;
      views.clone.systemimager.SystemImager
   &lt;/clone_view&gt;
   &lt;systemimager&gt;
      &lt;image&gt;
         my_cluster_image
      &lt;/image&gt;
      &lt;image_server&gt;
         &lt;name&gt;
            imgserver.example.com
         &lt;/name&gt;
         &lt;cmd_args&gt;
            &lt;arg flag="--quiet"/&gt;
            &lt;arg flag="--update-script"&gt;NO&lt;/arg&gt;
            &lt;arg flag="--ip-assignment"&gt;static&lt;/arg&gt;
            &lt;arg flag="--directory"&gt;
               /host/server.example.com/si
            &lt;/arg&gt;
         &lt;/cmd_args&gt;
      &lt;/image_server&gt;
   &lt;/systemimager&gt;
&lt;/maestro&gt;</programlisting>
                  </example>

                  <para>Once the required information about the image is set,
                  we can customize the behavior of this cloning plug-in
                  further by adding files and/or directories to be excluded
                  from the cloning process. These settings end up being passed
                  as <option>--exclude</option> options to
                  <command>si_getimage</command>. Exclusions are collected
                  under the <sgmltag>&lt;exclusions&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;exclusions&gt;</sgmltag></tertiary>
                     </indexterm> child of the
                  <sgmltag>&lt;systemimager&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;systemimager&gt;</sgmltag></tertiary>
                     </indexterm> XML element. Each exclusion is identified
                  using the CDATA of the
                  <sgmltag>&lt;exclude&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;exclude&gt;</sgmltag></tertiary>
                     </indexterm> element (with leading and trailing
                  whitespace stripped), as shown in <xref
                  linkend="example.maestro.xcfg.systemimager2" />. The syntax
                  for these values is exactly the same as what is used for the
                  <option>--exclude</option> option to
                  <command>si_getimage</command>.</para>

                  <example id="example.maestro.xcfg.systemimager2">
                     <title>System-Wide <filename>maestro.xcfg</filename> for
                     SystemImager Cloning Exclusions</title>

                     <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestro&gt;
   &lt;clone_view&gt;
      views.clone.systemimager.SystemImager
   &lt;/clone_view&gt;
   &lt;systemimager&gt;
      &lt;!-- Image server settings omitted. --&gt;
      &lt;exclusions&gt;
         &lt;exclude&gt;/media&lt;/exclude&gt;
         &lt;exclude&gt;/tmp&lt;/exclude&gt;
         &lt;exclude&gt;/var/tmp&lt;/exclude&gt;
         &lt;exclude&gt;/var/run/*&lt;/exclude&gt;
         &lt;exclude&gt;/var/cache/yum&lt;/exclude&gt;
      &lt;/exclusions&gt;
   &lt;/systemimager&gt;
&lt;/maestro&gt;</programlisting>
                  </example>

                  <para>Next, we can customize what is run on the golden
                  client using the
                  <sgmltag>&lt;golden_client&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;golden_client&gt;</sgmltag></tertiary>
                     </indexterm> child of the
                  <sgmltag>&lt;systemimager&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;systemimager&gt;</sgmltag></tertiary>
                     </indexterm> element. The most useful will be adding
                  options to be passed to the command
                  <command>si_prepareclient</command> when it is run on the
                  golden client. This is done using the
                  <sgmltag>&lt;prep_cmd_args&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;prep_cmd_args&gt;</sgmltag></tertiary>
                     </indexterm> child of
                  <sgmltag>&lt;golden_client&gt;</sgmltag>. Its
                  <sgmltag>&lt;arg&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;arg&gt;</sgmltag></tertiary>
                     </indexterm> children identify additional arguments to be
                  passed to the <command>si_prepareclient</command> command.
                  Without any additional arguments specified in
                  <filename>maestro.xcfg</filename>,
                  <command>si_prepareclient</command> is run with the
                  arguments <option>--yes</option> and
                  <option>--server</option> (with the appropriate value for
                  the name of the image server). Each argument must be
                  specified as a separate <sgmltag>&lt;arg&gt;</sgmltag> child
                  element. Arguments that are made up of a flag and a value
                  (such as <option>--exclude /dev/sdX</option>) will utilize
                  the <literal>flag</literal> attribute and the CDATA of the
                  <sgmltag>&lt;arg&gt;</sgmltag> XML element. The structure of
                  these <sgmltag>&lt;arg&gt;</sgmltag> elements is the same as
                  what is used for the
                  <sgmltag>&lt;cmd_args&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;cmd_args&gt;</sgmltag></tertiary>
                     </indexterm> element for adding options to
                  <command>si_getimage</command> (see <xref
                  linkend="example.maestro.xcfg.systemimager1" />).</para>

                  <para>Additional commands to execute on the golden client
                  before and after cloning can be provided under the
                  <sgmltag>&lt;golden_client&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;golden_client&gt;</sgmltag></tertiary>
                     </indexterm> node's children
                  <sgmltag>&lt;pre_clone_cmds&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;pre_clone_cmds&gt;</sgmltag></tertiary>
                     </indexterm> and
                  <sgmltag>&lt;post_clone_cmds&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;post_clone_cmds&gt;</sgmltag></tertiary>
                     </indexterm> respectively. The pre-clone commands are
                  executed before <command>si_prepareclient</command> is
                  executed, and the post-clone commands are executed after
                  <command>si_updateclient</command> completes successfully on
                  all the cloned clients. The commands are described using the
                  <sgmltag>&lt;command&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;command&gt;</sgmltag></tertiary>
                     </indexterm> element which has three children:
                  <sgmltag>&lt;cmd&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;cmd&gt;</sgmltag></tertiary>
                     </indexterm>, <sgmltag>&lt;arg&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;arg&gt;</sgmltag></tertiary>
                     </indexterm>, and
                  <sgmltag>&lt;cwd&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;cwd&gt;</sgmltag></tertiary>
                     </indexterm>. Only <sgmltag>&lt;cmd&gt;</sgmltag> is
                  required as it specifies what the actual command to be run
                  is. For the sake of safety and simplicity, it is best to use
                  an absolute path to the command. After that, there can be
                  zero or more &lt;arg&gt; elements which are used in exactly
                  the same manner as other instances of this element type.
                  Finally, <sgmltag>&lt;cwd&gt;</sgmltag> allows an explicit
                  current working directory to be set for the command
                  execution through its CDATA (leading and trailing whitespace
                  are stripped). If the current working directory is not
                  given, it defaults to the current working directory of
                  <command>maestrod</command>.</para>

                  <para>Finally, we can customize pre- and post-clone commands
                  to be executed on the cloned clients (those in the ensemble
                  that are not the golden client). This uses the same
                  <sgmltag>&lt;pre_clone_cmds&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;pre_clone_cmds&gt;</sgmltag></tertiary>
                     </indexterm> and
                  <sgmltag>&lt;post_clone_cmds&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;post_clone_cmds&gt;</sgmltag></tertiary>
                     </indexterm> XML elements, though in this case they are
                  children of the
                  <sgmltag>&lt;cloned_client&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;cloned_client&gt;</sgmltag></tertiary>
                     </indexterm> element. The pre-clone commands are executed
                  before <command>si_prepareclient</command> is run on the
                  golden client, and the post-clone commands are run after
                  <command>si_updateclient</command> completes successfully.
                  These use the same
                  <sgmltag>&lt;command&gt;</sgmltag><indexterm>
                        <primary><filename>maestro.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;command&gt;</sgmltag></tertiary>
                     </indexterm> element as in the case of the golden client
                  with the same structure.</para>

                  <note>
                     <para>The list of pre- and post-clone commands is
                     executed sequentially based on the order in
                     <filename>maestro.xcfg</filename>, though they each
                     command is started on all the cloned clients at the same
                     time. If one of the commands is to pull a lot of data
                     from a file server, then all the nodes of the ensemble
                     except the golden client will be performing that
                     operation at the same time.</para>
                  </note>

                  <example id="example.maestro.xcfg.systemimager3">
                     <title>System-Wide <filename>maestro.xcfg</filename> for
                     SystemImager Post-Cloning Commands</title>

                     <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestro&gt;
   &lt;clone_view&gt;
      views.clone.systemimager.SystemImager
   &lt;/clone_view&gt;
   &lt;systemimager&gt;
      &lt;!-- Other settings omitted. --&gt;
      &lt;cloned_client&gt;
         &lt;post_clone_cmds&gt;
            &lt;command&gt;
               &lt;cmd&gt;/sbin/chkconfig&lt;/cmd&gt;
               &lt;arg flag="kudzu"&gt;off&lt;/arg&gt;
            &lt;/command&gt;
            &lt;command&gt;
               &lt;cmd&gt;/sbin/chkconfig&lt;/cmd&gt;
               &lt;arg flag="rhnsd"&gt;off&lt;/arg&gt;
            &lt;/command&gt;
         &lt;/post_clone_cmds&gt;
      &lt;/cloned_client&gt;
   &lt;/systemimager&gt;
&lt;/maestro&gt;</programlisting>
                  </example>

                  <important>
                     <para>Remember that <emphasis>all</emphasis> commands
                     executed as part of the cloning process (including pre-
                     and post-clone commands) are run as the
                     <literal>root</literal> user. Be very careful about what
                     is set up for custom execution!</para>
                  </important>

                  <indexterm class="endofrange"
                             startref="index.section.viewer.clone.systemimager.config"></indexterm>

                  <indexterm class="endofrange"
                             startref="index.section.viewer.clone.config"></indexterm>

                  <indexterm class="endofrange"
                             startref="index.section.maestro.config"></indexterm>
               </section>
            </section>
         </section>
      </section>
   </chapter>

   <chapter id="chapter.maestro.files">
      <title>Maestro Files</title>

      <para>Aside from preferences or configuration files, there are two data
      files utilized by Maestro: ensembles and stanzas. These files were
      introduced earlier in <xref linkend="section.usage.gui" />, and we go
      into more detail about their use and how to edit them in this chapter.
      These files are loaded by the <application>Maestro GUI</application>, so
      all users of the <application>Maestro GUI</application> will have some
      interaction with them. However, not all users will have to know how
      interpret or edit the contents of these files. We explain more in the
      following sections.</para>

      <section id="section.files.ensemble">
         <title>Ensembles</title>

         <indexterm class="startofrange" id="index.file.ensemble">
            <primary>ensemble</primary>

            <secondary>file</secondary>
         </indexterm>

         <para>Ensemble files (having the extension
         <filename>.ensem</filename> or <filename>.ensemble</filename>)
         identify the nodes of a cluster. When the <application>Maestro
         GUI</application> loads an ensemble file, it tries to connect to the
         <command>maestrod</command> process running on each of the identified
         nodes. The structure of these files is very simple, and the example
         included with the Maestro source is shown in <xref
         linkend="example.maestro.ensemble" />. The root XML node must be
         <sgmltag>&lt;ensemble&gt;</sgmltag><indexterm>
               <primary>ensemble</primary>

               <secondary>elements</secondary>

               <tertiary><sgmltag>&lt;ensemble&gt;</sgmltag></tertiary>
            </indexterm>, and it has one level child nodes that are
         <sgmltag>&lt;cluster_node&gt;</sgmltag><indexterm>
               <primary>ensemble</primary>

               <secondary>elements</secondary>

               <tertiary><sgmltag>&lt;cluster_node&gt;</sgmltag></tertiary>
            </indexterm> elements. The <sgmltag>&lt;cluster_node&gt;</sgmltag>
         elements have three attributes: <literal>class</literal>,
         <literal>hostname</literal>, and <literal>name</literal>. The
         <literal>class</literal> is a comma-separated list of identifiers
         indicating the role of the node in the cluster, and it comes into
         play with the stanzas and application launching. Common values are
         <literal>master</literal> or <literal>slave</literal><indexterm>
               <primary>ensemble</primary>

               <secondary>class</secondary>

               <tertiary>master/slave</tertiary>
            </indexterm>. By default, every node in the ensemble has its
         operating system name as part of its class, so this need not (and
         should not) be specified in the ensemble file. The
         <literal>hostname</literal> is the IP address or machine name for the
         node. This is what the <application>Maestro GUI</application> uses
         for making the connection to the remote node. Finally, the
         <literal>name</literal> is a <quote>friendly</quote> identifier for
         the node that is used whenever the nodes of the ensemble are
         displayed in the <application>Maestro GUI</application>.</para>

         <example id="example.maestro.ensemble">
            <title>Maestro Ensemble</title>

            <programlisting>&lt;?xml version="1.0"?&gt;
&lt;ensemble&gt;
   &lt;cluster_node class="" hostname="node0" name="Node 0" /&gt;
   &lt;cluster_node class="" hostname="node1" name="Node 1" /&gt;
&lt;/ensemble&gt;</programlisting>
         </example>

         <indexterm class="startofrange" id="index.file.ensemble.edit">
            <primary>ensemble</primary>

            <secondary>file</secondary>

            <tertiary>editing</tertiary>
         </indexterm>

         <para>Ensemble files can be edited by hand using a text editor or by
         using the <application>Maestro GUI</application>'s ensemble editor.
         This editor is integrated into the Ensemble Viewer (first introduced
         in <xref linkend="section.viewer.settings" />). This viewer has
         controls for adding nodes to and removing nodes from the loaded
         ensemble. After making edits to the ensemble, it can be saved using
         the <menuchoice>
               <guimenu>File</guimenu>

               <guimenuitem>Save Ensemble</guimenuitem>
            </menuchoice> menu item.</para>

         <indexterm class="endofrange" startref="index.file.ensemble.edit"></indexterm>

         <para>Generally, an ensemble would be edited once per cluster when
         setting up Maestro for use with that cluster. An administrator would
         put the ensemble file in a place that is convenient for accessing by
         all users of the cluster. At this time, the <application>Maestro
         GUI</application> does not have a way to name a default ensemble to
         load, but this capability will be added in a future release.</para>

         <indexterm class="endofrange" startref="index.file.ensemble"></indexterm>
      </section>

      <section id="section.files.stanza">
         <title>Stanzas</title>

         <indexterm class="startofrange" id="index.file.stanza">
            <primary>stanza</primary>

            <secondary>file</secondary>
         </indexterm>

         <para>The other type of file utilized by the <application>Maestro
         GUI</application> is known as a stanza. Every application that can be
         launched by Maestro must be described using a stanza. Stanzas are
         discovered dynamically when the <application>Maestro
         GUI</application> is launched or by using the
         <option>--stanza</option> command line option.</para>

         <para>Stanza files are XML files, and their structure is quite
         complex. They have a high degree of flexibility that allows
         arbitrarily deep nesting and references to external stanzas. Due to
         their complexity, we refrain from going into detail about the format
         here and instead concentrate on how to use the stanza editor.</para>

         <indexterm class="startofrange" id="index.file.stanza.edit">
            <primary>stanza</primary>

            <secondary>file</secondary>

            <tertiary>editing</tertiary>
         </indexterm>

         <para>The stanza editor is one of the <application>Maestro
         GUI</application> viewer plug-ins. It is currently the only viewer
         that does not have a corresponding service since it does not do
         anything with the ensemble. Thus, it is not necessary to have an
         ensemble loaded in order to edit stanza files. There are two items in
         the <guimenu>File</guimenu> menu related to stanza editing:
         <menuchoice>
               <guimenu>File</guimenu>

               <guimenuitem>Load Stanza</guimenuitem>
            </menuchoice> and <menuchoice>
               <guimenu>File</guimenu>

               <guimenuitem>Save All Stanzas</guimenuitem>
            </menuchoice>. The stanza editor itself contains a button
         <guibutton>New Application</guibutton> for creating a new application
         stanza from scratch.</para>

         <para>Since stanzas describe a hierarchy of options and environment
         variables, the idea behind the editor is to represent that hierarchy
         in an understandable yet powerful manner. A simple graph structure is
         used to achieve this. The parent/child relationships are represented
         by arrows between nodes of the graph. Each node of the graph
         represents an XML element, and the attributes of the XML element are
         editable in the dockable panel at the bottom of the stanza editor.
         This panel is dockable so that it can be detached from the
         <application>Maestro GUI</application> and resized independently as
         necessary.</para>

         <para>Application developers would create a stanza file for their
         application when the application is deployed for use at a site that
         is already running Maestro. The site-specific details (such as what
         VR Juggler configuration to load) can be referenced by a stanza, but
         in general, a stanza file for an application will vary from one site
         and one cluster to another. Since the variation is captured in the
         stanza file, however, it is much easier to deploy cluster-ready
         applications than writing a custom launch solution for each
         site.</para>

         <indexterm class="endofrange" startref="index.file.stanza.edit"></indexterm>

         <section id="section.stanza.items">
            <title>Stanza Items</title>

            <para>Stanza items are objects that appear as children of an
            application root (stanza XML element
            <sgmltag>&lt;application&gt;</sgmltag><indexterm>
                  <primary>stanza</primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;application&gt;</sgmltag></tertiary>
               </indexterm>) or a global option root (stanza XML element
            <sgmltag>&lt;global_option&gt;</sgmltag><indexterm>
                  <primary>stanza</primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;global_option&gt;</sgmltag></tertiary>
               </indexterm>). Stanza items define the behavior of how an
            application gets executed by capturing details such as the command
            to run, command line flags, and execution environment. The
            composition of this information at launch time is done by making
            choices in the Launch Viewer<indexterm>
                  <primary>viewers</primary>

                  <secondary>launch</secondary>
               </indexterm> of the <application>Maestro GUI</application>.
            There are many stanza items, and we explain their usage in this
            section.</para>

            <para>Some stanza items can reference environment variables in
            their value setting. The environment variable can be one that is
            set as part of the stanza itself, as part of a the environment of
            referenced global options, or as part of the execution environment
            on the remote computer. This is done using the syntax of UNIX
            shells where <literal>${ENV_VAR}</literal> indicates that the
            value of the environment variable <literal>ENV_VAR</literal>
            should be used. The environment variable evaluation happens on the
            remote computer as part of launching.</para>

            <para>In the stanza editor, there is a tool bar containing all the
            information that can go into a stanza. The tool bar items are as
            follows:</para>

            <itemizedlist>
               <listitem>
                  <para><guibutton>Command</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>command</secondary>
                     </indexterm>: A command is what actually gets executed
                  when the application is launched. The command path should
                  <emphasis>not</emphasis> be enclosed in quotes even when it
                  contains spaces because the Maestro Launch Service<indexterm>
                        <primary>services</primary>

                        <secondary>launch</secondary>
                     </indexterm> will handle using correct quoting when
                  necessary. The command can set using one or more environment
                  variables.</para>

                  <para>The executed command can be varied on each node of the
                  cluster using the <literal>class</literal> attribute. For
                  example, on a cluster that mixes <productname
                  class="registered">Microsoft Windows</productname> and
                  Linux, a command might be <filename>C:\Program
                  Files\Software\myprog.exe</filename> on some nodes and
                  <filename>/usr/local/bin/myprog</filename> on others. In
                  this case, two commands are needed for the two variations
                  with the former using <quote>Windows XP</quote> as its class
                  and the latter using <quote>Linux.</quote> Refer to <xref
                  linkend="section.stanza.item.class" /> for more information
                  about the use of classes in Maestro stanzas.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Cwd</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>cwd</secondary>
                     </indexterm>: The current working directory identifies
                  where in the file system the command will be executed. This
                  does not have to be the same as the directory containing the
                  command since the command can be specified using an absolute
                  path. As with the command, this path can vary based on
                  classification of the various cluster nodes. The current
                  working directory can be set using one or more environment
                  variables.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Env Variable</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>env variable</secondary>
                     </indexterm>: An environment variable describes a setting
                  that is applied to the execution environment of the
                  application. It is made up of a key (the name of the
                  environment variable) and a value. These settings are
                  applied to the run-time environment <emphasis>of the
                  application</emphasis> on each of the remote nodes when the
                  application is launched by merging the stanza environment
                  with the run-time environment of the Maestro server.
                  Environment variable values can reference other environment
                  variables using the syntax
                  <literal>${ENV_VAR_NAME}</literal> where
                  <varname>ENV_VAR_NAME</varname> is the name of the other
                  environment variable. Be careful not to introduce circular
                  references, however, because this will result in an infinite
                  loop on the server side when trying to resolve the
                  references. The value of an environment variable in the
                  remote execution environment can be modified (extended or
                  replaced) using this stanza item. For example,
                  <envar>PATH</envar> could be changed to
                  <literal>${VJ_BASE_DIR}/bin:${PATH}:${HOME}/somedir/bin</literal>.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Env List</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>env list</secondary>
                     </indexterm>: A list of environment variables. In some
                  cases, an application may use a large collection of
                  environment variables, and creating individual environment
                  variable items in the stanza can be quite tedious. Instead,
                  an environment variable list can be used to capture multiple
                  environment variables in one place. Each environment
                  variable in the list is made up of a (the name of the
                  environment variable) and zero or more values. If the stanza
                  author allows the user to change the value of the
                  environment variable, multi-valued variables will be
                  presented using a combo box or an editable combo box when
                  appropriate.</para>

                  <para>The environment variables in the list are applied to
                  the run-time environment <emphasis>of the
                  application</emphasis> on each of the remote nodes when the
                  application is launched by merging the stanza environment
                  with the run-time environment of the Maestro server.
                  Environment variable values can reference other environment
                  variables using the syntax
                  <literal>${ENV_VAR_NAME}</literal> where
                  <varname>ENV_VAR_NAME</varname> is the name of the other
                  environment variable. Be careful not to introduce circular
                  references, however, because this will result in an infinite
                  loop on the server side when trying to resolve the
                  references. The value of an environment variable in the
                  remote execution environment can be modified (extended or
                  replaced) using this stanza item. For example,
                  <envar>PATH</envar> could be changed to
                  <literal>${VJ_BASE_DIR}/bin:${PATH}:${HOME}/somedir/bin</literal>.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Argument</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>argument</secondary>
                     </indexterm>: An argument describes a command line option
                  to an application. This may or may not have a flag (such as
                  <option>/f</option>, <option>-f</option>, or
                  <option>--flag</option>), but it always has a value.
                  Arguments cannot have children but instead are the children
                  of groups and choices. Ultimately, these are what get passed
                  to the launched application based on the decisions of the
                  user in the Launch Viewer. Argument values can reference
                  environment variables.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Choice</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>choice</secondary>
                     </indexterm>: Creates a structural item containing a list
                  of choices, either mutually exclusive or not. Choices can
                  encompass one or more groups, one or more other choices, one
                  or more arguments, and/or one or more environment variables.
                  When using a mutually exclusive choice, either radio buttons
                  or a combo box (also known as a pull-down menu) can be used
                  for showing the options. Which type to use is up to the
                  stanza author, but authors should keep in mind that combo
                  boxes are much better when there are many (more than three
                  or four) possible options.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Group</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>group</secondary>
                     </indexterm>: Creates a structural association of related
                  items. Groups can encompass other groups, choices,
                  arguments, and/or environment variables. Groups are often
                  used as children of choices when further nesting of choices
                  is required. Another common usage is to collect fixed
                  settings behind a common facade. For example, if there are
                  four VR Juggler configuration files required for a four-wall
                  flexible wall projection system, two groups may be
                  <quote>Walls Open</quote> and <quote>Walls Closed.</quote>
                  These groups need not display that they are referencing four
                  VR Juggler configuration files and can instead be identified
                  in the Launch Viewer<indexterm>
                        <primary>viewers</primary>

                        <secondary>launch</secondary>
                     </indexterm> as simply <guilabel>Walls Open</guilabel>
                  and <guilabel>Walls Closed</guilabel>.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Reference</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>reference</secondary>
                     </indexterm>: A reference allows reuse of a structural
                  item in another stanza. References can be refined by using
                  add, remove, and override operations as the children. A
                  reference has an identifier that uniquely describes what XML
                  element in another stanza is being referenced. This
                  identifier is formed using a syntax similar to <ulink
                  url="http://www.w3.org/TR/xpath">XPath</ulink>, though it is
                  <emphasis>not</emphasis> XPath. The path has a root and
                  children that are separated by the <literal>/</literal>
                  character, and a reference identifier must include both. In
                  other words, referencing only the root is not valid. The
                  root node itself may have a namespace that is used to assist
                  with creating unique identifiers. For example, two root
                  nodes might be <literal>site1:VrJugglerOptions</literal> and
                  <literal>site2:VrJugglerOptions</literal> where
                  <literal>site1</literal> and <literal>site2</literal> (the
                  namespaces) are common identifiers for two different VR
                  installations in the same organization.</para>

                  <para>The reference identifier is used for matching purposes
                  within the collection of all known stanzas. To perform this
                  matching, the identifier can utilize the Python regular
                  expression syntax. For those users not familiar with regular
                  expressions, simpler shell-style glob patterns are allowed.
                  For example, valid paths (those containing a root and
                  references to one or more children) from our example above
                  might be <literal>site1:VrJugglerOptions/*</literal> or
                  <literal>site1:VrJugglerOptions/Input*</literal>. To index
                  within a collection of matches returned by a pattern, the
                  syntax is to use the <literal>@</literal> symbol followed by
                  a zero-based integer index. For example,
                  <literal>site1:VrJugglerOptions/Input*@2</literal> would
                  extract the third child under
                  <literal>site1:VrJugglerOptions</literal> whose name matches
                  <literal>Input*</literal>.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Override</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>override</secondary>
                     </indexterm>: An override changes a detail of a
                  referenced structural item. This can include XML attributes
                  and the CDATA of the referenced element. The overriding is
                  based on the same identifier syntax as a reference
                  identifier, although the path is now relative to the root of
                  the referenced item(s). One possible use of overrides is to
                  change how a collection of site-wide arguments are passed in
                  to an application. For example, a site may have many VR
                  Juggler configuration files required to launch applications.
                  In the site's global options, these files are described as
                  arguments with no flag, but some applications require a
                  command line option to identify the meaning of an argument.
                  Those cases can be handled by overriding the
                  <literal>flag</literal> attribute on all the arguments for
                  VR Juggler options in the case of the applications that
                  require it.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Add Options</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>add options</secondary>
                     </indexterm>: An add operation extends a referenced
                  structural item by defining more children such as groups,
                  choices, arguments, and environment variables. The exact
                  result of the add operation depends on what structural item
                  is being referenced. Additions can be in the form of
                  choices, groups, environment variables, environment variable
                  lists, and/or arguments.</para>
               </listitem>

               <listitem>
                  <para><guibutton>Remove Option</guibutton><indexterm>
                        <primary>stanza item</primary>

                        <secondary>remove option</secondary>
                     </indexterm>: A remove operation deletes a child of the
                  referenced structural item. The reference identifier uses
                  the same path syntax as its parent reference, but the path
                  in this case is relative to the parent. In the event that
                  the path matches multiple nodes, the individually matched
                  roots can be matched using the <literal>@</literal> indexing
                  syntax. For example, if the parent reference identifier
                  <literal>site1:VrJugglerOptions/Input*</literal> matches
                  <literal>site1:VrJugglerOptions/InputGlove</literal>,
                  <literal>site1:VrJugglerOptions/InputJoystick</literal> and
                  <literal>site1:VrJugglerOptions/InputWand</literal>, the
                  second of those can be removed by using
                  <literal>@1</literal> as the identifier.</para>
               </listitem>
            </itemizedlist>

            <para>To add any one of these to the stanza being edited, click
            the desired tool bar item and drag it to the stanza editor canvas.
            At that point, connections can be made between the new structural
            item and existing items. The attributes of the item can be edited
            in the dockable panel at the bottom of the stanza editor.</para>
         </section>

         <section id="section.stanza.item.class">
            <title>Stanza Item Classes</title>

            <indexterm class="startofrange"
                       id="index.section.stanza.item.class">
               <primary>stanza item</primary>

               <secondary>class</secondary>
            </indexterm>

            <indexterm>
               <primary>stanza item</primary>

               <secondary>class</secondary>

               <tertiary>matching</tertiary>
            </indexterm>

            <para>Stanza items can have a class setting that dictates how the
            item is used on a given remote computer. As we saw in <xref
            linkend="section.files.ensemble" />, every node in the ensemble
            has a class setting, and a matching process is followed to
            determine if a stanza item is to be used with the ensemble node.
            The matching is fairly simple. If all the class tokens of a stanza
            item match up with class tokens of the ensemble node, then the
            stanza item is used with that ensemble node. The more class tokens
            used on a stanza item, the more specific the matching with
            ensemble nodes will be. A stanza item with an empty class setting
            therefore matches all ensemble nodes.</para>

            <indexterm>
               <primary>stanza item</primary>

               <secondary>class</secondary>

               <tertiary>operating system identifiers</tertiary>
            </indexterm>

            <para>As we progress through this section, we will see repeated
            examples of class tokens. It is important to remember that these
            are not the only values that can be used. Maestro users are free
            to set up their own conventions for class naming and usage. The
            only special class token is the operating system that an ensemble
            node is currently running. The operating system identifiers are
            built in to Maestro so that it has a common form for representing
            each platform. The full list can be seen in
            <filename>maestro/core/__init__.py</filename> in the Maestro
            installation directory. As of this writing, the valid operating
            system identifiers that can be used in a stanza item
            <literal>class</literal> attribute is the following:</para>

            <indexterm class="startofrange"
                       id="index.section.stanza.item.class.os">
               <primary>stanza item</primary>

               <secondary>class</secondary>

               <tertiary>operating system</tertiary>
            </indexterm>

            <itemizedlist>
               <listitem>
                  <para><literal>Linux</literal></para>
               </listitem>

               <listitem>
                  <para><literal>Windows</literal></para>
               </listitem>

               <listitem>
                  <para><literal>Windows XP</literal></para>
               </listitem>

               <listitem>
                  <para><literal>MacOS</literal> (for Mac OS 9)</para>
               </listitem>

               <listitem>
                  <para><literal>Mac OS X</literal></para>
               </listitem>

               <listitem>
                  <para><literal>HP-UX</literal></para>
               </listitem>

               <listitem>
                  <para><literal>AIX</literal></para>
               </listitem>

               <listitem>
                  <para><literal>Solaris</literal></para>
               </listitem>
            </itemizedlist>

            <para>Note that this list does not imply that all of these
            platforms are supported by Maestro.</para>

            <important>
               <para>It is not valid to set the operating system class token
               for the nodes of an ensemble file. This information is
               determined by Maestro so that nodes can be rebooted to a
               different operating system without requiring a change to the
               ensemble file being used by the <application>Maestro
               GUI</application>. The ability of the <application>Maestro
               GUI</application> to handle server reboots gracefully relies
               upon this handling of the operating system class token.</para>
            </important>

            <para>With that, let us now consider the example stanza shown in
            <xref linkend="example.stanza.classes" /> (a slightly modified
            version of <filename>stanzas/DirectoryListing.stanza</filename> in
            the Maestro installation tree). In this case, the stanza provides
            a way to list a user-specified directory on the remote machine.
            Since the command for doing this varies between operating systems,
            there are platform-specific command stanza items (XML tag
            <sgmltag>&lt;command&gt;</sgmltag><indexterm>
                  <primary>stanza</primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;command&gt;</sgmltag></tertiary>
               </indexterm>). Here, we see cases for Linux and Windows XP. In
            other words, the <literal>class</literal> attribute on the
            &lt;command&gt; tag is set to <literal>Linux</literal> for the
            Linux case and to <literal>Windows XP</literal> for the
            <productname class="registered">Microsoft Windows</productname>
            case. The ensemble nodes that running Linux at the time this
            application gets launched will receive the Linux command, and
            those running Windows XP will receive the Windows XP command. If
            all the nodes are running (say) Linux, then the Windows XP command
            will not be sent to any ensemble node.</para>

            <example id="example.stanza.classes">
               <title>Application Stanza Using Classes</title>

               <programlisting>&lt;?xml version="1.0"?&gt;
&lt;stanza&gt;
   &lt;application helpUrl="" tooltip="List files in a directory."
                name="DirListing" label="Directory Listing"&gt;
      &lt;command class="Linux" name="linux_cmd"&gt;
         ls
      &lt;/command&gt;
      &lt;command class="Windows XP" name="windows_cmd"&gt;
         dir
      &lt;/command&gt;
      &lt;arg class="Linux" editable="true" flag="-l" hidden="false"
           label="Directory" name="Directory" value_type="string"&gt;
         ${HOME}
      &lt;/arg&gt;
      &lt;arg class="Windows XP" editable="true" flag="" hidden="false"
           label="Directory" name="Directory" value_type="string"&gt;
         ${HOMEDRIVE}${HOMEPATH}
      &lt;/arg&gt;
   &lt;/application&gt;
&lt;/stanza&gt;</programlisting>
            </example>

            <para>The next point of variation in this example is the argument
            used for the command. Since path syntax varies between platforms,
            we allow the user to enter the platform-specific syntax in the
            <application>Maestro GUI</application> Launch Viewer<indexterm>
                  <primary>viewers</primary>

                  <secondary>launch</secondary>
               </indexterm>. (The user can do this because the
            <literal>editable</literal> attribute of both
            <sgmltag>&lt;arg&gt;</sgmltag><indexterm>
                  <primary>stanza</primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;arg&gt;</sgmltag></tertiary>
               </indexterm> tags is set to <literal>true</literal>.) In the
            example, the output from both commands may end up listing the
            authenticated user's home directory is the same on the Linux
            ensemble nodes as it is on the <productname
            class="registered">Microsoft Windows</productname> ensemble
            nodes.</para>

            <para>A second item of interest for the
            <sgmltag>&lt;arg&gt;</sgmltag> tags in the example above is that
            the <literal>flag</literal> attribute is varied. To get a
            <quote>long</quote> directory listing from <command>ls</command>,
            we pass the <option>-l</option> option. The <command>dir</command>
            command, on the other hand, will give us the long listing by
            default, so no additional flag is needed.</para>

            <indexterm class="endofrange"
                       startref="index.section.stanza.item.class.os"></indexterm>

            <indexterm class="startofrange"
                       id="index.section.stanza.item.class.master.slave">
               <primary>stanza item</primary>

               <secondary>class</secondary>

               <tertiary>master/slave</tertiary>
            </indexterm>

            <para>As we noted in <xref linkend="section.files.ensemble" />,
            common class settings for ensemble nodes include
            <literal>master</literal> and <literal>slave</literal>. These
            classes allow application launching to determine when it is
            running on a <quote>master</quote> node of the cluster versus a
            <quote>slave.</quote> For VR Juggler 2.0 and 2.2, the notion of a
            master cluster node is a rather weak one, but application
            developers may structure their software in such a way that
            different code gets run on different nodes based on the role of
            the node in the cluster. The <literal>class</literal> attribute on
            stanza items allows Maestro to handle this case.</para>

            <para>Consider the example shown in <xref
            linkend="example.stanza.classes.master.slave" />. In this case, we
            have the following variations based on operating system and
            ensemble node role:</para>

            <itemizedlist>
               <listitem>
                  <para>The path to the command is different based on the
                  operating system</para>
               </listitem>

               <listitem>
                  <para>The command executed is different based on the role of
                  the ensemble node</para>
               </listitem>

               <listitem>
                  <para>The arguments passed to the commands are different
                  based on the role of the ensemble node</para>
               </listitem>
            </itemizedlist>

            <para>The variation in the command is captured using the
            <sgmltag>&lt;command&gt;</sgmltag><indexterm>
                  <primary>stanza</primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;command&gt;</sgmltag></tertiary>
               </indexterm> tag and its <literal>class</literal> attribute.
            For the master node, we run <command>masterApp</command> whereas
            the slave nodes all run <command>slaveApp</command>. Note that
            both of these stanza items reference the environment variable
            <envar>APP_DIR</envar>. This environment variable is used to
            capture the platform-specific path to the executable. The two
            <sgmltag>&lt;env_var&gt;</sgmltag><indexterm>
                  <primary>stanza</primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;env_var&gt;</sgmltag></tertiary>
               </indexterm> tags have their <literal>class</literal> attribute
            set to a platform-specific value. In this way, we avoid having to
            include the operating system in the <literal>class</literal>
            attribute for the <sgmltag>&lt;command&gt;</sgmltag> tags so that
            we may have two <sgmltag>&lt;command&gt;</sgmltag> tags instead of
            four. Next, both the master and the slave applications take the
            same VR Juggler configuration file. We do this using an
            <sgmltag>&lt;arg&gt;</sgmltag><indexterm>
                  <primary>stanza</primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;arg&gt;</sgmltag></tertiary>
               </indexterm> tag with an empty class setting so that it matches
            all ensemble nodes. Finally, the slave application needs to be
            told the address of the master for making the network connection.
            This is done by using another <sgmltag>&lt;arg&gt;</sgmltag> tag
            whose <literal>class</literal> attribute is set to
            <literal>slave</literal>.</para>

            <example id="example.stanza.classes.master.slave">
               <title>Application Stanza Using Classes for Master and
               Slave</title>

               <programlisting>&lt;?xml version="1.0"?&gt;
&lt;stanza namespace="myapp"&gt;
   &lt;application helpUrl="" tooltip="My master/slave VR app."
                name="myapp" label="My VR Application"&gt;
      &lt;command class="master" name="master_cmd" hidden="true"&gt;
         ${APP_DIR}/masterApp
      &lt;/command&gt;
      &lt;command class="slave" name="slave_cmd" hidden="true"&gt;
         ${APP_DIR}/slaveApp
      &lt;/command&gt;
      &lt;arg class="" editable="false" hidden="true" flag="-j"
           label="VR Juggler Configuration" name="jconf"
           value_type="file"
         ${HOME}/vrcluster.jconf
      &lt;/arg&gt;
      &lt;arg class="slave" editable="true" flag="-a" hidden="false"
           label="Master Address" name="masterAddr"
           value_type="string"&gt;
         master_node:34567
      &lt;/arg&gt;
      &lt;env_var key="APP_DIR" label="" name="app_dir" hidden="true"
               class="Linux"&gt;
         ${HOME}/software/myapplication
      &lt;/env_var&gt;
      &lt;env_var key="APP_DIR" label="" name="app_dir" hidden="true"
               class="Windows XP"&gt;
         ${HOMEDRIVE}${HOMEPATH}\software\myapplication
      &lt;/env_var&gt;
   &lt;/application&gt;
&lt;/stanza&gt;</programlisting>
            </example>

            <para>The above example did not make use of multiple class tokens
            on a stanza item. As noted, we could have had four command items
            instead of two with platform-specific details being captured in
            the environment variable settings. For the purposes of
            demonstrating the use of multiple class tokens, we repeat the
            example without the environment variables in <xref
            linkend="example.stanza.classes.master.slave2" />. Now, we have
            stanza items with class settings such as
            <literal>Linux,slave</literal> and <literal>Windows
            XP,master</literal>.</para>

            <example id="example.stanza.classes.master.slave2">
               <title>Application Stanza Using Classes for Master and Slave
               (2)</title>

               <programlisting>&lt;?xml version="1.0"?&gt;
&lt;stanza namespace="myapp"&gt;
   &lt;application helpUrl="" tooltip="My master/slave VR app."
                name="myapp" label="My VR Application"&gt;
      &lt;command class="Linux,master" name="linux_master_cmd"
               hidden="true"&gt;
         ${HOME}/software/myapplication/masterApp
      &lt;/command&gt;
      &lt;command class="Windows XP,master" name="windows_master_cmd"
               hidden="true"&gt;
         ${HOMEDRIVE}${HOMEPATH}\software\myapplication\masterApp
      &lt;/command&gt;
      &lt;command class="Linux,slave" name="linux_slave_cmd"
               hidden="true"&gt;
         ${HOME}/software/myapplication/slaveApp
      &lt;/command&gt;
      &lt;command class="Windows XP,slave" name="windows_slave_cmd"
               hidden="true"&gt;
         ${HOMEDRIVE}${HOMEPATH}\software\myapplication\slaveApp
      &lt;/command&gt;
      &lt;arg class="" editable="false" hidden="true" flag="-j"
           label="VR Juggler Configuration" name="jconf"
           value_type="file"
         ${HOME}/vrcluster.jconf
      &lt;/arg&gt;
      &lt;arg class="slave" editable="true" flag="-a" hidden="false"
           label="Master Address" name="masterAddr"
           value_type="string"&gt;
         master_node:34567
      &lt;/arg&gt;
   &lt;/application&gt;
&lt;/stanza&gt;</programlisting>
            </example>

            <indexterm class="endofrange"
                       startref="index.section.stanza.item.class.master.slave"></indexterm>

            <indexterm class="endofrange"
                       startref="index.section.stanza.item.class"></indexterm>

            <indexterm class="endofrange" startref="index.file.stanza"></indexterm>
         </section>
      </section>
   </chapter>

   <appendix id="appendix.gfdl">
      <title>GNU Free Documentation License</title>

      <subtitle>Version 1.2, November 2002</subtitle>

      <blockquote id="fsf-copyright">
         <title>FSF Copyright note</title>

         <para>Copyright (C) 2000,2001,2002 Free Software Foundation, Inc. 59
         Temple Place, Suite 330, Boston, MA 02111-1307 USA Everyone is
         permitted to copy and distribute verbatim copies of this license
         document, but changing it is not allowed.</para>
      </blockquote>

      <section id="gfdl-0">
         <title>PREAMBLE</title>

         <para>The purpose of this License is to make a manual, textbook, or
         other functional and useful document "free" in the sense of freedom:
         to assure everyone the effective freedom to copy and redistribute it,
         with or without modifying it, either commercially or noncommercially.
         Secondarily, this License preserves for the author and publisher a
         way to get credit for their work, while not being considered
         responsible for modifications made by others.</para>

         <para>This License is a kind of "copyleft", which means that
         derivative works of the document must themselves be free in the same
         sense. It complements the GNU General Public License, which is a
         copyleft license designed for free software.</para>

         <para>We have designed this License in order to use it for manuals
         for free software, because free software needs free documentation: a
         free program should come with manuals providing the same freedoms
         that the software does. But this License is not limited to software
         manuals; it can be used for any textual work, regardless of subject
         matter or whether it is published as a printed book. We recommend
         this License principally for works whose purpose is instruction or
         reference.</para>
      </section>

      <section id="gfdl-1">
         <title>APPLICABILITY AND DEFINITIONS</title>

         <para id="gfdl-doc">This License applies to any manual or other work,
         in any medium, that contains a notice placed by the copyright holder
         saying it can be distributed under the terms of this License. Such a
         notice grants a world-wide, royalty-free license, unlimited in
         duration, to use that work under the conditions stated herein. The
         "Document", below, refers to any such manual or work. Any member of
         the public is a licensee, and is addressed as "you". You accept the
         license if you copy, modify or distribute the work in a way requiring
         permission under copyright law.</para>

         <para id="gfdl-mod-ver">A "Modified Version" of the Document means
         any work containing the Document or a portion of it, either copied
         verbatim, or with modifications and/or translated into another
         language.</para>

         <para id="gfdl-secnd-sect">A "Secondary Section" is a named appendix
         or a front-matter section of the Document that deals exclusively with
         the relationship of the publishers or authors of the Document to the
         Document's overall subject (or to related matters) and contains
         nothing that could fall directly within that overall subject. (Thus,
         if the Document is in part a textbook of mathematics, a Secondary
         Section may not explain any mathematics.) The relationship could be a
         matter of historical connection with the subject or with related
         matters, or of legal, commercial, philosophical, ethical or political
         position regarding them.</para>

         <para id="gfdl-inv-sect">The "Invariant Sections" are certain
         Secondary Sections whose titles are designated, as being those of
         Invariant Sections, in the notice that says that the Document is
         released under this License. If a section does not fit the above
         definition of Secondary then it is not allowed to be designated as
         Invariant. The Document may contain zero Invariant Sections. If the
         Document does not identify any Invariant Sections then there are
         none.</para>

         <para id="gfdl-cov-text">The "Cover Texts" are certain short passages
         of text that are listed, as Front-Cover Texts or Back-Cover Texts, in
         the notice that says that the Document is released under this
         License. A Front-Cover Text may be at most 5 words, and a Back-Cover
         Text may be at most 25 words.</para>

         <para id="gfdl-transparent">A "Transparent" copy of the Document
         means a machine-readable copy, represented in a format whose
         specification is available to the general public, that is suitable
         for revising the document straightforwardly with generic text editors
         or (for images composed of pixels) generic paint programs or (for
         drawings) some widely available drawing editor, and that is suitable
         for input to text formatters or for automatic translation to a
         variety of formats suitable for input to text formatters. A copy made
         in an otherwise Transparent file format whose markup, or absence of
         markup, has been arranged to thwart or discourage subsequent
         modification by readers is not Transparent. An image format is not
         Transparent if used for any substantial amount of text. A copy that
         is not "Transparent" is called "Opaque".</para>

         <para>Examples of suitable formats for Transparent copies include
         plain ASCII without markup, Texinfo input format, LaTeX input format,
         SGML or XML using a publicly available DTD, and standard-conforming
         simple HTML, PostScript or PDF designed for human modification.
         Examples of transparent image formats include PNG, XCF and JPG.
         Opaque formats include proprietary formats that can be read and
         edited only by proprietary word processors, SGML or XML for which the
         DTD and/or processing tools are not generally available, and the
         machine-generated HTML, PostScript or PDF produced by some word
         processors for output purposes only.</para>

         <para id="gfdl-title-page">The "Title Page" means, for a printed
         book, the title page itself, plus such following pages as are needed
         to hold, legibly, the material this License requires to appear in the
         title page. For works in formats which do not have any title page as
         such, "Title Page" means the text near the most prominent appearance
         of the work's title, preceding the beginning of the body of the
         text.</para>

         <para id="gfdl-entitled">A section "Entitled XYZ" means a named
         subunit of the Document whose title either is precisely XYZ or
         contains XYZ in parentheses following text that translates XYZ in
         another language. (Here XYZ stands for a specific section name
         mentioned below, such as "Acknowledgements", "Dedications",
         "Endorsements", or "History".) To "Preserve the Title" of such a
         section when you modify the Document means that it remains a section
         "Entitled XYZ" according to this definition.</para>

         <para>The Document may include Warranty Disclaimers next to the
         notice which states that this License applies to the Document. These
         Warranty Disclaimers are considered to be included by reference in
         this License, but only as regards disclaiming warranties: any other
         implication that these Warranty Disclaimers may have is void and has
         no effect on the meaning of this License.</para>
      </section>

      <section id="gfdl-2">
         <title>VERBATIM COPYING</title>

         <para>You may copy and distribute the Document in any medium, either
         commercially or noncommercially, provided that this License, the
         copyright notices, and the license notice saying this License applies
         to the Document are reproduced in all copies, and that you add no
         other conditions whatsoever to those of this License. You may not use
         technical measures to obstruct or control the reading or further
         copying of the copies you make or distribute. However, you may accept
         compensation in exchange for copies. If you distribute a large enough
         number of copies you must also follow the conditions in section
         3.</para>

         <para>You may also lend copies, under the same conditions stated
         above, and you may publicly display copies.</para>
      </section>

      <section id="gfdl-3">
         <title>COPYING IN QUANTITY</title>

         <para>If you publish printed copies (or copies in media that commonly
         have printed covers) of the Document, numbering more than 100, and
         the Document's license notice requires Cover Texts, you must enclose
         the copies in covers that carry, clearly and legibly, all these Cover
         Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
         the back cover. Both covers must also clearly and legibly identify
         you as the publisher of these copies. The front cover must present
         the full title with all words of the title equally prominent and
         visible. You may add other material on the covers in addition.
         Copying with changes limited to the covers, as long as they preserve
         the title of the Document and satisfy these conditions, can be
         treated as verbatim copying in other respects.</para>

         <para>If the required texts for either cover are too voluminous to
         fit legibly, you should put the first ones listed (as many as fit
         reasonably) on the actual cover, and continue the rest onto adjacent
         pages.</para>

         <para>If you publish or distribute Opaque copies of the Document
         numbering more than 100, you must either include a machine-readable
         Transparent copy along with each Opaque copy, or state in or with
         each Opaque copy a computer-network location from which the general
         network-using public has access to download using public-standard
         network protocols a complete Transparent copy of the Document, free
         of added material. If you use the latter option, you must take
         reasonably prudent steps, when you begin distribution of Opaque
         copies in quantity, to ensure that this Transparent copy will remain
         thus accessible at the stated location until at least one year after
         the last time you distribute an Opaque copy (directly or through your
         agents or retailers) of that edition to the public.</para>

         <para>It is requested, but not required, that you contact the authors
         of the Document well before redistributing any large number of
         copies, to give them a chance to provide you with an updated version
         of the Document.</para>
      </section>

      <section id="gfdl-4">
         <title>MODIFICATIONS</title>

         <para>You may copy and distribute a Modified Version of the Document
         under the conditions of sections 2 and 3 above, provided that you
         release the Modified Version under precisely this License, with the
         Modified Version filling the role of the Document, thus licensing
         distribution and modification of the Modified Version to whoever
         possesses a copy of it. In addition, you must do these things in the
         Modified Version:</para>

         <orderedlist id="gfdl-modif-cond" numeration="upperalpha">
            <title>GNU FDL Modification Conditions</title>

            <listitem>
               <simpara>Use in the Title Page (and on the covers, if any) a
               title distinct from that of the Document, and from those of
               previous versions (which should, if there were any, be listed
               in the History section of the Document). You may use the same
               title as a previous version if the original publisher of that
               version gives permission.</simpara>
            </listitem>

            <listitem>
               <simpara>List on the Title Page, as authors, one or more
               persons or entities responsible for authorship of the
               modifications in the Modified Version, together with at least
               five of the principal authors of the Document (all of its
               principal authors, if it has fewer than five), unless they
               release you from this requirement.</simpara>
            </listitem>

            <listitem>
               <simpara>State on the Title page the name of the publisher of
               the Modified Version, as the publisher.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve all the copyright notices of the
               Document.</simpara>
            </listitem>

            <listitem>
               <simpara>Add an appropriate copyright notice for your
               modifications adjacent to the other copyright
               notices.</simpara>
            </listitem>

            <listitem>
               <simpara>Include, immediately after the copyright notices, a
               license notice giving the public permission to use the Modified
               Version under the terms of this License, in the form shown in
               the <link linkend="gfdl-addendum">Addendum</link>
               below.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve in that license notice the full lists of
               Invariant Sections and required Cover Texts given in the
               Document's license notice.</simpara>
            </listitem>

            <listitem>
               <simpara>Include an unaltered copy of this License.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve the section Entitled "History", Preserve its
               Title, and add to it an item stating at least the title, year,
               new authors, and publisher of the Modified Version as given on
               the Title Page. If there is no section Entitled "History" in
               the Document, create one stating the title, year, authors, and
               publisher of the Document as given on its Title Page, then add
               an item describing the Modified Version as stated in the
               previous sentence.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve the network location, if any, given in the
               Document for public access to a Transparent copy of the
               Document, and likewise the network locations given in the
               Document for previous versions it was based on. These may be
               placed in the "History" section. You may omit a network
               location for a work that was published at least four years
               before the Document itself, or if the original publisher of the
               version it refers to gives permission.</simpara>
            </listitem>

            <listitem>
               <simpara>For any section Entitled "Acknowledgements" or
               "Dedications", Preserve the Title of the section, and preserve
               in the section all the substance and tone of each of the
               contributor acknowledgements and/or dedications given
               therein.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve all the Invariant Sections of the Document,
               unaltered in their text and in their titles. Section numbers or
               the equivalent are not considered part of the section
               titles.</simpara>
            </listitem>

            <listitem>
               <simpara>Delete any section Entitled "Endorsements". Such a
               section may not be included in the Modified Version.</simpara>
            </listitem>

            <listitem>
               <simpara>Do not retitle any existing section to be Entitled
               "Endorsements" or to conflict in title with any Invariant
               Section.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve any Warranty Disclaimers.</simpara>
            </listitem>
         </orderedlist>

         <para>If the Modified Version includes new front-matter sections or
         appendices that qualify as Secondary Sections and contain no material
         copied from the Document, you may at your option designate some or
         all of these sections as invariant. To do this, add their titles to
         the list of Invariant Sections in the Modified Version's license
         notice. These titles must be distinct from any other section
         titles.</para>

         <para>You may add a section Entitled "Endorsements", provided it
         contains nothing but endorsements of your Modified Version by various
         parties--for example, statements of peer review or that the text has
         been approved by an organization as the authoritative definition of a
         standard.</para>

         <para>You may add a passage of up to five words as a Front-Cover
         Text, and a passage of up to 25 words as a Back-Cover Text, to the
         end of the list of Cover Texts in the Modified Version. Only one
         passage of Front-Cover Text and one of Back-Cover Text may be added
         by (or through arrangements made by) any one entity. If the Document
         already includes a cover text for the same cover, previously added by
         you or by arrangement made by the same entity you are acting on
         behalf of, you may not add another; but you may replace the old one,
         on explicit permission from the previous publisher that added the old
         one.</para>

         <para>The author(s) and publisher(s) of the Document do not by this
         License give permission to use their names for publicity for or to
         assert or imply endorsement of any Modified Version.</para>
      </section>

      <section id="gfdl-5">
         <title>COMBINING DOCUMENTS</title>

         <para>You may combine the Document with other documents released
         under this License, under the terms defined in <link
         linkend="gfdl-4">section 4</link> above for modified versions,
         provided that you include in the combination all of the Invariant
         Sections of all of the original documents, unmodified, and list them
         all as Invariant Sections of your combined work in its license
         notice, and that you preserve all their Warranty Disclaimers.</para>

         <para>The combined work need only contain one copy of this License,
         and multiple identical Invariant Sections may be replaced with a
         single copy. If there are multiple Invariant Sections with the same
         name but different contents, make the title of each such section
         unique by adding at the end of it, in parentheses, the name of the
         original author or publisher of that section if known, or else a
         unique number. Make the same adjustment to the section titles in the
         list of Invariant Sections in the license notice of the combined
         work.</para>

         <para>In the combination, you must combine any sections Entitled
         "History" in the various original documents, forming one section
         Entitled "History"; likewise combine any sections Entitled
         "Acknowledgements", and any sections Entitled "Dedications". You must
         delete all sections Entitled "Endorsements".</para>
      </section>

      <section id="gfdl-6">
         <title>COLLECTIONS OF DOCUMENTS</title>

         <para>You may make a collection consisting of the Document and other
         documents released under this License, and replace the individual
         copies of this License in the various documents with a single copy
         that is included in the collection, provided that you follow the
         rules of this License for verbatim copying of each of the documents
         in all other respects.</para>

         <para>You may extract a single document from such a collection, and
         distribute it individually under this License, provided you insert a
         copy of this License into the extracted document, and follow this
         License in all other respects regarding verbatim copying of that
         document.</para>
      </section>

      <section id="gfdl-7">
         <title>AGGREGATION WITH INDEPENDENT WORKS</title>

         <para>A compilation of the Document or its derivatives with other
         separate and independent documents or works, in or on a volume of a
         storage or distribution medium, is called an "aggregate" if the
         copyright resulting from the compilation is not used to limit the
         legal rights of the compilation's users beyond what the individual
         works permit. When the Document is included in an aggregate, this
         License does not apply to the other works in the aggregate which are
         not themselves derivative works of the Document.</para>

         <para>If the Cover Text requirement of section 3 is applicable to
         these copies of the Document, then if the Document is less than one
         half of the entire aggregate, the Document's Cover Texts may be
         placed on covers that bracket the Document within the aggregate, or
         the electronic equivalent of covers if the Document is in electronic
         form. Otherwise they must appear on printed covers that bracket the
         whole aggregate.</para>
      </section>

      <section id="gfdl-8">
         <title>TRANSLATION</title>

         <para>Translation is considered a kind of modification, so you may
         distribute translations of the Document under the terms of section 4.
         Replacing Invariant Sections with translations requires special
         permission from their copyright holders, but you may include
         translations of some or all Invariant Sections in addition to the
         original versions of these Invariant Sections. You may include a
         translation of this License, and all the license notices in the
         Document, and any Warranty Disclaimers, provided that you also
         include the original English version of this License and the original
         versions of those notices and disclaimers. In case of a disagreement
         between the translation and the original version of this License or a
         notice or disclaimer, the original version will prevail.</para>

         <para>If a section in the Document is Entitled "Acknowledgements",
         "Dedications", or "History", the requirement (section 4) to Preserve
         its Title (section 1) will typically require changing the actual
         title.</para>
      </section>

      <section id="gfdl-9">
         <title>TERMINATION</title>

         <para>You may not copy, modify, sublicense, or distribute the
         Document except as expressly provided for under this License. Any
         other attempt to copy, modify, sublicense or distribute the Document
         is void, and will automatically terminate your rights under this
         License. However, parties who have received copies, or rights, from
         you under this License will not have their licenses terminated so
         long as such parties remain in full compliance.</para>
      </section>

      <section id="gfdl-10">
         <title>FUTURE REVISIONS OF THIS LICENSE</title>

         <para>The Free Software Foundation may publish new, revised versions
         of the GNU Free Documentation License from time to time. Such new
         versions will be similar in spirit to the present version, but may
         differ in detail to address new problems or concerns. See
         http://www.gnu.org/copyleft/.</para>

         <para>Each version of the License is given a distinguishing version
         number. If the Document specifies that a particular numbered version
         of this License "or any later version" applies to it, you have the
         option of following the terms and conditions either of that specified
         version or of any later version that has been published (not as a
         draft) by the Free Software Foundation. If the Document does not
         specify a version number of this License, you may choose any version
         ever published (not as a draft) by the Free Software
         Foundation.</para>
      </section>

      <section id="gfdl-addendum">
         <title>ADDENDUM: How to use this License for your documents</title>

         <para>To use this License in a document you have written, include a
         copy of the License in the document and put the following copyright
         and license notices just after the title page:</para>

         <blockquote id="copyright-sample">
            <title>Sample Invariant Sections list</title>

            <para>Copyright (c) YEAR YOUR NAME. Permission is granted to copy,
            distribute and/or modify this document under the terms of the GNU
            Free Documentation License, Version 1.2 or any later version
            published by the Free Software Foundation; with no Invariant
            Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of
            the license is included in the section entitled "GNU Free
            Documentation License".</para>
         </blockquote>

         <para>If you have Invariant Sections, Front-Cover Texts and
         Back-Cover Texts, replace the "with...Texts." line with this:</para>

         <blockquote id="inv-cover-sample">
            <title>Sample Invariant Sections list</title>

            <para>with the Invariant Sections being LIST THEIR TITLES, with
            the Front-Cover Texts being LIST, and with the Back-Cover Texts
            being LIST.</para>
         </blockquote>

         <para>If you have Invariant Sections without Cover Texts, or some
         other combination of the three, merge those two alternatives to suit
         the situation.</para>

         <para>If your document contains nontrivial examples of program code,
         we recommend releasing these examples in parallel under your choice
         of free software license, such as the GNU General Public License, to
         permit their use in free software.</para>
      </section>
   </appendix>

   <index></index>
</book>