<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd">
<book>
   <bookinfo>
      <title>Maestro User's Guide</title>

      <releaseinfo>Version 0.1</releaseinfo>

      <authorgroup>
         <corpauthor><ulink url="http://www.infiscape.com/">Infiscape
         Corporation</ulink></corpauthor>
      </authorgroup>

      <address><street>2901 South Loop Drive, Suite 3400</street><city>Ames</city><state>Iowa</state><postcode>50010-8646</postcode><phone>+1.515.296.3787</phone><email>contact@infiscape.com</email><otheraddr>Website: <ulink
               url="http://www.infiscape.com/">http://www.infiscape.com/</ulink></otheraddr></address>

      <legalnotice>
         <para>Permission is granted to copy, distribute and/or modify this
         document under the terms of the GNU Free Documentation License,
         Version 1.2 or any later version published by the Free Software
         Foundation; with the Invariant Sections being <xref
         linkend="appendix.gfdl" />, with no Front-Cover Texts, and with no
         Back-Cover Texts. A copy of the license is included in <xref
         linkend="appendix.gfdl" />.</para>

         <para>Some of the designations used by manufacturers and sellers to
         distinguish their products are claimed as trademarks. Where those
         designations appear in this book, and Infiscape Corporation was aware
         of the trademark claim, the designations have been printed in caps or
         initial caps.</para>
      </legalnotice>

      <pubdate>October 16, 2006</pubdate>
   </bookinfo>

   <preface>
      <title>Preface</title>

      <para>Maestro was originally written by Aron Bierbaum at <ulink
      url="http://www.infiscape.com/">Infiscape Corporation</ulink> in January
      2006 and was known simply as the <quote>Cluster Control Tool.</quote> It
      was born out of a need for improving the launching of <ulink
      url="http://www.vrjuggler.org/">VR Juggler</ulink> applications<footnote>
            <para>Applications that present the user(s) with an interactive,
            immersive virtual space.</para>
         </footnote> on graphics clusters—especially those running
      <productname class="registered">Microsoft Windows</productname> where
      remote execution of interactive applications is atypical. Existing
      techniques for launching VR Juggler applications involved writing custom
      shell scripts or batch files for each application. Through varying means
      (SSH, <ulink
      url="http://www.sysinternals.com/Utilities/PsExec.html">PsExec</ulink>,
      etc.), these scripts would get access to the nodes of the cluster and
      start the application process on each. To see the output from all the
      cluster nodes usually required having a console window open for each
      node (which was usually already open as a side effect of running the
      remote logon and launch commands). All in all, these techniques suffered
      from many limitations and complexities. As we will see in this document,
      Maestro goes a long way to facilitating the easy use and maintenance of
      graphics clusters.</para>

      <para>Before we begin explaining Maestro and its use, we present the
      conventions used in this document in order for readers to get the most
      out of it. In some places, command lines are wrapped to keep the text
      within the margins of a page when this document is rendered to PDF. Such
      cases should be obvious to the reader, but it is important to understand
      that the command lines are intended to appear as a single line when
      used.</para>

      <para>Typesetting conventions used in this document are as
      follows:</para>

      <itemizedlist>
         <listitem>
            <para>File names and paths appear as
            <filename>file.txt</filename></para>
         </listitem>

         <listitem>
            <para>Commands to be entered by the user appear as
            <command>command</command></para>
         </listitem>

         <listitem>
            <para>Environment variables <emphasis>names</emphasis> appear as
            <envar>ENV_VAR</envar></para>
         </listitem>

         <listitem>
            <para>Environment variables <emphasis>values</emphasis> appear as
            <envar>$ENV_VAR</envar></para>
         </listitem>

         <listitem>
            <para>Command line options appear as <option>-o</option></para>
         </listitem>

         <listitem>
            <para>Graphical user interface menus appear as <guimenu>Menu
            Name</guimenu></para>
         </listitem>

         <listitem>
            <para>Graphical user interface menu items appear as
            <guimenuitem>Item Name</guimenuitem> or as <menuchoice>
                  <shortcut>
                     <keycap>Shortcut</keycap>
                  </shortcut>

                  <guimenu>Menu Name</guimenu>

                  <guimenuitem>Item Name</guimenuitem>
               </menuchoice> to identify the menu and menu item together—along
            with the keyboard shortcut in parentheses if one exists</para>
         </listitem>

         <listitem>
            <para>Graphical user interface labels appear as <guilabel>Label
            Text</guilabel></para>
         </listitem>

         <listitem>
            <para>Graphical user interface buttons appear as <guibutton>Button
            Name</guibutton></para>
         </listitem>
      </itemizedlist>

      <para>Acronyms used frequently in this document, though we have avoided
      using abbreviations as much as possible. In a few cases, the text
      switches back and forth between the acronym and the full spelling of the
      acronym. The most frequently used acronyms are the following:</para>

      <itemizedlist>
         <listitem>
            <para><acronym>GUI</acronym>: A graphical user interface</para>
         </listitem>

         <listitem>
            <para><acronym>XML</acronym>: The <ulink
            url="http://www.w3.org/XML/">eXtensible Markup
            Language</ulink></para>
         </listitem>

         <listitem>
            <para><acronym>OS</acronym>: Operating system</para>
         </listitem>

         <listitem>
            <para><acronym>VR</acronym>: Virtual reality</para>
         </listitem>

         <listitem>
            <para><acronym>SSH</acronym>: Secure shell</para>
         </listitem>

         <listitem>
            <para><acronym>PAM</acronym>: Pluggable authentication
            module</para>
         </listitem>
      </itemizedlist>
   </preface>

   <chapter id="chapter.introduction">
      <title>Introduction</title>

      <para>Before we dive into explaining how to use Maestro, we first
      explain the purpose of the software and some history about how it came
      to be. The Maestro software is released under the terms of the GNU
      <ulink url="http://www.gnu.org/copyleft/gpl.html">General Public
      License</ulink>, and the first version of the source was made available
      to the public in August 2006. As of this writing, the current version is
      0.1, and Maestro should be considered to be in a
      <quote>pre-alpha</quote> state. This means that the software will
      continue to evolve and improve with time. More information, including
      downloads, can be found at the <ulink
      url="https://realityforge.vrsource.org/trac/maestro/">Maestro
      website</ulink>.</para>

      <section>
         <title>What is Maestro?</title>

         <para>Maestro is a software package using a simple client/server
         model for utilizing the resources of a cluster of computers. Its
         current intended audience is owners of graphics clusters (also known
         as image generator clusters) used for displaying high-quality,
         real-time graphics on multiple projection surfaces. As with most
         cluster-based technology, the idea is to spread the work load over
         many low-cost machines rather than using a single, expensive
         supercomputer. This means that distinct application processes are run
         on each node of the cluster, and there is typically some sort of
         communication between the processes or between the master node of the
         cluster and all the slave nodes. This communication is used for a
         variety of purposes including sending data and receiving
         results.</para>

         <para>Graphics clusters pose unique challenges. Most obviously, the
         software run on graphics clusters is normally interactive. Users
         provide live input and see immediate results, and to see the results,
         each node normally has one or more display devices (monitor or
         projector) connected to it. Furthermore, the processes running on
         each node normally work in concert to produce what appears to be a
         unified image rather than, say, each node working autonomously to
         compute a small part of a large problem. Thus, users of a graphics
         cluster are actively using all the nodes of the cluster
         simultaneously. This is in contrast to a computational cluster where
         a user sits down at the master node and starts up a computationally
         expensive job and then leaves the computers to run until the work
         completes.</para>

         <para>Users of graphics clusters should not have to sacrifice the
         simplicity of launching an application easily from the master node of
         the cluster, and this is where Maestro comes in. Rather than writing
         custom shell scripts or batch files and using remote shells to launch
         an interactive, immersive application, Maestro allows users to launch
         applications across all the nodes of a cluster in a simple, uniform
         manner. Maestro goes beyond just launching applications by providing
         extensions such as resource monitoring tools and cluster maintenance
         features. Users can write their own cluster-aware tools that plug in
         to Maestro in the form of a paired service and view. (More
         information on that is provided later in <xref
         linkend="chapter.extending.maestro" />.)</para>
      </section>

      <section>
         <title>Features</title>

         <indexterm class="startofrange" id="index.section.features">
            <primary>features</primary>
         </indexterm>

         <para>Now that we know what Maestro is, we can explain what it does.
         Below are some of the features of Maestro:</para>

         <itemizedlist>
            <listitem>
               <para>Support for multiple platforms (currently Linux and
               <productname class="registered">Microsoft Windows</productname>
               with support for Mac OS X and others to come)</para>
            </listitem>

            <listitem>
               <para>Support for mixed-OS clusters</para>
            </listitem>

            <listitem>
               <para>Remote application launching without requiring local
               logon at each cluster node (currently for Linux only)</para>
            </listitem>

            <listitem>
               <para>Integrated graphical editor for application launch
               files</para>
            </listitem>

            <listitem>
               <para>Remote process viewing and management</para>
            </listitem>

            <listitem>
               <para>Live display of CPU and memory usage statistics</para>
            </listitem>

            <listitem>
               <para>Encrypted communication between client and servers</para>
            </listitem>

            <listitem>
               <para>Pluggable authentication (currently supporting
               PAM<indexterm>
                     <primary>authentication</primary>

                     <secondary>PAM</secondary>
                  </indexterm> and <productname class="registered">Microsoft
               Windows</productname> domains<indexterm>
                     <primary>authentication</primary>

                     <secondary>Windows domains</secondary>
                  </indexterm>)</para>
            </listitem>

            <listitem>
               <para>Remote control of screen saver and power
               management</para>
            </listitem>

            <listitem>
               <para>Ability to reboot any or all nodes of a cluster</para>
            </listitem>

            <listitem>
               <para>Ability to reboot any or all nodes of a cluster to a
               different OS by interacting with the boot loader<indexterm>
                     <primary>boot loader</primary>
                  </indexterm> (currently, GRUB and the NT loader are
               supported)</para>
            </listitem>

            <listitem>
               <para>Graceful handling of disconnection and reconnection on
               the fly</para>
            </listitem>
         </itemizedlist>

         <indexterm class="endofrange" startref="index.section.features"></indexterm>

         <para>Maestro has been designed from the start to address the
         limitations associated with more brute force approaches to launching
         immersive software applications on graphics clusters. Its
         client/server architecture eliminates the need for scripts that rely
         on remote logon in order to launch processes on the cluster nodes.
         Application-specific details are captured in XML files that can
         reference site-wide configuration information in order to avoid
         duplicating common information for every application. These XML files
         are processed in order to create a graphical launching interface on
         the fly that is (roughly) tailored to the application. The processes
         launched on the remote nodes are run as an authenticated user in
         order to provide controlled access to data files and to prevent
         security issues associated with remote code execution.</para>
      </section>

      <section>
         <title>Getting Help</title>

         <para>Members of the Maestro community can post questions, feature
         suggestions, bug reports, etc. using the Maestro mailing lists. There
         are four lists, each with a different focus. The lists are managed by
         the <ulink url="http://www.gnu.org/software/mailman/index.html">GNU
         Mailman</ulink> software, and subscribing and unsubscribing is done
         through an easy-to-use web interface. For each of the lists below, a
         link is provided to the page where users can subscribe or view the
         list archive to search old posts.</para>

         <indexterm class="startofrange" id="index.section.help.lists">
            <primary>support</primary>

            <secondary>mailing lists</secondary>
         </indexterm>

         <orderedlist>
            <listitem>
               <para><ulink
               url="https://realityforge.vrsource.org/mailman/listinfo/maestro-announce">maestro-announce</ulink>:
               Release announcements only—no discussion. All Maestro users
               should subscribe to this list to keep up with releases as well
               as security notices. Since Maestro is designed to run as a
               service/daemon with elevated privileges, security is an
               important aspect of the software. Should a security problem be
               discovered, an announcement will be made on this list
               explaining the problem and providing a solution or workaround
               so that users are informed and can get the appropriate
               patches.</para>
            </listitem>

            <listitem>
               <para><ulink
               url="https://realityforge.vrsource.org/mailman/listinfo/maestro-announce">maestro-users</ulink>:
               Discussion and question &amp; answer forum for users. This is
               the best place to go for help with Maestro. Given a large
               enough community of users, this is the list that would have the
               most traffic as users discuss the software as well as ask and
               answer questions.</para>
            </listitem>

            <listitem>
               <para><ulink
               url="https://realityforge.vrsource.org/mailman/listinfo/maestro-devel">maestro-devel</ulink>:
               Discussion for Maestro developers and contributors. The focus
               of this list is the development of the software itself. Topics
               would include low-level details about the software architecture
               and the overall design. Formal bug reports should be directed
               here to get the attention of the developers and to avoid
               cluttering the maestro-users list. Informal bug reports often
               come in the form of user questions, however, and those would
               normally go to the maestro-users list.</para>
            </listitem>

            <listitem>
               <para><ulink
               url="https://realityforge.vrsource.org/mailman/listinfo/maestro-commits">maestro-commits</ulink>:
               Subversion commit messages. The traffic on this list is solely
               from commits being made to the Subversion repository.
               Subscribers are strongly discouraged from making direct posts
               to this list and should instead direct comments pertaining to
               changes to the maestro-devel list.</para>
            </listitem>
         </orderedlist>

         <indexterm class="endofrange" startref="index.section.help.lists"></indexterm>

         <para>For assistance beyond the mailing lists, <ulink
         url="http://www.infiscape.com/contact.php">contact Infiscape
         Corporation</ulink> to learn more about options for training,
         installation, and support.</para>
      </section>
   </chapter>

   <chapter id="chapter.installation">
      <title>Installation</title>

      <para>Maestro is a tool built on top of other tools. In order to install
      Maestro, its dependencies must be installed first. Since it is broken up
      into a client application and a server application, some nodes will not
      need all the dependencies. For example, a node that only runs the server
      application will not need the widget set (<ulink
      url="http://www.trolltech.com/products/qt">Qt</ulink>) used by the GUI.
      Similarly, a node that only runs the client GUI and not the server will
      not need the authentication modules.</para>

      <sidebar>
         <para>Much of the information here is provided for people who are
         working with an unpackaged version of Maestro. Due to the number of
         dependencies and the usual complexities involved with acquiring,
         building, and installing software, most users should get a
         pre-packaged version of Maestro and install it. A packaged version
         will include the dependencies in one form or another in order to ease
         the installation process.</para>
      </sidebar>

      <section>
         <title>Getting Dependencies</title>

         <para>Below, we list the current dependencies of Maestro and provide
         links to each package's download site. This list comes from the
         Maestro website page describing <ulink
         url="https://realityforge.vrsource.org/trac/maestro/wiki/Dev/GettingTheCode">how
         to get Maestro</ulink>. That page will always provide up-to-date
         information, and it should be consulted in case this rendering of the
         documentation is out of date with respect to the current state of the
         dependencies.</para>

         <itemizedlist>
            <listitem>
               <para><ulink
               url="http://www.python.org/download/">Python</ulink> 2.3 or
               newer</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://www.trolltech.com/products/qt/downloads">Qt</ulink>
               4.2.0 (client GUI only)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://www.riverbankcomputing.com/Downloads/Snapshots/sip4/">SIP
               4 snapshot</ulink> from October 8, 2006 (client GUI
               only)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://www.riverbankcomputing.com/Downloads/Snapshots/PyQt4/">PyQt
               4 snapshot</ulink> from October 8, 2006, with patches included
               in Maestro source tree (client GUI only)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://effbot.org/downloads/#elementtree">ElementTree</ulink>
               1.2.6-20050316</para>
            </listitem>

            <listitem>
               <para><ulink url="http://twistedmatrix.com/">Twisted</ulink>
               2.4.0</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://pyopenssl.sourceforge.net/">pyOpenSSL</ulink> 0.6.1
               (<ulink
               url="http://twisted.sourceforge.net/contrib/pyOpenSSL-0.6.win32-py2.3.exe">Windows
               installer</ulink>)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://sourceforge.net/project/showfiles.php?group_id=78018">pywin32</ulink>
               (Windows only)</para>
            </listitem>

            <listitem>
               <para><ulink
               url="http://www.pangalactic.org/PyPAM/">PyPAM</ulink> 0.4.2
               (Linux server only; <ulink
               url="https://realityforge.vrsource.org/trac/maestro/attachment/wiki/Dev/GettingTheCode/python-pam_0.4.2-10.4.tar.gz">known
               working source</ulink>)</para>
            </listitem>
         </itemizedlist>

         <para>Maestro also relies upon the <ulink
         url="http://www.zope.org/Products/ZopeInterface">zope.interface
         package</ulink>, and the source for this is usually included with the
         Twisted 2.4 source. It must be installed before installing Twisted,
         so be sure to read the Twisted installation instructions carefully.
         For people who plan on using <application>Qt Designer</application>
         to make custom views or to modify the <application>Maestro
         GUI</application>, <ulink url="http://www.scons.org/">SCons</ulink>
         and <ulink
         url="https://realityforge.vrsource.org/view/SconsAddons/WebHome">SConsAddons</ulink>
         can be used to run <command>pyuic4</command> in order to generate the
         Python code from the <application>Qt Designer</application>
         <filename>.ui</filename> files.</para>
      </section>

      <section>
         <title>Getting Maestro</title>

         <para>Maestro is open source software, and it can be obtained
         directly from its <ulink
         url="http://subversion.tigris.org/">Subversion</ulink> repository.
         This is done using the following command:</para>

         <screen>svn co https://realityforge.vrsource.org/svn/maestro/trunk maestro</screen>

         <para>As of this writing, there are no branches or tags to retrieve,
         so the trunk is the only path to get source.</para>

         <sidebar>
            <para>The certificate used for Subversion access on <ulink
            url="https://realityforge.vrsource.org/">RealityForge</ulink> is
            not signed by a certificate authority. As a result, users must
            accept the certificate manually the first time they connect. A
            message similar to the following will be displayed:</para>

            <screen>Error validating server certificate for 'https://realityforge.vrsource.org:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: *.vrsource.org
 - Valid: from Sep 26 22:15:16 2006 GMT until Sep 25 22:15:16 2008 GMT
 - Issuer: IT, vrsource, Ames, IA, US
 - Fingerprint: 43:86:70:52:50:b2:ef:17:93:fa:e2:c7:ee:ed:09:d5:fe:c3:ca:b8
(R)eject, accept (t)emporarily or accept (p)ermanently?</screen>

            <para>Simply accept the certificate permanently, and this message
            will not appear again (until 2008 when the certificate expires and
            is reissued).</para>
         </sidebar>

         <para>Releases of Maestro are distributed in various ways. The source
         is packaged up as compressed <command>tar</command>(1) archives and
         as ZIP archives. For Linux distributions that use the Red Hat Package
         Manager (RPM) for package management, .rpm files are prepared. The
         Maestro RPMs are not specific to any distribution or Python version,
         but the dependencies are. As such, it is important to get the right
         dependencies for the Linux distribution where Maestro will be
         used.</para>

         <section>
            <title><command>maestrod</command> Installation</title>

            <para></para>
         </section>

         <section>
            <title><application>Maestro GUI</application> Installation</title>

            <para></para>
         </section>
      </section>
   </chapter>

   <chapter id="chapter.using.maestrod">
      <title>Using Maestro</title>

      <section id="section.usage.server">
         <title>Using the Maestro Server</title>

         <para>The server side of the Maestro software is an application
         called <command>maestrod</command> (pronounced
         <quote>maestro-dee</quote>). On <productname
         class="registered">Microsoft Windows</productname>, it runs as a
         service as the SYSTEM user; on other platforms, it runs as a daemon
         as root. In this section, we explain how to use
         <command>maestrod</command>.</para>

         <section id="section.running.maestrod">
            <title>Running <command>maestrod</command></title>

            <para>In general, maestrod will be running as a background
            service/daemon that users do not need to worry about starting and
            stopping. Nevertheless, to get a complete understanding of how
            Maestro works, it is useful to understand how the server side is
            managed. Below, we explain how the Maestro service is installed
            and started on <productname class="registered">Microsoft
            Windows</productname> and then how the Maestro daemon is installed
            on managed on Linux.</para>

            <section>
               <title>The <productname class="registered">Microsoft
               Windows</productname> Maestro Service</title>

               <indexterm class="startofrange" id="index.maestrod.service">
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>
               </indexterm>

               <para>On <productname class="registered">Microsoft
               Windows</productname>, the automated installer sets up the
               Maestro service and starts it running. Hence, by using that
               installer, there is nothing further that has to be done in
               order to run maestrod on that platform. However, if the
               installer was not used, the process of installing and starting
               the service is quite simple. As a user with administrative
               privileges, simply run the following in the directory
               containing the Maestro distribution:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>installation</tertiary>
               </indexterm>

               <screen>maestrod.py --interactive --startup auto install
maestrod.py start</screen>

               <para>Should it become necessary to remove the service, run
               these commands as a user with administrative privileges in the
               directory containing the Maestro distribution:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>start</tertiary>
               </indexterm>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>stop</tertiary>
               </indexterm>

               <screen>maestrod.py stop
maestrod.py remove</screen>

               <para>Running <command>maestrod</command> as a service causes
               it to be run as the SYSTEM user. In general this is how most
               people would run <command>maestrod</command> since that user
               has all the necessary privileges in order for the Maestro
               software to work. Sometimes it is useful to run
               <command>maestrod</command> in debug mode, but doing this
               requires that the logged on user have the necessary privileges
               to spawn processes as other users and to impersonate other
               users. To get these privileges, follow these steps:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>user security policies</tertiary>
               </indexterm>

               <orderedlist>
                  <listitem>
                     <para>Open the Start Menu, click
                     <guimenuitem>Run...</guimenuitem>, and enter
                     <command>secpol.msc</command>.</para>
                  </listitem>

                  <listitem>
                     <para>Find the policy item labeled <quote>Impersonate a
                     client after authentication</quote> and double-click
                     it.</para>
                  </listitem>

                  <listitem>
                     <para>In the dialog box, enter the user name (with domain
                     if necessary) for the user who will be running
                     <command>maestrod</command> and click OK.</para>
                  </listitem>

                  <listitem>
                     <para>Do the same for the policy item labeled
                     <quote>Replace a process level token.</quote></para>
                  </listitem>

                  <listitem>
                     <para>Log out and log in as the user who can now
                     impersonate other users.</para>
                  </listitem>
               </orderedlist>

               <para>Now, open a command shell and change to the directory
               containing the Maestro distribution. If the Maestro service is
               still running, enter the following:</para>

               <screen>maestrod.py stop</screen>

               <para>At the prompt, run the following:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary><productname
                  class="registered">Windows</productname> service</secondary>

                  <tertiary>debug mode</tertiary>
               </indexterm>

               <screen>maestrod.py -debug</screen>

               <indexterm class="endofrange" startref="index.maestrod.service"></indexterm>
            </section>

            <section>
               <title>The UNIX/Linux Maestro Daemon</title>

               <indexterm class="startofrange" id="index.maestrod.daemon">
                  <primary>maestrod</primary>

                  <secondary>daemon</secondary>
               </indexterm>

               <para>For non-Windows platforms, <command>maestrod</command>
               runs as a background daemon as the root user. Currently, Linux
               is the only non-Windows platform supported, so this part of the
               documentation will focus on how it is installed and used on
               Linux. In the future, this text will be expanded to cover other
               operating systems.</para>

               <para>Maestro is packaged up for deployment on Linux using RPM
               files. For the server side, there are two packages to install:
               maestro-base and maestro-server. The maestro-base package
               contains the core Python code that is used by both
               <command>maestrod</command> and the Maestro client GUI;
               maestro-server contains all the server-side code, scripts, and
               data files. When the maestro-server package is installed on
               Linux, there is a shell script added to
               <filename>/etc/init.d</filename> called
               <filename>maestrod</filename><indexterm>
                     <primary><filename>/etc/init.d/maestrod</filename></primary>

                     <see>maestrod</see>
                  </indexterm><indexterm>
                     <primary>maestrod</primary>

                     <secondary>daemon</secondary>

                     <tertiary><filename>/etc/init.d/maestrod</filename></tertiary>
                  </indexterm>. This script can be used by the root user to
               start and stop the Maestro daemon as shown below:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary>daemon</secondary>

                  <tertiary>Linux start</tertiary>
               </indexterm>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary>daemon</secondary>

                  <tertiary>Linux stop</tertiary>
               </indexterm>

               <screen>/etc/init.d/maestrod start
/etc/init.d/maestrod stop</screen>

               <para>The actual command that is run by this shell script is
               another shell script named <filename>maestrod</filename>
               installed in <filename>/usr/sbin</filename><indexterm>
                     <primary><filename>/usr/sbin/maestrod</filename></primary>

                     <see>maestrod</see>
                  </indexterm><indexterm>
                     <primary>maestrod</primary>

                     <secondary>daemon</secondary>

                     <tertiary><filename>/usr/sbin/maestrod</filename></tertiary>
                  </indexterm>. This command can be run directly in debug mode
               as follows:</para>

               <indexterm>
                  <primary>maestrod</primary>

                  <secondary>daemon</secondary>

                  <tertiary>debug mode</tertiary>
               </indexterm>

               <screen>/usr/sbin/maestrod -debug</screen>

               <para>Running <command>/usr/sbin/maestrod</command> without the
               <option>-debug</option> option causes it to start up as a
               background daemon. Running <command>maestrod</command> requires
               root privileges in order to perform the PAM authentication of
               remote users<indexterm>
                     <primary>authentication</primary>

                     <secondary>PAM</secondary>
                  </indexterm>, so all of the above must be run as
               root.</para>

               <indexterm class="endofrange" startref="index.maestrod.daemon"></indexterm>
            </section>
         </section>

         <section>
            <title>Configuring <command>maestrod</command></title>

            <indexterm class="startofrange" id="index.section.maestrod.xcfg">
               <primary><filename>maestrod.xcfg</filename></primary>
            </indexterm>

            <para>The <command>maestrod</command> software uses a
            configuration file named <filename>maestrod.xcfg</filename>. This
            file can be located in the same directory as the
            <filename>maestrod.py</filename> file or in
            <filename>/etc</filename>. It uses XML, but its form is quite
            flexible. This flexibility is offered to allow service plug-in
            authors (see <xref linkend="section.extending.services" />) to
            configure their plug-ins in the manner that best suits their
            needs. The only requirement is that the root node must be
            <sgmltag>&lt;maestrod&gt;</sgmltag><indexterm>
                  <primary><filename>maestrod.xcfg</filename></primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;maestrod&gt;</sgmltag></tertiary>
               </indexterm>. Beneath that, the structure can be arbitrarily
            deep nesting with any attributes and CDATA needed to configure
            server-side components. In this section, we explain how to
            configure <command>maestrod</command> and the services that are
            included with Maestro by default.</para>

            <section>
               <title><command>maestrod</command> Settings</title>

               <para>When <command>maestrod</command> is running on a
               operating system that uses the X Window System, the
               authenticated user must be allowed to open windows on the local
               X server. This is done by granting modifying the authenticated
               user's <filename>~/.Xauthority</filename> file to include the
               local X server's authorization key using the
               <command>xauth</command>(1) command. To avoid tying
               <command>maestrod</command> to any specific operating system
               installation or site configuration, the path to
               <command>xauth</command>(1) and the local X server's Xauthority
               file are configurable. For example, we see in <xref
               linkend="example.maestrod.xcfg.rhel4" /> how to configure
               maestrod to run on Red Hat Enterprise Linux 4. For Fedora Core
               5, the configuration is slightly different, as seen in <xref
               linkend="example.maestrod.xcfg.fc5" />. In both cases, <ulink
               url="http://www.gnome.org/projects/gdm/">GDM</ulink> is being
               used as the X display manager. The path to the Xauthority file
               would differ if using <ulink
               url="http://docs.kde.org/en/HEAD/kdebase/kdm/">KDM</ulink> or
               XDM.</para>

               <indexterm>
                  <primary><filename>maestrod.xcfg</filename></primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;xauth_cmd&gt;</sgmltag></tertiary>
               </indexterm>

               <indexterm>
                  <primary><filename>maestrod.xcfg</filename></primary>

                  <secondary>elements</secondary>

                  <tertiary><sgmltag>&lt;xauthority_file&gt;</sgmltag></tertiary>
               </indexterm>

               <example id="example.maestrod.xcfg.rhel4">
                  <title><command>maestrod.xcfg</command> for Red Hat
                  Enterprise Linux 4</title>

                  <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
&lt;/maestrod&gt;</programlisting>
               </example>

               <example id="example.maestrod.xcfg.fc5">
                  <title><command>maestrod.xcfg</command> for Fedora Core
                  5</title>

                  <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
&lt;/maestrod&gt;</programlisting>
               </example>
            </section>

            <section id="section.maestrod.settings.reboot">
               <title>Reboot Service Settings</title>

               <indexterm class="startofrange"
                          id="index.sectcion.service.reboot.settings">
                  <primary>services</primary>

                  <secondary>reboot</secondary>

                  <tertiary>settings</tertiary>
               </indexterm>

               <indexterm>
                  <primary>rebooting</primary>

                  <seealso>boot loader</seealso>
               </indexterm>

               <para>The Reboot Service<indexterm>
                     <primary>services</primary>

                     <secondary>reboot</secondary>
                  </indexterm> makes it possible for the <application>Maestro
               GUI</application> user to reboot the machine where maestrod is
               running and, when possible, to change the operating system
               loaded on the next boot. To do this in a flexible manner, the
               service uses pluggable boot loader handling plug-ins. In order
               for the service to know which plug-in to use, it looks at
               <filename>maestrod.xcfg</filename> and the
               <sgmltag>&lt;boot_loader&gt;</sgmltag><indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;boot_loader&gt;</sgmltag></tertiary>
                  </indexterm> XML element. The CDATA in this element names
               which loader to use. Maestro comes with plug-ins for
               GRUB<indexterm>
                     <primary>boot loader</primary>

                     <secondary>GRUB</secondary>
                  </indexterm> and for the NT Loader<indexterm>
                     <primary>boot loader</primary>

                     <secondary>NT Loader</secondary>
                  </indexterm> (used by <productname
               class="registered">Microsoft Windows</productname> NT 4.0
               through <productname class="registered">Windows</productname>
               XP). The corresponding values to use for the
               <sgmltag>&lt;boot_loader&gt;</sgmltag> CDATA are
               <literal>GRUB</literal> and <literal>ntldr</literal>
               respectively. If no value is set, the GRUB plug-in is used as
               the default.</para>

               <para>The GRUB plug-in itself looks at maestrod.xcfg for
               information. More specifically, the plug-in needs to know where
               to find <filename>grub.conf</filename>. This path is set using
               the <sgmltag>&lt;grub_conf&gt;</sgmltag> XML element. Examples
               of configuring the Reboot Service for GRUB and the NT Loader
               are shown in <xref
               linkend="example.maestrod.xcfg.reboot.grub" /> and in <xref
               linkend="example.maestrod.xcfg.reboot.ntldr" /> respectively.
               Note that the NT Loader example includes the
               <sgmltag>&lt;grub_conf&gt;<indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;grub_conf&gt;</sgmltag></tertiary>
                  </indexterm></sgmltag> XML element. This is not necessary
               since the NT Loader plug-in does not care about
               <filename>grub.conf</filename>, but it demonstrates that having
               additional, unused data is not invalid. (For that matter, the
               <filename>maestrod.xcfg</filename> in <xref
               linkend="example.maestrod.xcfg.reboot.ntldr" /> might be for a
               <productname class="registered">Microsoft Windows</productname>
               installation of <command>maestrod</command>, and thus the
               Xauthority information would be ignored entirely.)</para>

               <example id="example.maestrod.xcfg.reboot.grub">
                  <title><command>maestrod.xcfg</command>: Using GRUB with the
                  Reboot Service</title>

                  <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/boot/grub/grub.conf&lt;/grub_conf&gt;
&lt;/maestrod&gt;</programlisting>
               </example>

               <example id="example.maestrod.xcfg.reboot.ntldr">
                  <title><command>maestrod.xcfg</command>: Using the NT Loader
                  with the Reboot Service</title>

                  <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;ntldr&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/boot/grub/grub.conf&lt;/grub_conf&gt;
&lt;/maestrod&gt;</programlisting>
               </example>

               <para>Being able to change the target OS for rebooting relies
               upon two things: knowledge of the boot loader<indexterm>
                     <primary>boot loader</primary>
                  </indexterm> on the server side and access to the boot
               loader configuration from all installed operating systems.
               Without both of these, it is not possible to change the target
               OS. For example, if the GRUB configuration file cannot be
               accessed from <productname class="registered">Microsoft
               Windows</productname>, then it is not possible to change the
               default OS that GRUB boots when the computer is currently
               booted into <productname class="registered">Microsoft
               Windows</productname>. Similarly, if boot loader is being used
               that is unknown to the Reboot Service<indexterm>
                     <primary>services</primary>

                     <secondary>reboot</secondary>
                  </indexterm> (such as <productname
               class="trade">BootMagic</productname><indexterm>
                     <primary>boot loader</primary>

                     <secondary>BootMagic</secondary>
                  </indexterm>), then it is not possible to change the target
               OS at all. Support for different boot loaders can be added as a
               plug-in to the Maestro Reboot Service<indexterm>
                     <primary>services</primary>

                     <secondary>reboot</secondary>
                  </indexterm>. See for <xref
               linkend="section.plugins.boot.loader" /> more
               information.</para>

               <para>Given these constraints, it is vital to make the boot
               loader configuration editable by all operating systems on the
               computer. If there is only one OS involved, then the default
               installation of the boot loader will be fine. (For a computer
               that only has <productname class="registered">Microsoft
               Windows</productname> installed, there may not be any obvious
               use of a boot loader even though it is present and involved
               with the boot process every time.) For multiple operating
               systems, however, things get more complicated. Below, we
               provide recommendations for how to make supported boot loaders
               work with Maestro and its rebooting capabilities.</para>

               <section>
                  <title>Setting Up GRUB for use with Maestro</title>

                  <indexterm class="startofrange"
                             id="index.section.boot.loader.config.grub">
                     <primary>boot loader</primary>

                     <secondary>GRUB</secondary>

                     <tertiary>use with Maestro</tertiary>
                  </indexterm>

                  <indexterm>
                     <primary>GRUB</primary>

                     <see>boot loader</see>
                  </indexterm>

                  <important>
                     <para>Before making any changes to the GRUB installation,
                     read this entire section very carefully. It is
                     <emphasis>not</emphasis> intended to be used in a
                     step-by-step fashion where readers are performing the
                     steps as they read them for the first time. Rather,
                     readers should understand the whole process first and be
                     prepared to perform the steps before actually executing
                     them.</para>
                  </important>

                  <para>On a computer that uses GRUB (the <ulink
                  url="http://www.gnu.org/software/grub/">Grand Unified
                  Bootloader</ulink>) to choose which operating system to
                  load, a file called <filename>grub.conf</filename><indexterm>
                        <primary>boot loader</primary>

                        <secondary>GRUB</secondary>

                        <tertiary>grub.conf</tertiary>
                     </indexterm> is stored on disk in a location that must be
                  readable by the GRUB second stage loader. This file lists
                  all the known operating systems with instructions on how to
                  boot each one. If GRUB was installed as part of a Linux
                  installation, then the GRUB files are likely to be in the
                  directory <filename>/boot/grub</filename>. Depending on how
                  things were installed, this may be in its own partition or
                  in the partition containing the root Linux file
                  system.</para>

                  <indexterm class="startofrange"
                             id="index.section.boot.loader.config.grub.fat32">
                     <primary>boot loader</primary>

                     <secondary>GRUB</secondary>

                     <tertiary>FAT32 installation</tertiary>
                  </indexterm>

                  <para>The Maestro Reboot Service<indexterm>
                        <primary>services</primary>

                        <secondary>reboot</secondary>
                     </indexterm> has a plug-in that knows how to read and
                  modify <filename>grub.conf</filename> in order to allow
                  rebooting into any of the operating systems known to GRUB.
                  Getting <filename>grub.conf</filename> and all the other
                  GRUB files into a location that is readable and writable by
                  all installed operating systems is the tricky part.
                  Fortunately, GRUB comes with support for many file system
                  types, so it can be installed just about anywhere. At the
                  same time, <productname class="registered">Microsoft
                  Windows</productname> does not include support for many file
                  system types, so it becomes the limiting factor. The lowest
                  common denominator among most modern operating systems and
                  GRUB is the FAT32 file system. By (re-)installing GRUB into
                  a FAT32 partition, the <filename>grub.conf</filename> file
                  will be readable and writable by all operating systems and
                  by GRUB at boot time.</para>

                  <caution>
                     <para>The process for installing GRUB into a FAT32 file
                     system manually is not difficult, but it requires care.
                     If the boot blocks of a disk are not set up properly, the
                     computer will be rendered unbootable, so having a
                     recovery CD that can reinstall some boot loader (such as
                     the default Master Boot Record [MBR] or GRUB's first
                     stage loader) is highly recommended. Furthermore,
                     understand of how boot loaders and boot blocks work will
                     come in very handy if anything should go wrong.</para>
                  </caution>

                  <para>The first step of installing GRUB onto a FAT32
                  partition is to create the partition. It does not need to be
                  large (a GRUB installation requires roughly 200 kB of
                  storage), and since the partition may be used for other
                  things that just giving GRUB a home, users should consider
                  carefully just how large to make it. For the purposes of
                  this discussion, let us say that the FAT32 partition is the
                  third primary partition on the first hard disk. In <ulink
                  url="http://www.gnu.org/software/grub/manual/html_node/Naming-convention.html#Naming-convention">GRUB
                  terminology</ulink>, this makes it partition (hd0,2). The
                  actual disk and partition used will vary from site to
                  site.</para>

                  <para>Once the partition is created, a GRUB <ulink
                  url="http://www.gnu.org/software/grub/manual/html_node/Creating-a-GRUB-boot-floppy.html">boot
                  floppy</ulink> or <ulink
                  url="http://www.gnu.org/software/grub/manual/html_node/Making-a-GRUB-bootable-CD-ROM.html">boot
                  CD</ulink> is needed. However, the steps described in the
                  referenced pages will not produce a complete GRUB
                  installation device. Instead, they are intended to give the
                  user a way to load GRUB, not install it. To simplify things,
                  we have a pre-made <ulink
                  url="https://realityforge.vrsource.org/trac/maestro/attachment/wiki/Start/MaestroAndGrub/grub.iso">GRUB
                  0.95 boot CD ISO image</ulink><indexterm>
                        <primary>boot loader</primary>

                        <secondary>GRUB</secondary>

                        <tertiary>bootable CD installation image</tertiary>
                     </indexterm> that can be burned to a CD (using a CD-R or
                  a CD-RW works). The resulting CD will be capable of
                  installing GRUB onto any file system supported by
                  GRUB.</para>

                  <para>With a bootable GRUB installation medium ready to go,
                  boot the computer using the created floppy or CD, and at the
                  GRUB prompt, enter the following:</para>

                  <screen>root (hd0,2)
setup (hd0)</screen>

                  <para>This will install GRUB from the installation medium
                  onto the third partition of the first hard disk (our FAT32
                  partition) and install the GRUB first stage boot loader to
                  the boot blocks of the first disk. The GRUB files will go
                  into the directory <filename>boot/grub</filename> on the
                  partition. This directory would be accessed as
                  <filename>&lt;drive&gt;:\boot\grub</filename> in
                  <productname class="registered">Microsoft
                  Windows</productname>. On non-Windows operating systems, the
                  FAT32 partition mount point would determine how the files
                  get accessed.</para>

                  <para>The next step would be to reboot the computer, but we
                  must first consider what the user will see upon rebooting.
                  Unless a <filename>grub.conf</filename> was included with
                  the GRUB installation (the boot CD ISO image referenced
                  above does not include one), rebooting would leave the user
                  at a GRUB prompt. Without a good understanding of how to use
                  GRUB through its command interface, there is not much that
                  the average user can do at this point. To address this, an
                  existing <filename>grub.conf</filename> could be placed into
                  the <filename>boot/grub</filename> directory on the FAT32
                  partition <emphasis>prior</emphasis> to installing GRUB. For
                  example, let us assume that the newly created FAT32
                  partition has been mounted at <filename>/mnt</filename> in
                  Linux and that the original GRUB installation is in
                  <filename>/boot/grub</filename>. The following commands (run
                  as root or another user with write access to
                  <filename>/mnt/boot/grub</filename>) would get the existing
                  <filename>grub.conf</filename> into place for use by the
                  GRUB installation that will be located in the FAT32
                  partition:</para>

                  <screen>mkdir -p /mnt/boot/grub
cp /boot/grub/grub.conf /mnt/boot/grub</screen>

                  <indexterm class="endofrange"
                             startref="index.section.boot.loader.config.grub.fat32"></indexterm>

                  <para>Once we have GRUB installed in the FAT32 partition
                  with a working <filename>grub.conf</filename>, we can reboot
                  the computer. The GRUB configuration will be loaded from the
                  FAT32 partition, and booting can behave just as it did
                  before. They key difference is that now the Maestro Reboot
                  Service<indexterm>
                        <primary>services</primary>

                        <secondary>reboot</secondary>
                     </indexterm> plug-in for GRUB can edit
                  <filename>grub.conf</filename> on all operating
                  systems.</para>

                  <para>After all of that, <filename>maestrod.xcfg</filename>
                  must be updated to point to the new location for
                  <filename>grub.conf</filename>. For Linux, let us assume
                  that the FAT32 partition will be mounted at
                  <filename>/fat32</filename> every time the computer boots.
                  In that case, <filename>maestrod.xcfg</filename> would be
                  similar to what is shown in <xref
                  linkend="example.maestrod.xcfg.reboot.grub.linux" />. On
                  <productname class="registered">Microsoft
                  Windows</productname>, let us assume that the FAT32
                  partition is accessed as drive <filename>E:</filename>,
                  which would mean that <filename>maestrod.xcfg</filename>
                  would be similar to that shown in <xref
                  linkend="example.maestrod.xcfg.reboot.grub.windows" />.</para>

                  <indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;grub_conf&gt;</sgmltag></tertiary>
                  </indexterm>

                  <example id="example.maestrod.xcfg.reboot.grub.linux">
                     <title><command>maestrod.xcfg</command>: Multi-Platform
                     <filename>grub.conf</filename> Access (Linux)</title>

                     <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/fat32/grub/grub.conf&lt;/grub_conf&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <example id="example.maestrod.xcfg.reboot.grub.windows">
                     <title><command>maestrod.xcfg</command>: Multi-Platform
                     <filename>grub.conf</filename> Access (<productname
                     class="registered">Microsoft
                     Windows</productname>)</title>

                     <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;E:\grub\grub.conf&lt;/grub_conf&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <indexterm class="endofrange"
                             startref="index.section.boot.loader.config.grub"></indexterm>
               </section>

               <section>
                  <title>Setting Up the NT Loader for use with Maestro</title>

                  <indexterm class="startofrange"
                             id="index.section.boot.loader.config.nt">
                     <primary>boot loader</primary>

                     <secondary>NT Loader</secondary>

                     <tertiary>use with Maestro</tertiary>
                  </indexterm>

                  <indexterm>
                     <primary>NT Loader</primary>

                     <see>boot loader</see>
                  </indexterm>

                  <indexterm>
                     <primary>NTLDR</primary>

                     <see>boot loader</see>
                  </indexterm>

                  <note>
                     <para>As of this writing, the NT Loader plug-in for the
                     Reboot Service is only available on <productname
                     class="registered">Microsoft Windows</productname>. It
                     still needs to be extended to be able to access boot.ini
                     from non-Windows platforms. As such, it is not yet
                     suitable for switching back and forth between
                     <productname class="registered">Microsoft
                     Windows</productname> and other operating systems.</para>
                  </note>

                  <para>The boot loader used by <productname
                  class="registered">Microsoft Windows</productname> NT 4.0
                  through <productname
                  class="registered">Windows</productname> XP is known as
                  <ulink
                  url="http://en.wikipedia.org/wiki/NTLDR">NTLDR</ulink> (or
                  the NT Loader). It uses a file named
                  <filename>boot.ini</filename><indexterm>
                        <primary>boot loader</primary>

                        <secondary>NT Loader</secondary>

                        <tertiary>boot.ini</tertiary>
                     </indexterm> (located on the same disk as the NT Loader)
                  to present the user with a menu of options to choose for
                  booting the computer. By editing this file, the Maestro
                  Reboot Service<indexterm>
                        <primary>services</primary>

                        <secondary>reboot</secondary>
                     </indexterm> plug-in for the NT Loader can change which
                  OS is chosen as the default boot target the next time the
                  computer is booted. As with GRUB<indexterm>
                        <primary>boot loader</primary>

                        <secondary>GRUB</secondary>
                     </indexterm> and its <filename>grub.conf</filename> file,
                  however, the <filename>boot.ini</filename> file must be
                  writable from all operating systems installed on the
                  computer in order to allow rebooting from one OS to
                  another.</para>

                  <para>Changing <filename>boot.ini</filename> from
                  <productname class="registered">Microsoft
                  Windows</productname> is not a problem. The complexity comes
                  in when using the NT file system (<ulink
                  url="http://en.wikipedia.org/wiki/NTFS">NTFS</ulink>) and
                  trying to modify <filename>boot.ini</filename> from another
                  operating system such as Linux. There is a freely available
                  <ulink url="http://www.linux-ntfs.org/">Linux kernel
                  module</ulink> that adds support for accessing NTFS
                  partitions. While reading from an NTFS partition in Linux
                  works very well, writing is still considered to be
                  dangerous. File system corruption resulting from writing to
                  an NTFS partition from Linux is something that is well
                  within the realm of possibility. Nevertheless, the <ulink
                  url="http://www.linux-ntfs.org/content/view/15/29/">information
                  about the current version</ulink> of said Linux kernel
                  module (2.1.20 at the time of this writing) states that it
                  allows resizing of existing files. Given that the default
                  boot target specification in <filename>boot.ini</filename>
                  is a path rather than an index, the likelihood of changing
                  the size of <filename>boot.ini</filename> in order to modify
                  the default setting is quite high. Therefore, it is vital
                  that resizing of existing files in an NTFS partition from
                  Linux be supported.</para>

                  <para>An alternative to using the Linux kernel module is to
                  use <ulink
                  url="http://wiki.linux-ntfs.org/doku.php?id=ntfsmount">ntfsmount</ulink>.
                  It is a more fully featured approach to accessing NTFS
                  partitions from Linux, though it tends to have slower
                  performance than the kernel module. Resizing of files always
                  works with ntfsmount, and if performance is not a concern
                  for accessing the NTFS partition, then it would probably be
                  a safer approach. Documentation is provided on the <ulink
                  url="http://wiki.linux-ntfs.org/doku.php?id=ntfsmount">ntfsmount
                  page</ulink> for using it to access NTFS partitions from
                  Linux.</para>

                  <indexterm class="endofrange"
                             startref="index.section.boot.loader.config.nt"></indexterm>

                  <indexterm class="endofrange"
                             startref="index.sectcion.service.reboot.settings"></indexterm>
               </section>
            </section>

            <section>
               <title>Desktop Service Settings</title>

               <indexterm class="startofrange"
                          id="index.sectcion.service.desktop.settings">
                  <primary>services</primary>

                  <secondary>desktop</secondary>

                  <tertiary>settings</tertiary>
               </indexterm>

               <para>The Desktop Service<indexterm>
                     <primary>services</primary>

                     <secondary>desktop</secondary>
                  </indexterm> controls the use of a screen saver and power
               management on the machine running <command>maestrod</command>,
               and it allows remote manipulation of the local desktop
               wallpaper image (when a user is logged on to the local node).
               This is made possible through the use of a collection of
               plug-ins that capture various mechanisms for screen saver
               usage, power management, and desktop wallpaper switching, and
               the plug-ins to use are chosen through
               <filename>maestrod.xcfg</filename>. We begin with the screen
               saver and power management together since they are closely
               related. We then explain how the desktop wallpaper switching is
               configured.</para>

               <section>
                  <title>Screen Saver and Power Management Settings</title>

                  <para>Screen savers and power management are very common
                  features of modern operating systems. Both, however,
                  interfere with the usage of graphics applications that are
                  run on clusters. We do not want a screen saver to activate
                  or a screen to go black in the middle of running a VR
                  demonstration as it would, among other things, ruin the
                  suspension of disbelief. The Desktop Service uses one or
                  more plug-ins to disable and deactivate screen savers and
                  power management. The plug-ins to use are identified using
                  the <sgmltag>&lt;saver_types&gt;</sgmltag><indexterm>
                        <primary><filename>maestrod.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;saver_types&gt;</sgmltag></tertiary>
                     </indexterm> XML element in
                  <filename>maestrod.xcfg</filename>. The value is a
                  comma-separated list of plug-ins to use. The current set of
                  screen saver and power management plug-ins are as follows
                  (identified by their <emphasis>case-sensitive</emphasis>
                  name used in the <sgmltag>&lt;saver_types&gt;</sgmltag>
                  list):</para>

                  <itemizedlist>
                     <listitem>
                        <para><literal>windows</literal>: Screen saver
                        management using the regular Windows desktop screen
                        saver.</para>

                        <important>
                           <para>This plug-in does not support unlocking a
                           display that is locked by a screen saver that
                           requires a password. It could be extended to disable
                           password authorization prior to the screen saver
                           being activated, but in general, cluster nodes
                           running <productname class="registered">Microsoft
                           Windows</productname> must currently be configured
                           so that the logged on user's screen saver does not
                           require a password to be deactivated.</para>
                        </important>
                     </listitem>

                     <listitem>
                        <para><literal>powercfg</literal>: Power management
                        using the Windows utility program
                        <command>powercfg.exe</command> to control monitor
                        power off. </para>

                        <note>
                           <para>The <command>powercfg.exe</command> utility
                           was introduced with <productname
                           class="registered">Microsoft Windows</productname>
                           Server 2003 and is available on <productname
                           class="registered">Windows</productname> XP SP2.
                           According to Microsoft, it is not guaranteed to work
                           with <productname class="registered">Microsoft
                           Windows</productname> 2000.</para>
                        </note>
                     </listitem>

                     <listitem>
                        <para><literal>xset</literal>: Screen blanking and
                        DPMS management through the X server. Unless the X
                        server is configured to disable screen blanking and
                        DPMS explicitly, this plug-in will always be needed on
                        operating systems using the X Window System.</para>
                     </listitem>

                     <listitem>
                        <para><literal>xscreensaver</literal>: Screen saver
                        and screen locking using the <ulink
                        url="http://www.jwz.org/xscreensaver/">XScreenSaver</ulink>
                        software. This is only needed when users are routinely
                        logged on to cluster nodes in order to prevent their
                        screen saver from activating. For cluster nodes using
                        the X Window System, it is not necessary for users to
                        be logged on locally in order for graphics windows to
                        be displayed, so this plug-in would generally not be
                        needed.</para>
                     </listitem>
                  </itemizedlist>

                  <para>Below, we show examples of
                  <filename>maestrod.xcfg</filename> settings for Microsoft
                  Windows and Linux. Note that <xref
                  linkend="example.maestrod.xcfg.desktop.saver.linux.xscreensaver" />
                  includes additional settings used by the
                  <literal>xscreensaver</literal> plug-in. These settings
                  provide the paths to the XScreenSaver commands
                  <command>xscreensaver</command> and
                  <command>xscreensaver-command</command>. Both are used by
                  the plug-in and must be set when it is in use.</para>

                  <important>
                     <para>If there is no value set for
                     <sgmltag>&lt;saver_types&gt;</sgmltag><indexterm>
                           <primary><filename>maestrod.xcfg</filename></primary>

                           <secondary>elements</secondary>

                           <tertiary><sgmltag>&lt;saver_types&gt;</sgmltag></tertiary>
                        </indexterm> or the
                     <sgmltag>&lt;saver_types&gt;</sgmltag> XML element is not
                     present in <filename>maestrod.xcfg</filename>, then the
                     Desktop Service has platform-specific default settings
                     for the screen saver plug-in list. For <productname
                     class="registered">Microsoft Windows</productname>, the
                     default setting is to use the <literal>windows</literal>
                     and <literal>powercfg</literal> plug-ins; for non-Windows
                     platforms, the default setting is to use the
                     <literal>xset</literal> plug-in.</para>
                  </important>

                  <example id="example.maestrod.xcfg.desktop.saver.linux">
                     <title><command>maestrod.xcfg</command>: Screen Saver and
                     Power Management on Linux Without Local Logon</title>

                     <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/fat32/grub/grub.conf&lt;/grub_conf&gt;
   &lt;saver_types&gt;xset&lt;/saver_types&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;xscreensaver_cmd&gt;</sgmltag></tertiary>
                  </indexterm>

                  <indexterm>
                     <primary><filename>maestrod.xcfg</filename></primary>

                     <secondary>elements</secondary>

                     <tertiary><sgmltag>&lt;xscreensaver_command_cmd&gt;</sgmltag></tertiary>
                  </indexterm>

                  <example id="example.maestrod.xcfg.desktop.saver.linux.xscreensaver">
                     <title><command>maestrod.xcfg</command>: Screen Saver and
                     Power Management on Linux With Local Logon</title>

                     <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;xauth_cmd&gt;/usr/X11R6/bin/xauth&lt;/xauth_cmd&gt;
   &lt;xauthority_file&gt;/var/gdm/:0.Xauth&lt;/xauthority_file&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;/fat32/grub/grub.conf&lt;/grub_conf&gt;
   &lt;saver_types&gt;xset,xscreensaver&lt;/saver_types&gt;
   &lt;xscreensaver_cmd&gt;/usr/X11R6/bin/xscreensaver&lt;/xscreensaver_cmd&gt;
   &lt;xscreensaver_command_cmd&gt;/usr/X11R6/bin/xscreensaver-command&lt;/xscreensaver_command_cmd&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>

                  <example id="example.maestrod.xcfg.desktop.saver.windows">
                     <title><command>maestrod.xcfg</command>: Screen Saver and
                     Power Management on <productname
                     class="registered">Microsoft
                     Windows</productname></title>

                     <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestrod&gt;
   &lt;boot_loader&gt;GRUB&lt;/boot_loader&gt;
   &lt;grub_conf&gt;E:\grub\grub.conf&lt;/grub_conf&gt;
   &lt;saver_types&gt;windows,powercfg&lt;/saver_types&gt;
&lt;/maestrod&gt;</programlisting>
                  </example>
               </section>

               <section>
                  <title>Desktop Wallpaper Switching Settings</title>

                  <para>When a cluster node has a locally logged on user, that
                  user will sometimes have an image displayed on his or
                  desktop. This is commonly referred to as <quote>desktop
                  wallpaper,</quote> and the Desktop Service has a mechanism
                  for changing this image from the <application>Maestro
                  GUI</application>. As with the screen saver and power
                  management capability, the platform- and site-specific
                  details are captured in different plug-ins. The
                  configuration of which plug-in to use is quite simple. Just
                  choose one of the plug-ins named in the list below and set
                  it as the CDATA of the
                  <sgmltag>&lt;background_image_manager&gt;</sgmltag><indexterm>
                        <primary><filename>maestrod.xcfg</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;background_image_manager&gt;</sgmltag></tertiary>
                     </indexterm> XML element in
                  <filename>maestrod.xcfg</filename>. Supported values at the
                  time of this writing are as follows: </para>

                  <itemizedlist>
                     <listitem>
                        <para><literal>windows</literal>: Desktop wallpaper
                        management using the regular Windows desktop.</para>

                        <important>
                           <para>Presently, only BMP images can be used as the
                           input to this plug-in (see <xref
                           linkend="section.viewer.reboot" />). In a future
                           version of Maestro, on-the-fly conversion to BMP may
                           be implemented to allow other formats such as JPEG
                           and PNG to be used.</para>
                        </important>
                     </listitem>

                     <listitem>
                        <para><literal>gnome</literal>: Background querying
                        and switching using GConf (via
                        <command>gconftool-2</command>). The path to
                        gconftool-2 can be specified by setting the value of
                        the <sgmltag>&lt;gconftool_cmd&gt;</sgmltag><indexterm>
                              <primary><filename>maestrod.xcfg</filename></primary>

                              <secondary>elements</secondary>

                              <tertiary><sgmltag>&lt;gconftool_cmd&gt;</sgmltag></tertiary>
                           </indexterm> XML element in
                        <filename>maestrod.xcfg</filename>. If not set, this
                        path defaults to
                        <filename>/usr/bin/gconftool-2</filename>.</para>
                     </listitem>
                  </itemizedlist>

                  <para>If the
                  <sgmltag>&lt;background_image_manager&gt;</sgmltag> XML
                  element has no value or is not present, the Desktop Service
                  defaults to using the plug-in <literal>windows</literal> on
                  <productname class="registered">Microsoft
                  Windows</productname> and the plug-in
                  <literal>gnome</literal> on other platforms.</para>

                  <indexterm class="endofrange"
                             startref="index.sectcion.service.desktop.settings"></indexterm>

                  <indexterm class="endofrange"
                             startref="index.section.maestrod.xcfg"></indexterm>
               </section>
            </section>
         </section>
      </section>

      <section id="section.usage.gui">
         <title>Using the Maestro GUI Client</title>

         <para>The client side of Maestro is a cross-platform GUI written in
         the Python programming language with PyQt as the widget set. As we
         will see, it is designed to be a dynamic and flexible interface for
         utilizing a cluster.</para>

         <para>Before we get into the usage of the <application>Maestro
         GUI</application>, we must introduce some terminology. In keeping
         with the musical theme of Maestro, there are two data files (XML
         files) utilized by the <application>Maestro GUI</application>:
         ensemble files and stanza files. An
         <firstterm>ensemble</firstterm><indexterm>
               <primary>ensemble</primary>

               <secondary>definition of</secondary>
            </indexterm> file identifies the nodes of the cluster, and in the
         usage of Maestro, we frequently refer to the cluster nodes together
         as an ensemble. The name ensemble was chosen because it represents a
         group of musicians who perform together—an apropos choice in the
         context of a graphics cluster.</para>

         <para>The <firstterm>stanza</firstterm><indexterm>
               <primary>stanza</primary>

               <secondary>definition of</secondary>
            </indexterm> file describes how to run an application. If we
         consider that running an application is the performance of the
         cluster, then this name is quite meaningful. The term stanza also has
         relevance in the realm of computing where it is <quote>a block or
         subsection of a human-readable configuration file for computer
         software.</quote> Application developers write stanza files by
         filling in the executable name, command line options, and any
         environment variables needed to launch the software. The stanza file
         is then used by the <application>Maestro GUI</application> to
         construct a graphical interface for that application in the Maestro
         Launch Viewer (see <xref linkend="section.viewer.launch" />). Thus,
         it is up to the stanza author to create a stanza that results in an
         understandable, flexible user interface when loaded by the
         <application>Maestro GUI</application>.</para>

         <section id="section.running.maestro.gui">
            <title>Running the <application>Maestro GUI</application></title>

            <para>To load the <application>Maestro GUI</application>, run the
            command <command>maestro</command> or double-click on the
            application icon. A splash screen appears while all the
            dynamically loaded code and data files are loaded. Next, a login
            dialog is displayed asking for the user name, the password, and
            (optionally) the <productname class="registered">Microsoft
            Windows</productname> domain for the user who will be launching
            applications on the cluster. At this time, the login information
            must be the same for all nodes of the cluster, and a user cannot
            authenticate as a different person without restarting the
            <application>Maestro GUI</application>.</para>

            <para>Its main interface panel has three parts: a tool bar, the
            viewer panel, and the log window. The tool bar contains buttons
            for basic operations such as loading and saving the ensemble file.
            Within the viewer panel, the various viewer plug-ins can be
            accessed. Only one viewer is displayed at a time, and switching
            viewers is done by clicking on an icon in the left side of the
            viewer panel. Tool bars and menu items may be added and removed on
            the fly as the current viewer changes.</para>

            <section id="section.gui.command.line.options">
               <title>Command Line Options for the <application>Maestro
               GUI</application></title>

               <para>There are three command line options to the
               <command>maestro</command> command:
               <option>--ensemble</option>, <option>--stanza</option>, and
               <option>--view</option>. The exact syntax and usage information
               for these options can be displayed by running the
               following:</para>

               <screen>maestro --help</screen>

               <para>The <option>--ensemble</option> option names an ensemble
               file to load when the <application>Maestro GUI</application>
               starts. Using this option eliminates the need to open an
               ensemble after the GUI opens, but it does not preclude the user
               from changing the current ensemble (as we will see in <xref
               linkend="section.gui.ensemble.load" />). One use of this
               command line option would be in the context of associations
               that cause the <application>Maestro GUI</application> to load
               when a user double-clicks on a file. The file association
               action could include this option to cause a specific ensemble
               to be loaded by default so that the <application>Maestro
               GUI</application> automatically connects to a cluster when it
               opens.</para>

               <para>The <option>--stanza</option> option names the stanza
               file that will be accessible from the <application>Maestro
               GUI</application>. Using this option prevents the
               <application>Maestro GUI</application> from scanning for other
               stanza files so that the named file is the only one that is
               accessible. As with the <option>--ensemble</option> option, one
               way of using this option is in the context of file
               associations. If the file associated with launching the
               <application>Maestro GUI</application> is an input file to an
               application, the stanza for the application that uses the input
               file could be identified as the one (and only) to use in the
               <application>Maestro GUI</application>. In that way, the user
               would be presented with a <application>Maestro
               GUI</application> configuration that only pertains to the
               application and input file in question.</para>

               <para>The <option>--view</option> option tells the
               <application>Maestro GUI</application> which viewer plug-in to
               display when it opens. By default, the <application>Maestro
               GUI</application> displays whichever viewer plug-in is the
               first in the list when it opens. This option overrides that
               behavior. The viewer plug-in to use is identified by its name,
               and the names of the viewer plug-ins that come with Maestro are
               as follows:</para>

               <indexterm>
                  <primary>viewers</primary>
               </indexterm>

               <itemizedlist>
                  <listitem>
                     <para>Launch View</para>
                  </listitem>

                  <listitem>
                     <para>Reboot View</para>
                  </listitem>

                  <listitem>
                     <para>Process View</para>
                  </listitem>

                  <listitem>
                     <para>Resource View</para>
                  </listitem>

                  <listitem>
                     <para>Desktop View</para>
                  </listitem>

                  <listitem>
                     <para>Ensemble View</para>
                  </listitem>

                  <listitem>
                     <para>Stanza Editor</para>
                  </listitem>
               </itemizedlist>

               <para>Using any of these names on a command line would require
               proper quoting to avoid misinterpreting the space in the viewer
               name. For example, here is one way that the Maestro GUI could
               be launched as a result of a file association on <productname
               class="registered">Microsoft Windows</productname> (the wrapped
               line is to facilitate rendering rather than to indicate
               syntax):</para>

               <screen>maestro.py --ensemble="C:\site\cluster-open.jconf"
           --stanza="C:\myapp.stanza" --view="Launch View"</screen>

               <para>We will explain more about these viewers in the following
               sections.</para>
            </section>

            <section id="section.gui.ensemble.load">
               <title>Loading an Ensemble</title>

               <para>When the Maestro GUI starts, it either loads an ensemble
               as specified on the command line, or it starts with no
               ensemble. In the latter case, the user must load an ensemble
               through the GUI. This can be accomplished by selecting
               <menuchoice>
                     <guimenu>File</guimenu>

                     <guimenuitem>Load Ensemble</guimenuitem>
                  </menuchoice> or by clicking on the <guibutton>Load
               Ensemble</guibutton> tool bar button. If there is already an
               ensemble loaded, this operation <emphasis>replaces</emphasis>
               the existing ensemble. That means that all existing cluster
               node connections are closed, and new connections set
               made.</para>
            </section>

            <section id="section.viewer.launch">
               <title>Launch Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.launch">
                  <primary>viewers</primary>

                  <secondary>launch</secondary>
               </indexterm>

               <para>The Launch Viewer is likely to be the one seen most
               frequently by Maestro users. This module provides the end user
               interface to remote application launching. The interface itself
               is composed dynamically based on the configuration file (known
               as a <firstterm>stanza</firstterm>) for each application. This
               means that every application is likely to have a different
               launching interface in terms of options and parameters, and it
               is entirely up to each application author to devise a stanza
               that results in a clear, simple interface to launching an
               application. The interface for choosing which application to
               launch and the actual launch controls, however, will always be
               the same. In this section, we explain these
               application-agnostic controls as well as the basic controls
               that are available for stanza authors to utilize.</para>

               <section>
                  <title>Basic Launch Controls</title>

                  <para>At the top of the Launch Viewer panel is a pull-down
                  menu that lists all the known applications. Recall that the
                  applications are described using stanzas, so this pull-down
                  menu lists all the loaded stanzas. By selecting an
                  application in the Launch Viewer, the user is indicating
                  which application will be launched.</para>

                  <para>At the bottom of the Launch Viewer, there are three
                  buttons at the bottom of the panel:
                  <guibutton>Launch</guibutton>,
                  <guibutton>Terminate</guibutton>, and
                  <guibutton>Help</guibutton>. The
                  <guibutton>Launch</guibutton> button tells all the remote
                  nodes to run the command with the options provided by the
                  user. The <guibutton>Terminate</guibutton> button kills the
                  launched application. The <guibutton>Help</guibutton> button
                  loads HTML help associated with the selected application (as
                  specified in its stanza file). The
                  <guibutton>Help</guibutton> button is only enabled when an
                  application stanza includes information about where to find
                  the HTML help.</para>

                  <para>When an application is launched, any output that it
                  would normally write to a console window is streamed back to
                  the Maestro GUI and displayed in the tabbed panel of log
                  windows. This panel is normally at the bottom of the Maestro
                  GUI. Note that each tab can be detached from the Maestro GUI
                  and moved &amp; resized independently. This allows the
                  output from multiple nodes to be seen simultaneously if so
                  desired. Otherwise, as a tabbed panel, it offers a very
                  compact view of the log output.</para>

                  <para>The output from the launched application is also
                  written to node-specific log files in the user's home
                  directory. In some instances, it may be necessary or useful
                  to save this output. This can be done at any time by
                  selecting the <menuchoice>
                        <guimenu>File</guimenu>

                        <guimenuitem>Archive Logs</guimenuitem>
                     </menuchoice> item or by clicking the <guibutton>Archive
                  Logs</guibutton> tool bar button. A file chooser dialog will
                  open asking the user to name the file used for the archive.
                  Upon choosing a file, the log files are collected into a ZIP
                  archive.</para>
               </section>

               <section>
                  <title>Application Option Controls</title>

                  <para>To manipulate the launch options for an application, a
                  basic set of controls are used. These controls are
                  structured based on the stanza file. The GUI layout for the
                  Launch Viewer will reflect the nesting and grouping of
                  options as they are specified in the stanza. The controls
                  used are the following:</para>

                  <itemizedlist>
                     <listitem>
                        <para>Text fields where users enter values, strings,
                        paths, etc. In the case of a file path, the stanza
                        author may choose to indicate that a file chooser
                        dialog box can be opened. Should that information be
                        present in the stanza, a button will be placed to the
                        right of the text field for opening the file chooser
                        dialog.</para>
                     </listitem>

                     <listitem>
                        <para>Radio button groups are used for controlling
                        which mutually exclusive choice the user can make
                        among different cases.</para>
                     </listitem>

                     <listitem>
                        <para>Pull-down menus are used for long lists of
                        mutually exclusive options in order to save space in
                        the GUI layout. The stanza author is responsible for
                        making the decision about when a pull-down menu is
                        more appropriate than a group of radio buttons.</para>
                     </listitem>

                     <listitem>
                        <para>Check boxes are used for groups of options that
                        are not mutually exclusive.</para>
                     </listitem>
                  </itemizedlist>

                  <indexterm class="endofrange"
                             startref="index.section.viewer.launch"></indexterm>
               </section>
            </section>

            <section id="section.viewer.reboot">
               <title>Reboot Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.reboot">
                  <primary>viewers</primary>

                  <secondary>reboot</secondary>
               </indexterm>

               <para>The Reboot Viewer allows the GUI user to reboot
               individual nodes of the cluster or all the nodes of the cluster
               with the click of a button. When possible<footnote>
                     <para>Information about how to set up the Reboot Service
                     was provided earlier in <xref
                     linkend="section.maestrod.settings.reboot" />.</para>
                  </footnote>, the Reboot Viewer allows the GUI user to change
               the target operating system when rebooting so that it is not
               necessary to have direct access to the remote computer in order
               to change which OS it loads upon booting. This can be done for
               all nodes at once using the buttons at the top of the view
               panel, or it can be done for individual nodes. To change the
               boot target for an individual node, click on the table item
               that identifies the current OS, and a pull-down menu will be
               activated that allows the target OS to change. </para>

               <indexterm class="endofrange"
                          startref="index.section.viewer.reboot"></indexterm>
            </section>

            <section id="section.viewer.process">
               <title>Process Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.process">
                  <primary>viewers</primary>

                  <secondary>process</secondary>
               </indexterm>

               <para>The Process Viewer provides a view of all the processes
               currently running on the cluster as well as a means to
               terminate individual processes. In conjunction with the
               Resource Viewer<indexterm>
                     <primary>viewers</primary>

                     <secondary>resource</secondary>
                  </indexterm>, users can identify errant processes can kill
               them. Since the Process Management Service<indexterm>
                     <primary>services</primary>

                     <secondary>process management</secondary>
                  </indexterm> runs on the server side with administrative
               privileges, it is possible to kill any process.</para>

               <caution>
                  <para>It is important to be careful when killing processes
                  using the Process Viewer. Users are effectively given
                  administrator privileges to end any process that they
                  choose. These being the early stages of Maestro's existence,
                  this aspect may change so that users only have access to
                  kill processes that they own.</para>
               </caution>

               <para>When first loaded, the Process Viewer displays nothing.
               To populate the process list, click the
               <guibutton>Refresh</guibutton> button. Queries will be sent to
               each of the cluster nodes requesting the instantaneous state of
               the running processes. To update the list, click the
               <guibutton>Refresh</guibutton> button again. To kill a process,
               right-click on it and select <menuchoice>
                     <shortcut>
                        <keycap>Ctrl+T</keycap>
                     </shortcut>

                     <guimenuitem>Terminate</guimenuitem>
                  </menuchoice> from the context menu.</para>

               <indexterm class="endofrange"
                          startref="index.section.viewer.process"></indexterm>
            </section>

            <section id="section.viewer.resource">
               <title>Resource Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.resource">
                  <primary>viewers</primary>

                  <secondary>resource</secondary>
               </indexterm>

               <para>The Resource Viewer shows the current state of resource
               consumption on each of the nodes in the cluster using graphs.
               Currently, the resources tracked are CPU and memory usage, and
               the graphs show this usage as a percentage of the total
               available. When the Resource Viewer is first loaded, it shows
               all the nodes of the cluster in a static state. Clicking the
               <guibutton>Refresh</guibutton> button will get an instantaneous
               snapshot of the resource usage. To get continuous updates,
               right-click on a node and select the desired update rate from
               the context menu. To stop the updates, choose the
               <guimenuitem>Off</guimenuitem> item from the context
               menu.</para>

               <note>
                  <para>Right-clicking on the white background of the Resource
                  Viewer also brings up the context menu, but choosing an
                  update rate from the context menu has no effect in this
                  case. This is a known bug.</para>
               </note>

               <indexterm class="endofrange"
                          startref="index.section.viewer.resource"></indexterm>
            </section>

            <section id="section.viewer.desktop">
               <title>Desktop Viewer</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.desktop">
                  <primary>viewers</primary>

                  <secondary>desktop</secondary>
               </indexterm>

               <para>The Desktop Viewer is where users can control the state
               of screen savers and display power management on the nodes of
               the cluster. At the top of the view, there is a pull-down menu
               listing all the nodes of the cluster as well as an item labeled
               <guilabel>All</guilabel> indicating all cluster nodes. By
               selecting an individual node from this menu, the screen saver
               usage can be enabled or disabled (disabling the screen saver
               implies that display power management should be disabled). A
               running screen saver can be terminated by clicking the
               <guibutton>Stop Screen Saver</guibutton> button. This button
               also has the effect of unblanking a display and waking up a
               sleeping display if power management is still active. After
               clicking this button, the screen saver and power management are
               both disabled.</para>

               <important>
                  <para>Unlocking a locked display on <productname
                  class="registered">Microsoft Windows</productname> is not
                  currently supported. Thus far, no workaround has been found
                  for this limitation, so it is important to avoid enabling
                  password protection for the screen saver of the user logged
                  on to the individual cluster nodes running <productname
                  class="registered">Microsoft Windows</productname>. This
                  limitation does not exist on Linux as long as XScreenSaver
                  is being used by the logged on user (if a user is logged on
                  at all).</para>
               </important>

               <para>An in-development capability of the Desktop Viewer is the
               ability to change the desktop background image (also known as
               desktop wallpaper) of nodes of the cluster. This can be useful
               in cases where it is necessary to distinguish between nodes on
               the display surface while no application is running or when it
               is necessary to get all nodes to use the same wallpaper. To
               change the wallpaper of a given node, select it from the
               pull-down menu. Then, click the <guibutton>...</guibutton>
               button to the right of the image file name field to open a file
               dialog box to choose an image file to use as the replacement
               wallpaper. The node will be told about the new image, and if
               the same path does not exist on that node, the image file will
               be transmitted to it and used as the new wallpaper
               image.</para>

               <important>
                  <para>This feature is still undergoing development and has
                  known bugs and limitations. In particular, to change the
                  wallpaper of nodes running <productname
                  class="registered">Microsoft Windows</productname>, a BMP
                  image must be used. Furthermore, it is not yet possible to
                  use something such as a solid color for the wallpaper. An
                  image has to be used.</para>
               </important>

               <indexterm class="endofrange"
                          startref="index.section.viewer.desktop"></indexterm>
            </section>

            <section id="section.viewer.settings">
               <title>Settings Viewer/Ensemble Editor</title>

               <indexterm class="startofrange"
                          id="index.section.viewer.settings">
                  <primary>viewers</primary>

                  <secondary>settings</secondary>
               </indexterm>

               <para>The Settings Viewer allows the user to browse information
               about each of the nodes in the current cluster configuration.
               It displays the computer host name, its IP address, the up
               time, and low-level details about the running operating system.
               To see the information for a node, simply click on its name in
               the left panel containing the list of cluster nodes. This
               viewer serves another purpose as the ensemble editor<indexterm>
                     <primary>ensemble</primary>

                     <secondary>editing</secondary>
                  </indexterm>. We will explain more about editing the
               ensemble in <xref linkend="section.files.ensemble" />.</para>

               <indexterm class="endofrange"
                          startref="index.section.viewer.settings"></indexterm>
            </section>
         </section>

         <section>
            <title>Configuring the <application>Maestro
            GUI</application></title>

            <para>Presently, the <application>Maestro GUI</application> has
            only three user preferences: the user skill level, the directory
            where the log files get stored during execution, and whether to
            delete these log files when the GUI exits. The GUI does not yet
            provide a graphical means to edit these preferences, so users must
            edit the file
            <filename>$HOME/.maestro/maestro.xml</filename><indexterm>
                  <primary><filename>maestro.xml</filename></primary>
               </indexterm>
            (<filename>%APPDATA%\Maestro\maestro.xml</filename> or
            <filename>%USERPROFILE%\Application
            Data\Maestro\maestro.xml</filename> on <productname
            class="registered">Microsoft Windows</productname>) by hand. An
            example version of this file is shown in <xref
            linkend="example.maestro.gui.config" />.</para>

            <indexterm>
               <primary><filename>maestro.xml</filename></primary>

               <secondary>elements</secondary>

               <tertiary><sgmltag>&lt;maestro&gt;</sgmltag></tertiary>
            </indexterm>

            <example id="example.maestro.gui.config">
               <title>Sample <filename>maestro.xml</filename></title>

               <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;maestro&gt;
   &lt;logdir&gt;/var/tmp&lt;/logdir&gt;
   &lt;clean_logfiles&gt;true&lt;/clean_logfiles&gt;
&lt;/maestro&gt;</programlisting>
            </example>

            <para>This example demonstrates a key aspect of the
            <application>Maestro GUI</application> configuration. Namely, the
            lack of a setting (in this case, the user skill level) is not a
            problem. Reasonable defaults exist for the current settings, and
            there is not usually a need to override the defaults by adding to
            this file. The defaults for the settings are as follows:</para>

            <itemizedlist>
               <listitem>
                  <para><literal>logdir</literal><indexterm>
                        <primary><filename>maestro.xml</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;logdir&gt;</sgmltag></tertiary>
                     </indexterm>: The platform-specific home directory of the
                  user running the <application>Maestro
                  GUI</application></para>
               </listitem>

               <listitem>
                  <para><literal>clean_logfiles</literal><indexterm>
                        <primary><filename>maestro.xml</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;clean_logfiles&gt;</sgmltag></tertiary>
                     </indexterm>: <literal>true</literal></para>
               </listitem>

               <listitem>
                  <para><literal>user_mode</literal><indexterm>
                        <primary><filename>maestro.xml</filename></primary>

                        <secondary>elements</secondary>

                        <tertiary><sgmltag>&lt;user_mode&gt;</sgmltag></tertiary>
                     </indexterm>: <literal>100</literal> (meaning
                  novice)</para>
               </listitem>
            </itemizedlist>
         </section>
      </section>
   </chapter>

   <chapter id="chapter.maestro.files">
      <title>Maestro Files</title>

      <para>Aside from preferences or configuration files, there are two data
      files utilized by Maestro: ensembles and stanzas. These files were
      introduced earlier in <xref linkend="section.usage.gui" />, and we go
      into more detail about their use and how to edit them in this chapter.
      These files are loaded by the <application>Maestro GUI</application>, so
      all users of the <application>Maestro GUI</application> will have some
      interaction with them. However, not all users will have to know how
      interpret or edit the contents of these files. We explain more in the
      following sections.</para>

      <section id="section.files.ensemble">
         <title>Ensembles</title>

         <indexterm class="startofrange" id="index.file.ensemble">
            <primary>ensemble</primary>

            <secondary>file</secondary>
         </indexterm>

         <para>Ensemble files (having the extension
         <filename>.ensem</filename> or <filename>.ensemble</filename>)
         identify the nodes of a cluster. When the <application>Maestro
         GUI</application> loads an ensemble file, it tries to connect to the
         <command>maestrod</command> process running on each of the identified
         nodes. The structure of these files is very simple, and the example
         included with the Maestro source is shown in <xref
         linkend="example.maestro.ensemble" />. The root XML node must be
         <sgmltag>&lt;ensemble&gt;</sgmltag><indexterm>
               <primary>ensemble</primary>

               <secondary>elements</secondary>

               <tertiary><sgmltag>&lt;ensemble&gt;</sgmltag></tertiary>
            </indexterm>, and it has one level child nodes that are
         <sgmltag>&lt;cluster_node&gt;</sgmltag><indexterm>
               <primary>ensemble</primary>

               <secondary>elements</secondary>

               <tertiary><sgmltag>&lt;cluster_node&gt;</sgmltag></tertiary>
            </indexterm> elements. The &lt;cluster_node&gt; elements have
         three attributes: <literal>class</literal>,
         <literal>hostname</literal>, and <literal>name</literal>. The
         <literal>class</literal> is a comma-separated list of identifiers
         indicating the role of the node in the cluster, and it comes into
         play with the stanzas and application launching. Common values are
         <literal>master</literal> or <literal>slave</literal>. The
         <literal>hostname</literal> is the IP address or machine name for the
         node. This is what the <application>Maestro GUI</application> uses
         for making the connection to the remote node. Finally, the
         <literal>name</literal> is a <quote>friendly</quote> identifier for
         the node that is used whenever the nodes of the ensemble are
         displayed in the <application>Maestro GUI</application>.</para>

         <example id="example.maestro.ensemble">
            <title>Maestro Ensemble</title>

            <programlisting>&lt;?xml version="1.0" ?&gt;
&lt;ensemble&gt;
   &lt;cluster_node class="" hostname="timmy" name="timmy" /&gt;
   &lt;cluster_node class="" hostname="smalls" name="smalls" /&gt;
&lt;/ensemble&gt;</programlisting>
         </example>

         <indexterm class="startofrange" id="index.file.ensemble.edit">
            <primary>ensemble</primary>

            <secondary>file</secondary>

            <tertiary>editing</tertiary>
         </indexterm>

         <para>Ensemble files can be edited by hand using a text editor or by
         using the <application>Maestro GUI</application>'s ensemble editor.
         This editor is integrated into the Ensemble Viewer (first introduced
         in <xref linkend="section.viewer.settings" />). This viewer has
         controls for adding nodes to and removing nodes from the loaded
         ensemble. After making edits to the ensemble, it can be saved using
         the <menuchoice>
               <guimenu>File</guimenu>

               <guimenuitem>Save Ensemble</guimenuitem>
            </menuchoice> menu item or the <guibutton>Save
         Ensemble</guibutton> tool bar button. As of this writing, there is
         not currently a <menuchoice>
               <guimenu>File</guimenu>

               <guimenuitem>Save Ensemble As...</guimenuitem>
            </menuchoice> item, but that will likely be added in a future
         release.</para>

         <indexterm class="endofrange" startref="index.file.ensemble.edit"></indexterm>

         <para>Generally, an ensemble would be edited once per cluster when
         setting up Maestro for use with that cluster. An administrator would
         put the ensemble file in a place that is convenient for accessing by
         all users of the cluster. At this time, the Maestro GUI does not have
         a way to name a default ensemble to load, but this capability will be
         added in a future release.</para>

         <indexterm class="endofrange" startref="index.file.ensemble"></indexterm>
      </section>

      <section id="section.files.stanza">
         <title>Stanzas</title>

         <indexterm class="startofrange" id="index.file.stanza">
            <primary>stanza</primary>

            <secondary>file</secondary>
         </indexterm>

         <para>The other type of file utilized by the <application>Maestro
         GUI</application> is known as a stanza. Every application that can be
         launched by Maestro must be described using a stanza. Stanzas are
         discovered dynamically when the <application>Maestro
         GUI</application> is launched or by using the
         <option>--stanza</option> command line option.</para>

         <para>Stanza files are XML files, and their structure is quite
         complex. They have a high degree of flexibility that allows
         arbitrarily deep nesting and references to external stanzas. Due to
         their complexity, we refrain from going into detail about the format
         here and instead concentrate on how to use the stanza editor.</para>

         <indexterm class="startofrange" id="index.file.stanza.edit">
            <primary>stanza</primary>

            <secondary>file</secondary>

            <tertiary>editing</tertiary>
         </indexterm>

         <para>The stanza editor is one of the Maestro GUI viewer plug-ins. It
         is currently the only viewer that does not have a corresponding
         service since it does not do anything with the ensemble. Thus, it is
         not necessary to have an ensemble loaded in order to edit stanza
         files. There are two items in the <guimenu>File</guimenu> menu
         related to stanza editing: <menuchoice>
               <guimenu>File</guimenu>

               <guimenuitem>Load Stanza</guimenuitem>
            </menuchoice> and <menuchoice>
               <guimenu>File</guimenu>

               <guimenuitem>Save All Stanzas</guimenuitem>
            </menuchoice>. The stanza editor itself contains a button
         <guibutton>New Application</guibutton> for creating a new application
         stanza from scratch.</para>

         <para>Since stanzas describe a hierarchy of options and environment
         variables, the idea behind the editor is to represent that hierarchy
         in an understandable yet powerful manner. A simple graph structure is
         used to achieve this. The parent/child relationships are represented
         by arrows between nodes of the graph. Each node of the graph
         represents an XML element, and the attributes of the XML element are
         editable in the dockable panel at the bottom of the stanza editor.
         This panel is dockable so that it can be detached from the
         <application>Maestro GUI</application> and resized independently as
         necessary.</para>

         <para>In the stanza editor, there is a tool bar containing all the
         information that can go into a stanza. The tool bar items are as
         follows:</para>

         <itemizedlist>
            <listitem>
               <para><guibutton>Choice</guibutton>: Creates a structural item
               containing a list of choices, either mutually exclusive or not.
               Choices can encompass one or more groups, one or more other
               choices, one or more arguments, and/or one or more environment
               variables.</para>
            </listitem>

            <listitem>
               <para><guibutton>Group</guibutton>: Creates a structural
               grouping of related items. Groups can encompass other groups,
               choices, arguments, and/or environment variables.</para>
            </listitem>

            <listitem>
               <para><guibutton>Argument</guibutton>: An argument describes a
               command line argument to an application. This may or may not
               have a flag, but it always has a value.</para>
            </listitem>

            <listitem>
               <para><guibutton>Env Variable</guibutton>: An environment
               variable describes a setting that is applied to the execution
               environment of the application.</para>
            </listitem>

            <listitem>
               <para><guibutton>Command</guibutton>: A command is what
               actually gets executed when the application is launched.</para>
            </listitem>

            <listitem>
               <para><guibutton>Cwd</guibutton>: The current working directory
               identifies where in the file system the command will be
               executed. This does not have to be the same as the directory
               containing the command since the command can be specified using
               an absolute path.</para>
            </listitem>

            <listitem>
               <para><guibutton>Reference</guibutton>: A reference allows
               reuse of a structural item in another stanza. References can be
               refined by using add, remove, and override operations. A
               reference has an identifier that uniquely describes what XML
               element in another stanza is being referenced.</para>
            </listitem>

            <listitem>
               <para><guibutton>Override</guibutton>: An override changes a
               detail of a referenced structural item. This can include XML
               attributes and the CDATA of the referenced element.</para>
            </listitem>

            <listitem>
               <para><guibutton>Add Options</guibutton>: An add operation
               extends a referenced structural item by defining further
               structural items such as groups, choices, arguments, and
               environment variables. The exact result of the add operation
               depends on what structural item is being referenced.</para>
            </listitem>

            <listitem>
               <para><guibutton>Remove Option</guibutton>: A remove operation
               deletes a child of the referenced structural item.</para>
            </listitem>
         </itemizedlist>

         <para>To add any one of these to the stanza being edited, click the
         desired tool bar item and drag it to the stanza editor canvas. At
         that point, connections can be made between the new structural item
         and existing items. The attributes of the item can be edited in the
         dockable panel at the bottom of the stanza editor.</para>

         <indexterm class="endofrange" startref="index.file.stanza.edit"></indexterm>

         <para>Application developers would create a stanza file for their
         application when the application is deployed for use at a site that
         is already running Maestro. The site-specific details (such as what
         VR Juggler configuration to load) can be referenced by a stanza, but
         in general, a stanza file for an application will vary from one site
         and one cluster to another. Since the variation is captured in the
         stanza file, however, it is much easier to deploy cluster-ready
         applications than writing a custom launch solution for each
         site.</para>

         <indexterm class="endofrange" startref="index.file.stanza"></indexterm>
      </section>
   </chapter>

   <chapter id="chapter.extending.maestro">
      <title>Extending Maestro</title>

      <section id="section.extending.services">
         <title>Services</title>

         <indexterm class="startofrange" id="index.section.services">
            <primary>services</primary>
         </indexterm>

         <para>Services are plug-ins that are loaded by maestrod when it
         starts. It scans the directory
         <filename>maestro/daemon/plugins/services</filename> in the Maestro
         installation directory (henceforth referred to as
         <filename>&lt;MAESTRODIR&gt;</filename>) at startup to discover what
         services are available. Services are identified as classes that
         implement the interface
         <interface>maestro.core.IServicePlugin</interface><indexterm>
               <primary>plug-ins</primary>

               <secondary>interfaces</secondary>

               <tertiary>maestro.core.IServicePlugin</tertiary>
            </indexterm> as defined in
         <filename>&lt;MAESTRODIR&gt;/maestro/core/plugin_interfaces.py</filename>.
         All discovered service plug-ins are instantiated and made available
         for use. If any plug-in fails to load or fails to instantiate, then
         it is deactivated.</para>

         <indexterm startref="index.section.services"></indexterm>
      </section>

      <section id="section.extending.service.plugins">
         <title>Service Plug-ins</title>

         <indexterm class="startofrange" id="index.section.services.plugins">
            <primary>services</primary>

            <secondary>plug-ins</secondary>
         </indexterm>

         <para>On a smaller scope, individual services may use plug-ins to
         capture variability among different computer and/or operating system
         configurations.</para>

         <section id="section.plugins.boot.loader">
            <title>Boot Loader Plug-ins</title>

            <para>The Reboot Service<indexterm>
                  <primary>services</primary>

                  <secondary>reboot</secondary>
               </indexterm> uses plug-ins to capture the details of how to
            control the default operating system selected by the boot
            loader<indexterm>
                  <primary>boot loader</primary>
               </indexterm> when the computer starts up. The idea is that the
            nodes of a cluster need not require direct intervention from a
            user in order to change the operating system. Instead, the boot
            loader can be reconfigured via the Reboot Service to change the OS
            booted by default. The assumption is, of course, that the boot
            loader is capable of being reconfigured by external software. If
            this were not the case, then the Reboot Service would only be able
            to reboot the computer and could not change the default OS.</para>

            <para>The job of the plug-ins used by the Reboot Service involves
            three tasks:</para>

            <orderedlist>
               <listitem>
                  <para>Determine all the allowed boot targets<footnote>
                        <para>In the context of a boot loader, we use the
                        terms <quote>boot target</quote> and <quote>operating
                        system</quote> interchangeably.</para>
                     </footnote> (i.e., the operating system types and
                  installed versions)</para>
               </listitem>

               <listitem>
                  <para>Determine the default boot target (i.e., the default
                  operating system started by the boot loader)</para>
               </listitem>

               <listitem>
                  <para>Change the default boot target</para>
               </listitem>
            </orderedlist>

            <para>This is done by implementing the interface
            <interface>maestro.core.IBootPlugin</interface><indexterm>
                  <primary>plug-ins</primary>

                  <secondary>interfaces</secondary>

                  <tertiary>maestro.core.IBootPlugin</tertiary>
               </indexterm>, as defined in
            <filename>&lt;MAESTRODIR&gt;/maestro/core/plugin_interfaces.py</filename>.
            The current list of supported boot loader plug-ins is as follows
            (each identified by its name used in the
            <command>maestrod</command> configuration):</para>

            <itemizedlist>
               <listitem>
                  <para><literal>ntldr</literal>: The boot loader used by
                  Windows NT 4.0 through Windows XP (known as the NT
                  Loader<indexterm>
                        <primary>boot loader</primary>

                        <secondary>NT Loader</secondary>
                     </indexterm>)</para>
               </listitem>

               <listitem>
                  <para><literal>GRUB</literal>: The <ulink
                  url="http://www.gnu.org/software/grub/">Grand Unified
                  Bootloader</ulink><indexterm>
                        <primary>boot loader</primary>

                        <secondary>GRUB</secondary>
                     </indexterm> (GRUB) version 0.9x</para>
               </listitem>
            </itemizedlist>
         </section>

         <section>
            <title>Screen Saver Plug-ins</title>

            <para>The Desktop Service<indexterm>
                  <primary>services</primary>

                  <secondary>desktop</secondary>
               </indexterm> relies on plug-ins to handle controlling the
            screen saver and power management on the local computer. Since
            these are usually two separate features of the operating system or
            desktop interface, multiple screen saver plug-ins can be used
            together. The job of the plug-in is to enable and disable the
            screen saver and to handle killing a running screen saver. This is
            done by implementing the interface
            <interface>maestro.core.ISaverPlugin</interface><indexterm>
                  <primary>plug-ins</primary>

                  <secondary>interfaces</secondary>

                  <tertiary>maestro.core.ISaverPlugin</tertiary>
               </indexterm>, as defined in
            <filename>&lt;MAESTRODIR&gt;/maestro/core/plugin_interfaces.py</filename>.
            The current list of supported screen saver plug-ins is as follows
            (each identified by its name used in the
            <command>maestrod</command> configuration):</para>

            <itemizedlist>
               <listitem>
                  <para><literal>windows</literal> (using the regular
                  <productname class="registered">Microsoft
                  Windows</productname> Desktop screen saver)</para>
               </listitem>

               <listitem>
                  <para><literal>powercfg</literal> (using the <productname
                  class="registered">Microsoft Windows</productname> utility
                  program <command>powercfg.exe</command> to control monitor
                  power off)</para>
               </listitem>

               <listitem>
                  <para><literal>xset</literal> (blanking and DPMS through the
                  X server)</para>
               </listitem>

               <listitem>
                  <para><literal>xscreensaver</literal> (controls XScreenSaver
                  using <command>xscreensaver-command</command>)</para>
               </listitem>
            </itemizedlist>
         </section>

         <section>
            <title>Desktop Wallpaper Plug-ins</title>

            <para>To query and change the desktop background image (commonly
            referred to as <quote>desktop wallpaper</quote>), the Desktop
            Service<indexterm>
                  <primary>services</primary>

                  <secondary>desktop</secondary>
               </indexterm> uses a plug-in. The job of the plug-in is to
            return the name of the wallpaper image file and to handle changing
            the wallpaper to a new image. This is done by implementing the
            interface
            <interface>maestro.core.IDesktopWallpaperPlugin</interface><indexterm>
                  <primary>plug-ins</primary>

                  <secondary>interfaces</secondary>

                  <tertiary>maestro.core.IDesktopWallpaperPlugin</tertiary>
               </indexterm>, as defined in
            <filename>&lt;MAESTRODIR&gt;/maestro/core/plugin_interfaces.py</filename>.
            The current list of supported desktop wallpaper management
            plug-ins is as follows (each identified by its name used in the
            <command>maestrod</command> configuration):</para>

            <itemizedlist>
               <listitem>
                  <para><literal>windows</literal> (using the regular
                  <productname class="registered">Microsoft
                  Windows</productname> Desktop—currently supports BMP images
                  only)</para>
               </listitem>

               <listitem>
                  <para><literal>gnome</literal> (using GConf via
                  <command>gconftool-2</command>)</para>
               </listitem>
            </itemizedlist>

            <indexterm class="endofrange"
                       startref="index.section.services.plugins"></indexterm>
         </section>
      </section>

      <section>
         <title>Views</title>

         <para>In order for a service to be utilized, there must be a
         corresponding view in the <application>Maestro GUI</application>.
         Views provide a visual interface to the remote service. Views are
         identified as classes that implement the interface
         <interface>maestro.core.IViewPlugin</interface><indexterm>
               <primary>plug-ins</primary>

               <secondary>interfaces</secondary>

               <tertiary>maestro.core.IViewPlugin</tertiary>
            </indexterm> as defined in
         <filename>&lt;MAESTRODIR&gt;/maestro/core/plugin_interfaces.py</filename>.</para>

         <para>When the <application>Maestro GUI</application> starts, it
         scans the directory
         <filename>&lt;MAESTRODIR&gt;/maestro/gui/plugins/views</filename> to
         discover what views are available. Services All discovered view
         plug-ins are instantiated and made available for use. If any plug-in
         fails to load or fails to instantiate, then it is deactivated and not
         shown in the GUI. The views that come with Maestro were described in
         <xref linkend="section.running.maestro.gui" />.</para>
      </section>
   </chapter>

   <appendix id="appendix.gfdl">
      <title>GNU Free Documentation License</title>

      <subtitle>Version 1.2, November 2002</subtitle>

      <blockquote id="fsf-copyright">
         <title>FSF Copyright note</title>

         <para>Copyright (C) 2000,2001,2002 Free Software Foundation, Inc. 59
         Temple Place, Suite 330, Boston, MA 02111-1307 USA Everyone is
         permitted to copy and distribute verbatim copies of this license
         document, but changing it is not allowed.</para>
      </blockquote>

      <section id="gfdl-0">
         <title>PREAMBLE</title>

         <para>The purpose of this License is to make a manual, textbook, or
         other functional and useful document "free" in the sense of freedom:
         to assure everyone the effective freedom to copy and redistribute it,
         with or without modifying it, either commercially or noncommercially.
         Secondarily, this License preserves for the author and publisher a
         way to get credit for their work, while not being considered
         responsible for modifications made by others.</para>

         <para>This License is a kind of "copyleft", which means that
         derivative works of the document must themselves be free in the same
         sense. It complements the GNU General Public License, which is a
         copyleft license designed for free software.</para>

         <para>We have designed this License in order to use it for manuals
         for free software, because free software needs free documentation: a
         free program should come with manuals providing the same freedoms
         that the software does. But this License is not limited to software
         manuals; it can be used for any textual work, regardless of subject
         matter or whether it is published as a printed book. We recommend
         this License principally for works whose purpose is instruction or
         reference.</para>
      </section>

      <section id="gfdl-1">
         <title>APPLICABILITY AND DEFINITIONS</title>

         <para id="gfdl-doc">This License applies to any manual or other work,
         in any medium, that contains a notice placed by the copyright holder
         saying it can be distributed under the terms of this License. Such a
         notice grants a world-wide, royalty-free license, unlimited in
         duration, to use that work under the conditions stated herein. The
         "Document", below, refers to any such manual or work. Any member of
         the public is a licensee, and is addressed as "you". You accept the
         license if you copy, modify or distribute the work in a way requiring
         permission under copyright law.</para>

         <para id="gfdl-mod-ver">A "Modified Version" of the Document means
         any work containing the Document or a portion of it, either copied
         verbatim, or with modifications and/or translated into another
         language.</para>

         <para id="gfdl-secnd-sect">A "Secondary Section" is a named appendix
         or a front-matter section of the Document that deals exclusively with
         the relationship of the publishers or authors of the Document to the
         Document's overall subject (or to related matters) and contains
         nothing that could fall directly within that overall subject. (Thus,
         if the Document is in part a textbook of mathematics, a Secondary
         Section may not explain any mathematics.) The relationship could be a
         matter of historical connection with the subject or with related
         matters, or of legal, commercial, philosophical, ethical or political
         position regarding them.</para>

         <para id="gfdl-inv-sect">The "Invariant Sections" are certain
         Secondary Sections whose titles are designated, as being those of
         Invariant Sections, in the notice that says that the Document is
         released under this License. If a section does not fit the above
         definition of Secondary then it is not allowed to be designated as
         Invariant. The Document may contain zero Invariant Sections. If the
         Document does not identify any Invariant Sections then there are
         none.</para>

         <para id="gfdl-cov-text">The "Cover Texts" are certain short passages
         of text that are listed, as Front-Cover Texts or Back-Cover Texts, in
         the notice that says that the Document is released under this
         License. A Front-Cover Text may be at most 5 words, and a Back-Cover
         Text may be at most 25 words.</para>

         <para id="gfdl-transparent">A "Transparent" copy of the Document
         means a machine-readable copy, represented in a format whose
         specification is available to the general public, that is suitable
         for revising the document straightforwardly with generic text editors
         or (for images composed of pixels) generic paint programs or (for
         drawings) some widely available drawing editor, and that is suitable
         for input to text formatters or for automatic translation to a
         variety of formats suitable for input to text formatters. A copy made
         in an otherwise Transparent file format whose markup, or absence of
         markup, has been arranged to thwart or discourage subsequent
         modification by readers is not Transparent. An image format is not
         Transparent if used for any substantial amount of text. A copy that
         is not "Transparent" is called "Opaque".</para>

         <para>Examples of suitable formats for Transparent copies include
         plain ASCII without markup, Texinfo input format, LaTeX input format,
         SGML or XML using a publicly available DTD, and standard-conforming
         simple HTML, PostScript or PDF designed for human modification.
         Examples of transparent image formats include PNG, XCF and JPG.
         Opaque formats include proprietary formats that can be read and
         edited only by proprietary word processors, SGML or XML for which the
         DTD and/or processing tools are not generally available, and the
         machine-generated HTML, PostScript or PDF produced by some word
         processors for output purposes only.</para>

         <para id="gfdl-title-page">The "Title Page" means, for a printed
         book, the title page itself, plus such following pages as are needed
         to hold, legibly, the material this License requires to appear in the
         title page. For works in formats which do not have any title page as
         such, "Title Page" means the text near the most prominent appearance
         of the work's title, preceding the beginning of the body of the
         text.</para>

         <para id="gfdl-entitled">A section "Entitled XYZ" means a named
         subunit of the Document whose title either is precisely XYZ or
         contains XYZ in parentheses following text that translates XYZ in
         another language. (Here XYZ stands for a specific section name
         mentioned below, such as "Acknowledgements", "Dedications",
         "Endorsements", or "History".) To "Preserve the Title" of such a
         section when you modify the Document means that it remains a section
         "Entitled XYZ" according to this definition.</para>

         <para>The Document may include Warranty Disclaimers next to the
         notice which states that this License applies to the Document. These
         Warranty Disclaimers are considered to be included by reference in
         this License, but only as regards disclaiming warranties: any other
         implication that these Warranty Disclaimers may have is void and has
         no effect on the meaning of this License.</para>
      </section>

      <section id="gfdl-2">
         <title>VERBATIM COPYING</title>

         <para>You may copy and distribute the Document in any medium, either
         commercially or noncommercially, provided that this License, the
         copyright notices, and the license notice saying this License applies
         to the Document are reproduced in all copies, and that you add no
         other conditions whatsoever to those of this License. You may not use
         technical measures to obstruct or control the reading or further
         copying of the copies you make or distribute. However, you may accept
         compensation in exchange for copies. If you distribute a large enough
         number of copies you must also follow the conditions in section
         3.</para>

         <para>You may also lend copies, under the same conditions stated
         above, and you may publicly display copies.</para>
      </section>

      <section id="gfdl-3">
         <title>COPYING IN QUANTITY</title>

         <para>If you publish printed copies (or copies in media that commonly
         have printed covers) of the Document, numbering more than 100, and
         the Document's license notice requires Cover Texts, you must enclose
         the copies in covers that carry, clearly and legibly, all these Cover
         Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
         the back cover. Both covers must also clearly and legibly identify
         you as the publisher of these copies. The front cover must present
         the full title with all words of the title equally prominent and
         visible. You may add other material on the covers in addition.
         Copying with changes limited to the covers, as long as they preserve
         the title of the Document and satisfy these conditions, can be
         treated as verbatim copying in other respects.</para>

         <para>If the required texts for either cover are too voluminous to
         fit legibly, you should put the first ones listed (as many as fit
         reasonably) on the actual cover, and continue the rest onto adjacent
         pages.</para>

         <para>If you publish or distribute Opaque copies of the Document
         numbering more than 100, you must either include a machine-readable
         Transparent copy along with each Opaque copy, or state in or with
         each Opaque copy a computer-network location from which the general
         network-using public has access to download using public-standard
         network protocols a complete Transparent copy of the Document, free
         of added material. If you use the latter option, you must take
         reasonably prudent steps, when you begin distribution of Opaque
         copies in quantity, to ensure that this Transparent copy will remain
         thus accessible at the stated location until at least one year after
         the last time you distribute an Opaque copy (directly or through your
         agents or retailers) of that edition to the public.</para>

         <para>It is requested, but not required, that you contact the authors
         of the Document well before redistributing any large number of
         copies, to give them a chance to provide you with an updated version
         of the Document.</para>
      </section>

      <section id="gfdl-4">
         <title>MODIFICATIONS</title>

         <para>You may copy and distribute a Modified Version of the Document
         under the conditions of sections 2 and 3 above, provided that you
         release the Modified Version under precisely this License, with the
         Modified Version filling the role of the Document, thus licensing
         distribution and modification of the Modified Version to whoever
         possesses a copy of it. In addition, you must do these things in the
         Modified Version:</para>

         <orderedlist id="gfdl-modif-cond" numeration="upperalpha">
            <title>GNU FDL Modification Conditions</title>

            <listitem>
               <simpara>Use in the Title Page (and on the covers, if any) a
               title distinct from that of the Document, and from those of
               previous versions (which should, if there were any, be listed
               in the History section of the Document). You may use the same
               title as a previous version if the original publisher of that
               version gives permission.</simpara>
            </listitem>

            <listitem>
               <simpara>List on the Title Page, as authors, one or more
               persons or entities responsible for authorship of the
               modifications in the Modified Version, together with at least
               five of the principal authors of the Document (all of its
               principal authors, if it has fewer than five), unless they
               release you from this requirement.</simpara>
            </listitem>

            <listitem>
               <simpara>State on the Title page the name of the publisher of
               the Modified Version, as the publisher.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve all the copyright notices of the
               Document.</simpara>
            </listitem>

            <listitem>
               <simpara>Add an appropriate copyright notice for your
               modifications adjacent to the other copyright
               notices.</simpara>
            </listitem>

            <listitem>
               <simpara>Include, immediately after the copyright notices, a
               license notice giving the public permission to use the Modified
               Version under the terms of this License, in the form shown in
               the <link linkend="gfdl-addendum">Addendum</link>
               below.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve in that license notice the full lists of
               Invariant Sections and required Cover Texts given in the
               Document's license notice.</simpara>
            </listitem>

            <listitem>
               <simpara>Include an unaltered copy of this License.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve the section Entitled "History", Preserve its
               Title, and add to it an item stating at least the title, year,
               new authors, and publisher of the Modified Version as given on
               the Title Page. If there is no section Entitled "History" in
               the Document, create one stating the title, year, authors, and
               publisher of the Document as given on its Title Page, then add
               an item describing the Modified Version as stated in the
               previous sentence.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve the network location, if any, given in the
               Document for public access to a Transparent copy of the
               Document, and likewise the network locations given in the
               Document for previous versions it was based on. These may be
               placed in the "History" section. You may omit a network
               location for a work that was published at least four years
               before the Document itself, or if the original publisher of the
               version it refers to gives permission.</simpara>
            </listitem>

            <listitem>
               <simpara>For any section Entitled "Acknowledgements" or
               "Dedications", Preserve the Title of the section, and preserve
               in the section all the substance and tone of each of the
               contributor acknowledgements and/or dedications given
               therein.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve all the Invariant Sections of the Document,
               unaltered in their text and in their titles. Section numbers or
               the equivalent are not considered part of the section
               titles.</simpara>
            </listitem>

            <listitem>
               <simpara>Delete any section Entitled "Endorsements". Such a
               section may not be included in the Modified Version.</simpara>
            </listitem>

            <listitem>
               <simpara>Do not retitle any existing section to be Entitled
               "Endorsements" or to conflict in title with any Invariant
               Section.</simpara>
            </listitem>

            <listitem>
               <simpara>Preserve any Warranty Disclaimers.</simpara>
            </listitem>
         </orderedlist>

         <para>If the Modified Version includes new front-matter sections or
         appendices that qualify as Secondary Sections and contain no material
         copied from the Document, you may at your option designate some or
         all of these sections as invariant. To do this, add their titles to
         the list of Invariant Sections in the Modified Version's license
         notice. These titles must be distinct from any other section
         titles.</para>

         <para>You may add a section Entitled "Endorsements", provided it
         contains nothing but endorsements of your Modified Version by various
         parties--for example, statements of peer review or that the text has
         been approved by an organization as the authoritative definition of a
         standard.</para>

         <para>You may add a passage of up to five words as a Front-Cover
         Text, and a passage of up to 25 words as a Back-Cover Text, to the
         end of the list of Cover Texts in the Modified Version. Only one
         passage of Front-Cover Text and one of Back-Cover Text may be added
         by (or through arrangements made by) any one entity. If the Document
         already includes a cover text for the same cover, previously added by
         you or by arrangement made by the same entity you are acting on
         behalf of, you may not add another; but you may replace the old one,
         on explicit permission from the previous publisher that added the old
         one.</para>

         <para>The author(s) and publisher(s) of the Document do not by this
         License give permission to use their names for publicity for or to
         assert or imply endorsement of any Modified Version.</para>
      </section>

      <section id="gfdl-5">
         <title>COMBINING DOCUMENTS</title>

         <para>You may combine the Document with other documents released
         under this License, under the terms defined in <link
         linkend="gfdl-4">section 4</link> above for modified versions,
         provided that you include in the combination all of the Invariant
         Sections of all of the original documents, unmodified, and list them
         all as Invariant Sections of your combined work in its license
         notice, and that you preserve all their Warranty Disclaimers.</para>

         <para>The combined work need only contain one copy of this License,
         and multiple identical Invariant Sections may be replaced with a
         single copy. If there are multiple Invariant Sections with the same
         name but different contents, make the title of each such section
         unique by adding at the end of it, in parentheses, the name of the
         original author or publisher of that section if known, or else a
         unique number. Make the same adjustment to the section titles in the
         list of Invariant Sections in the license notice of the combined
         work.</para>

         <para>In the combination, you must combine any sections Entitled
         "History" in the various original documents, forming one section
         Entitled "History"; likewise combine any sections Entitled
         "Acknowledgements", and any sections Entitled "Dedications". You must
         delete all sections Entitled "Endorsements".</para>
      </section>

      <section id="gfdl-6">
         <title>COLLECTIONS OF DOCUMENTS</title>

         <para>You may make a collection consisting of the Document and other
         documents released under this License, and replace the individual
         copies of this License in the various documents with a single copy
         that is included in the collection, provided that you follow the
         rules of this License for verbatim copying of each of the documents
         in all other respects.</para>

         <para>You may extract a single document from such a collection, and
         distribute it individually under this License, provided you insert a
         copy of this License into the extracted document, and follow this
         License in all other respects regarding verbatim copying of that
         document.</para>
      </section>

      <section id="gfdl-7">
         <title>AGGREGATION WITH INDEPENDENT WORKS</title>

         <para>A compilation of the Document or its derivatives with other
         separate and independent documents or works, in or on a volume of a
         storage or distribution medium, is called an "aggregate" if the
         copyright resulting from the compilation is not used to limit the
         legal rights of the compilation's users beyond what the individual
         works permit. When the Document is included in an aggregate, this
         License does not apply to the other works in the aggregate which are
         not themselves derivative works of the Document.</para>

         <para>If the Cover Text requirement of section 3 is applicable to
         these copies of the Document, then if the Document is less than one
         half of the entire aggregate, the Document's Cover Texts may be
         placed on covers that bracket the Document within the aggregate, or
         the electronic equivalent of covers if the Document is in electronic
         form. Otherwise they must appear on printed covers that bracket the
         whole aggregate.</para>
      </section>

      <section id="gfdl-8">
         <title>TRANSLATION</title>

         <para>Translation is considered a kind of modification, so you may
         distribute translations of the Document under the terms of section 4.
         Replacing Invariant Sections with translations requires special
         permission from their copyright holders, but you may include
         translations of some or all Invariant Sections in addition to the
         original versions of these Invariant Sections. You may include a
         translation of this License, and all the license notices in the
         Document, and any Warranty Disclaimers, provided that you also
         include the original English version of this License and the original
         versions of those notices and disclaimers. In case of a disagreement
         between the translation and the original version of this License or a
         notice or disclaimer, the original version will prevail.</para>

         <para>If a section in the Document is Entitled "Acknowledgements",
         "Dedications", or "History", the requirement (section 4) to Preserve
         its Title (section 1) will typically require changing the actual
         title.</para>
      </section>

      <section id="gfdl-9">
         <title>TERMINATION</title>

         <para>You may not copy, modify, sublicense, or distribute the
         Document except as expressly provided for under this License. Any
         other attempt to copy, modify, sublicense or distribute the Document
         is void, and will automatically terminate your rights under this
         License. However, parties who have received copies, or rights, from
         you under this License will not have their licenses terminated so
         long as such parties remain in full compliance.</para>
      </section>

      <section id="gfdl-10">
         <title>FUTURE REVISIONS OF THIS LICENSE</title>

         <para>The Free Software Foundation may publish new, revised versions
         of the GNU Free Documentation License from time to time. Such new
         versions will be similar in spirit to the present version, but may
         differ in detail to address new problems or concerns. See
         http://www.gnu.org/copyleft/.</para>

         <para>Each version of the License is given a distinguishing version
         number. If the Document specifies that a particular numbered version
         of this License "or any later version" applies to it, you have the
         option of following the terms and conditions either of that specified
         version or of any later version that has been published (not as a
         draft) by the Free Software Foundation. If the Document does not
         specify a version number of this License, you may choose any version
         ever published (not as a draft) by the Free Software
         Foundation.</para>
      </section>

      <section id="gfdl-addendum">
         <title>ADDENDUM: How to use this License for your documents</title>

         <para>To use this License in a document you have written, include a
         copy of the License in the document and put the following copyright
         and license notices just after the title page:</para>

         <blockquote id="copyright-sample">
            <title>Sample Invariant Sections list</title>

            <para>Copyright (c) YEAR YOUR NAME. Permission is granted to copy,
            distribute and/or modify this document under the terms of the GNU
            Free Documentation License, Version 1.2 or any later version
            published by the Free Software Foundation; with no Invariant
            Sections, no Front-Cover Texts, and no Back-Cover Texts. A copy of
            the license is included in the section entitled "GNU Free
            Documentation License".</para>
         </blockquote>

         <para>If you have Invariant Sections, Front-Cover Texts and
         Back-Cover Texts, replace the "with...Texts." line with this:</para>

         <blockquote id="inv-cover-sample">
            <title>Sample Invariant Sections list</title>

            <para>with the Invariant Sections being LIST THEIR TITLES, with
            the Front-Cover Texts being LIST, and with the Back-Cover Texts
            being LIST.</para>
         </blockquote>

         <para>If you have Invariant Sections without Cover Texts, or some
         other combination of the three, merge those two alternatives to suit
         the situation.</para>

         <para>If your document contains nontrivial examples of program code,
         we recommend releasing these examples in parallel under your choice
         of free software license, such as the GNU General Public License, to
         permit their use in free software.</para>
      </section>
   </appendix>

   <index></index>
</book>