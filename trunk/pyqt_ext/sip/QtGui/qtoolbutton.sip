// qtoolbutton.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QToolButton : QAbstractButton
{

%TypeHeaderCode
#include <qtoolbutton.h>
%End

public:
    enum ToolButtonPopupMode
    {
        DelayedPopup,
        MenuButtonPopup,
        InstantPopup,
    };

    explicit QToolButton(QWidget *parent /TransferThis/ = 0);
    virtual ~QToolButton();
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    Qt::ToolButtonStyle toolButtonStyle() const;
    Qt::ArrowType arrowType() const;
    void setArrowType(Qt::ArrowType type);
    void setMenu(QMenu *menu);
    QMenu *menu() const;
    void setPopupMode(QToolButton::ToolButtonPopupMode mode);
    QToolButton::ToolButtonPopupMode popupMode() const;
    QAction *defaultAction() const;
    void setAutoRaise(bool enable);
    bool autoRaise() const;

public slots:
    void showMenu();
    void setToolButtonStyle(Qt::ToolButtonStyle style);
    void setDefaultAction(QAction *);

signals:
    void triggered(QAction *);

protected:
    virtual bool event(QEvent *e);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void actionEvent(QActionEvent *);
    virtual void enterEvent(QEvent *);
    virtual void leaveEvent(QEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual void changeEvent(QEvent *);
    virtual void nextCheckState();

private:
    QToolButton(const QToolButton &);
};
