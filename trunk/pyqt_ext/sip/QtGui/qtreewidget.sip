// qtreewidget.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qtreewidget.h>
%End


class QTreeWidgetItem
{

%TypeHeaderCode
#include <qtreewidget.h>
%End

public:
    enum
    {
        Type,
        UserType,
    };

    QTreeWidgetItem(int type = Type);
    QTreeWidgetItem(const QStringList &strings, int type = Type);
    QTreeWidgetItem(QTreeWidget *view /TransferThis/, int type = Type);
    QTreeWidgetItem(QTreeWidget *view /TransferThis/, const QStringList &strings, int type = Type);
    QTreeWidgetItem(QTreeWidget *view /TransferThis/, QTreeWidgetItem *after, int type = Type);
    QTreeWidgetItem(QTreeWidgetItem *parent /TransferThis/, int type = Type);
    QTreeWidgetItem(QTreeWidgetItem *parent /TransferThis/, const QStringList &strings, int type = Type);
    QTreeWidgetItem(QTreeWidgetItem *parent /TransferThis/, QTreeWidgetItem *after, int type = Type);
    QTreeWidgetItem(const QTreeWidgetItem &other);
    virtual ~QTreeWidgetItem();
    virtual QTreeWidgetItem *clone() const /Factory/;
    QTreeWidget *treeWidget() const;
    Qt::ItemFlags flags() const;
    QString text(int column) const;
    QIcon icon(int column) const;
    QString statusTip(int column) const;
%If (PyQt_ToolTip)
    QString toolTip(int column) const;
%End
%If (PyQt_WhatsThis)
    QString whatsThis(int column) const;
%End
    QFont font(int column) const;
    int textAlignment(int column) const;
    void setTextAlignment(int column, int alignment);
    QColor backgroundColor(int column) const;
    void setBackgroundColor(int column, const QColor &color);
    QColor textColor(int column) const;
    void setTextColor(int column, const QColor &color);
    Qt::CheckState checkState(int column) const;
    void setCheckState(int column, Qt::CheckState state);
    virtual QVariant data(int column, int role) const;
    virtual void setData(int column, int role, const QVariant &value);
    virtual bool operator<(const QTreeWidgetItem &other) const;
    virtual void read(QDataStream &in) /ReleaseGIL/;
    virtual void write(QDataStream &out) const /ReleaseGIL/;
    QTreeWidgetItem *parent() const;
    QTreeWidgetItem *child(int index) const;
    int childCount() const;
    int columnCount() const;
    void addChild(QTreeWidgetItem *child /Transfer/);
    void insertChild(int index, QTreeWidgetItem *child /Transfer/);
    QTreeWidgetItem *takeChild(int index) /TransferBack/;
    int type() const;
    void setFlags(Qt::ItemFlags aflags);
    void setText(int column, const QString &atext);
    void setIcon(int column, const QIcon &aicon);
    void setStatusTip(int column, const QString &astatusTip);
%If (PyQt_ToolTip)
    void setToolTip(int column, const QString &atoolTip);
%End
%If (PyQt_WhatsThis)
    void setWhatsThis(int column, const QString &awhatsThis);
%End
    void setFont(int column, const QFont &afont);
    int indexOfChild(QTreeWidgetItem *achild) const;
    QSize sizeHint(int column) const;
    void setSizeHint(int column, const QSize &size);
    void addChildren(const QList<QTreeWidgetItem*> &children /Transfer/);
    void insertChildren(int index, const QList<QTreeWidgetItem*> &children /Transfer/);
    QList<QTreeWidgetItem*> takeChildren() /TransferBack/;
};

QDataStream &operator<<(QDataStream &out, const QTreeWidgetItem &item /Constrained/);
QDataStream &operator>>(QDataStream &in, QTreeWidgetItem &item /Constrained/);

class QTreeWidget : QTreeView
{

%TypeHeaderCode
#include <qtreewidget.h>
%End

public:
    explicit QTreeWidget(QWidget *parent /TransferThis/ = 0);
    virtual ~QTreeWidget();
    int columnCount() const;
    void setColumnCount(int columns);
    QTreeWidgetItem *topLevelItem(int index) const;
    int topLevelItemCount() const;
    void insertTopLevelItem(int index, QTreeWidgetItem *item /Transfer/);
    void addTopLevelItem(QTreeWidgetItem *item /Transfer/);
    QTreeWidgetItem *takeTopLevelItem(int index) /TransferBack/;
    int indexOfTopLevelItem(QTreeWidgetItem *item);
    void insertTopLevelItems(int index, const QList<QTreeWidgetItem*> &items /Transfer/);
    void addTopLevelItems(const QList<QTreeWidgetItem*> &items /Transfer/);
    QTreeWidgetItem *headerItem() const;
    void setHeaderItem(QTreeWidgetItem *item);
    void setHeaderLabels(const QStringList &labels);
    QTreeWidgetItem *currentItem() const;
    int currentColumn() const;
    void setCurrentItem(QTreeWidgetItem *item);
    void setCurrentItem(QTreeWidgetItem *item, int column);
    QTreeWidgetItem *itemAt(const QPoint &p) const;
    QTreeWidgetItem *itemAt(int ax, int ay) const;
    QRect visualItemRect(const QTreeWidgetItem *item) const;
    int sortColumn() const;
    void sortItems(int column, Qt::SortOrder order);
    void setSortingEnabled(bool enable);
    bool isSortingEnabled() const;
    void editItem(QTreeWidgetItem *item, int column = 0);
    void openPersistentEditor(QTreeWidgetItem *item, int column = 0);
    void closePersistentEditor(QTreeWidgetItem *item, int column = 0);
    QWidget *itemWidget(QTreeWidgetItem *item, int column) const;
    void setItemWidget(QTreeWidgetItem *item, int column, QWidget *widget);
    bool isItemSelected(const QTreeWidgetItem *item) const;
    void setItemSelected(const QTreeWidgetItem *item, bool select);
    QList<QTreeWidgetItem*> selectedItems() const;
    QList<QTreeWidgetItem*> findItems(const QString &text, Qt::MatchFlags flags, int column = 0) const;
    bool isItemHidden(const QTreeWidgetItem *item) const;
    void setItemHidden(const QTreeWidgetItem *item, bool hide);
    bool isItemExpanded(const QTreeWidgetItem *item) const;
    void setItemExpanded(const QTreeWidgetItem *item, bool expand);

public slots:
    void scrollToItem(const QTreeWidgetItem *item, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    void expandItem(const QTreeWidgetItem *item);
    void collapseItem(const QTreeWidgetItem *item);
    void clear();

signals:
    void itemPressed(QTreeWidgetItem *item, int column);
    void itemClicked(QTreeWidgetItem *item, int column);
    void itemDoubleClicked(QTreeWidgetItem *item, int column);
    void itemActivated(QTreeWidgetItem *item, int column);
    void itemEntered(QTreeWidgetItem *item, int column);
    void itemChanged(QTreeWidgetItem *item, int column);
    void itemExpanded(QTreeWidgetItem *item);
    void itemCollapsed(QTreeWidgetItem *item);
    void currentItemChanged(QTreeWidgetItem *current, QTreeWidgetItem *previous);
    void itemSelectionChanged();

protected:
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QList<QTreeWidgetItem*> items) const /TransferBack/;
    virtual bool dropMimeData(QTreeWidgetItem *parent, int index, const QMimeData *data, Qt::DropAction action);
    virtual Qt::DropActions supportedDropActions() const;
    QList<QTreeWidgetItem*> items(const QMimeData *data) const;
    QModelIndex indexFromItem(QTreeWidgetItem *item, int column = 0) const;
    QTreeWidgetItem *itemFromIndex(const QModelIndex &index) const;
    virtual bool event(QEvent *e);

private:
    QTreeWidget(const QTreeWidget &);
};
