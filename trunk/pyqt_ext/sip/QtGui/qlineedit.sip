// qlineedit.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QLineEdit : QWidget
{

%TypeHeaderCode
#include <qlineedit.h>
%End

public:
    explicit QLineEdit(QWidget *parent /TransferThis/ = 0);
    QLineEdit(const QString &, QWidget *parent /TransferThis/ = 0);
    virtual ~QLineEdit();
    QString text() const;
    QString displayText() const;
    int maxLength() const;
    void setMaxLength(int);
    void setFrame(bool);
    bool hasFrame() const;

    enum EchoMode
    {
        Normal,
        NoEcho,
        Password,
    };

    QLineEdit::EchoMode echoMode() const;
    void setEchoMode(QLineEdit::EchoMode);
    bool isReadOnly() const;
    void setReadOnly(bool);
    void setValidator(const QValidator *);
    const QValidator *validator() const;
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    int cursorPosition() const;
    void setCursorPosition(int);
    int cursorPositionAt(const QPoint &pos);
    void setAlignment(Qt::Alignment flag);
    Qt::Alignment alignment() const;
    void cursorForward(bool mark, int steps = 1);
    void cursorBackward(bool mark, int steps = 1);
    void cursorWordForward(bool mark);
    void cursorWordBackward(bool mark);
    void backspace();
    void del() /PyName=del_/;
    void home(bool mark);
    void end(bool mark);
    bool isModified() const;
    void setModified(bool);
    void setSelection(int, int);
    bool hasSelectedText() const;
    QString selectedText() const;
    int selectionStart() const;
    bool isUndoAvailable() const;
    bool isRedoAvailable() const;
    void setDragEnabled(bool b);
    bool dragEnabled() const;
    QString inputMask() const;
    void setInputMask(const QString &inputMask);
    bool hasAcceptableInput() const;
    void setText(const QString &);
    void clear();
    void selectAll();
    void undo();
    void redo();
    void cut();
    void copy() const;
    void paste();
    void deselect();
    void insert(const QString &);
    QMenu *createStandardContextMenu() /Factory/;

signals:
    void textChanged(const QString &);
    void textEdited(const QString &);
    void cursorPositionChanged(int, int);
    void returnPressed();
    void editingFinished();
    void selectionChanged();

protected:
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void mouseDoubleClickEvent(QMouseEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual void focusOutEvent(QFocusEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void dragEnterEvent(QDragEnterEvent *);
    virtual void dragMoveEvent(QDragMoveEvent *e);
    virtual void dragLeaveEvent(QDragLeaveEvent *e);
    virtual void dropEvent(QDropEvent *);
    virtual void changeEvent(QEvent *);
    virtual void contextMenuEvent(QContextMenuEvent *);
    virtual void inputMethodEvent(QInputMethodEvent *);

public:
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    virtual bool event(QEvent *);

private:
    QLineEdit(const QLineEdit &);
};
