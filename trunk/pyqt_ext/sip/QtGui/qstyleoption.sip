// qstyleoption.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qstyleoption.h>
%End


class QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum OptionType
    {
        SO_Default,
        SO_FocusRect,
        SO_Button,
        SO_Tab,
        SO_MenuItem,
        SO_Frame,
        SO_ProgressBar,
        SO_ToolBox,
        SO_Header,
        SO_Q3DockWindow,
        SO_DockWidget,
        SO_Q3ListViewItem,
        SO_ViewItem,
        SO_TabWidgetFrame,
        SO_TabBarBase,
        SO_RubberBand,
        SO_ToolBar,
        SO_Complex,
        SO_Slider,
        SO_SpinBox,
        SO_ToolButton,
        SO_ComboBox,
        SO_Q3ListView,
        SO_TitleBar,
        SO_GroupBox,
        SO_CustomBase,
        SO_ComplexCustomBase,
    };

    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    int version;
    int type;
    QFlags<QStyle::StateFlag> state;
    Qt::LayoutDirection direction;
    QRect rect;
    QFontMetrics fontMetrics;
    QPalette palette;
    QStyleOption(int version = QStyleOption::Version, int type = SO_Default);
    QStyleOption(const QStyleOption &other);
    ~QStyleOption();
    void init(const QWidget *w);
    void initFrom(const QWidget *w);
};

class QStyleOptionFocusRect : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QColor backgroundColor;
    QStyleOptionFocusRect();
    QStyleOptionFocusRect(const QStyleOptionFocusRect &other);
};

class QStyleOptionFrame : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    int lineWidth;
    int midLineWidth;
    QStyleOptionFrame();
    QStyleOptionFrame(const QStyleOptionFrame &other);
};

class QStyleOptionFrameV2 : QStyleOptionFrame
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Version,
    };

    enum FrameFeature
    {
        None,
        Flat,
    };

    typedef QFlags<QStyleOptionFrameV2::FrameFeature> FrameFeatures;
    QFlags<QStyleOptionFrameV2::FrameFeature> features;
    QStyleOptionFrameV2();
    QStyleOptionFrameV2(const QStyleOptionFrameV2 &other);
    QStyleOptionFrameV2(const QStyleOptionFrame &other);
};

QFlags<QStyleOptionFrameV2::FrameFeature> operator|(QStyleOptionFrameV2::FrameFeature f1, QFlags<QStyleOptionFrameV2::FrameFeature> f2);
QFlags<QStyleOptionFrameV2::FrameFeature> operator|(QStyleOptionFrameV2::FrameFeature f1, QStyleOptionFrameV2::FrameFeature f2);

class QStyleOptionTabWidgetFrame : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    int lineWidth;
    int midLineWidth;
    QTabBar::Shape shape;
    QSize tabBarSize;
    QSize rightCornerWidgetSize;
    QSize leftCornerWidgetSize;
    QStyleOptionTabWidgetFrame();
    QStyleOptionTabWidgetFrame(const QStyleOptionTabWidgetFrame &other);
};

class QStyleOptionTabBarBase : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QTabBar::Shape shape;
    QRect tabBarRect;
    QRect selectedTabRect;
    QStyleOptionTabBarBase();
    QStyleOptionTabBarBase(const QStyleOptionTabBarBase &other);
};

class QStyleOptionHeader : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    enum SectionPosition
    {
        Beginning,
        Middle,
        End,
        OnlyOneSection,
    };

    enum SelectedPosition
    {
        NotAdjacent,
        NextIsSelected,
        PreviousIsSelected,
        NextAndPreviousAreSelected,
    };

    enum SortIndicator
    {
        None,
        SortUp,
        SortDown,
    };

    int section;
    QString text;
    Qt::Alignment textAlignment;
    QIcon icon;
    Qt::Alignment iconAlignment;
    QStyleOptionHeader::SectionPosition position;
    QStyleOptionHeader::SelectedPosition selectedPosition;
    QStyleOptionHeader::SortIndicator sortIndicator;
    Qt::Orientation orientation;
    QStyleOptionHeader();
    QStyleOptionHeader(const QStyleOptionHeader &other);
};

class QStyleOptionButton : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    enum ButtonFeature
    {
        None,
        Flat,
        HasMenu,
        DefaultButton,
        AutoDefaultButton,
    };

    typedef QFlags<QStyleOptionButton::ButtonFeature> ButtonFeatures;
    QFlags<QStyleOptionButton::ButtonFeature> features;
    QString text;
    QIcon icon;
    QSize iconSize;
    QStyleOptionButton();
    QStyleOptionButton(const QStyleOptionButton &other);
};

QFlags<QStyleOptionButton::ButtonFeature> operator|(QStyleOptionButton::ButtonFeature f1, QFlags<QStyleOptionButton::ButtonFeature> f2);
QFlags<QStyleOptionButton::ButtonFeature> operator|(QStyleOptionButton::ButtonFeature f1, QStyleOptionButton::ButtonFeature f2);

class QStyleOptionTab : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    enum TabPosition
    {
        Beginning,
        Middle,
        End,
        OnlyOneTab,
    };

    enum SelectedPosition
    {
        NotAdjacent,
        NextIsSelected,
        PreviousIsSelected,
    };

    enum CornerWidget
    {
        NoCornerWidgets,
        LeftCornerWidget,
        RightCornerWidget,
    };

    typedef QFlags<QStyleOptionTab::CornerWidget> CornerWidgets;
    QTabBar::Shape shape;
    QString text;
    QIcon icon;
    int row;
    QStyleOptionTab::TabPosition position;
    QStyleOptionTab::SelectedPosition selectedPosition;
    QFlags<QStyleOptionTab::CornerWidget> cornerWidgets;
    QStyleOptionTab();
    QStyleOptionTab(const QStyleOptionTab &other);
};

QFlags<QStyleOptionTab::CornerWidget> operator|(QStyleOptionTab::CornerWidget f1, QFlags<QStyleOptionTab::CornerWidget> f2);
QFlags<QStyleOptionTab::CornerWidget> operator|(QStyleOptionTab::CornerWidget f1, QStyleOptionTab::CornerWidget f2);

class QStyleOptionTabV2 : QStyleOptionTab
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Version,
    };

    QSize iconSize;
    QStyleOptionTabV2();
    QStyleOptionTabV2(const QStyleOptionTabV2 &other);
    QStyleOptionTabV2(const QStyleOptionTab &other);
};

class QStyleOptionProgressBar : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    int minimum;
    int maximum;
    int progress;
    QString text;
    Qt::Alignment textAlignment;
    bool textVisible;
    QStyleOptionProgressBar();
    QStyleOptionProgressBar(const QStyleOptionProgressBar &other);
};

class QStyleOptionProgressBarV2 : QStyleOptionProgressBar
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    Qt::Orientation orientation;
    bool invertedAppearance;
    bool bottomToTop;
    QStyleOptionProgressBarV2();
    QStyleOptionProgressBarV2(const QStyleOptionProgressBar &other);
    QStyleOptionProgressBarV2(const QStyleOptionProgressBarV2 &other);
};

class QStyleOptionMenuItem : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    enum MenuItemType
    {
        Normal,
        DefaultItem,
        Separator,
        SubMenu,
        Scroller,
        TearOff,
        Margin,
        EmptyArea,
    };

    enum CheckType
    {
        NotCheckable,
        Exclusive,
        NonExclusive,
    };

    QStyleOptionMenuItem::MenuItemType menuItemType;
    QStyleOptionMenuItem::CheckType checkType;
    bool checked;
    bool menuHasCheckableItems;
    QRect menuRect;
    QString text;
    QIcon icon;
    int maxIconWidth;
    int tabWidth;
    QFont font;
    QStyleOptionMenuItem();
    QStyleOptionMenuItem(const QStyleOptionMenuItem &other);
};

class QStyleOptionDockWidget : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QString title;
    bool closable;
    bool movable;
    bool floatable;
    QStyleOptionDockWidget();
    QStyleOptionDockWidget(const QStyleOptionDockWidget &other);
};

class QStyleOptionViewItem : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    enum Position
    {
        Left,
        Right,
        Top,
        Bottom,
    };

    Qt::Alignment displayAlignment;
    Qt::Alignment decorationAlignment;
    Qt::TextElideMode textElideMode;
    QStyleOptionViewItem::Position decorationPosition;
    QSize decorationSize;
    QFont font;
    bool showDecorationSelected;
    QStyleOptionViewItem();
    QStyleOptionViewItem(const QStyleOptionViewItem &other);
};

class QStyleOptionToolBox : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QString text;
    QIcon icon;
    QStyleOptionToolBox();
    QStyleOptionToolBox(const QStyleOptionToolBox &other);
};

class QStyleOptionRubberBand : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QRubberBand::Shape shape;
    bool opaque;
    QStyleOptionRubberBand();
    QStyleOptionRubberBand(const QStyleOptionRubberBand &other);
};

class QStyleOptionComplex : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QFlags<QStyle::SubControl> subControls;
    QFlags<QStyle::SubControl> activeSubControls;
    QStyleOptionComplex(int version = QStyleOptionComplex::Version, int type = SO_Complex);
    QStyleOptionComplex(const QStyleOptionComplex &other);
};

class QStyleOptionSlider : QStyleOptionComplex
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    Qt::Orientation orientation;
    int minimum;
    int maximum;
    QSlider::TickPosition tickPosition;
    int tickInterval;
    bool upsideDown;
    int sliderPosition;
    int sliderValue;
    int singleStep;
    int pageStep;
    qreal notchTarget;
    bool dialWrapping;
    QStyleOptionSlider();
    QStyleOptionSlider(const QStyleOptionSlider &other);
};

class QStyleOptionSpinBox : QStyleOptionComplex
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QAbstractSpinBox::ButtonSymbols buttonSymbols;
    QFlags<QAbstractSpinBox::StepEnabledFlag> stepEnabled;
    bool frame;
    QStyleOptionSpinBox();
    QStyleOptionSpinBox(const QStyleOptionSpinBox &other);
};

class QStyleOptionToolButton : QStyleOptionComplex
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    enum ToolButtonFeature
    {
        None,
        Arrow,
        Menu,
        PopupDelay,
    };

    typedef QFlags<QStyleOptionToolButton::ToolButtonFeature> ToolButtonFeatures;
    QFlags<QStyleOptionToolButton::ToolButtonFeature> features;
    QIcon icon;
    QSize iconSize;
    QString text;
    Qt::ArrowType arrowType;
    Qt::ToolButtonStyle toolButtonStyle;
    QPoint pos;
    QFont font;
    QStyleOptionToolButton();
    QStyleOptionToolButton(const QStyleOptionToolButton &other);
};

QFlags<QStyleOptionToolButton::ToolButtonFeature> operator|(QStyleOptionToolButton::ToolButtonFeature f1, QFlags<QStyleOptionToolButton::ToolButtonFeature> f2);
QFlags<QStyleOptionToolButton::ToolButtonFeature> operator|(QStyleOptionToolButton::ToolButtonFeature f1, QStyleOptionToolButton::ToolButtonFeature f2);

class QStyleOptionComboBox : QStyleOptionComplex
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    bool editable;
    QRect popupRect;
    bool frame;
    QString currentText;
    QIcon currentIcon;
    QSize iconSize;
    QStyleOptionComboBox();
    QStyleOptionComboBox(const QStyleOptionComboBox &other);
};

class QStyleOptionTitleBar : QStyleOptionComplex
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QString text;
    QIcon icon;
    int titleBarState;
    Qt::WFlags titleBarFlags;
    QStyleOptionTitleBar();
    QStyleOptionTitleBar(const QStyleOptionTitleBar &other);
};

class QStyleHintReturn
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum HintReturnType
    {
        SH_Default,
        SH_Mask,
    };

    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QStyleHintReturn(int version = QStyleOption::Version, int type = SH_Default);
    ~QStyleHintReturn();
    int version;
    int type;
};

class QStyleHintReturnMask : QStyleHintReturn
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QStyleHintReturnMask();
    QRegion region;
};

class QStyleOptionToolBar : QStyleOption
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    enum ToolBarPosition
    {
        Beginning,
        Middle,
        End,
        OnlyOne,
    };

    enum ToolBarFeature
    {
        None,
        Movable,
    };

    typedef QFlags<QStyleOptionToolBar::ToolBarFeature> ToolBarFeatures;
    QStyleOptionToolBar::ToolBarPosition positionOfLine;
    QStyleOptionToolBar::ToolBarPosition positionWithinLine;
    Qt::ToolBarArea toolBarArea;
    QFlags<QStyleOptionToolBar::ToolBarFeature> features;
    int lineWidth;
    int midLineWidth;
    QStyleOptionToolBar();
    QStyleOptionToolBar(const QStyleOptionToolBar &other);
};

QFlags<QStyleOptionToolBar::ToolBarFeature> operator|(QStyleOptionToolBar::ToolBarFeature f1, QFlags<QStyleOptionToolBar::ToolBarFeature> f2);
QFlags<QStyleOptionToolBar::ToolBarFeature> operator|(QStyleOptionToolBar::ToolBarFeature f1, QStyleOptionToolBar::ToolBarFeature f2);

class QStyleOptionGroupBox : QStyleOptionComplex
{

%TypeHeaderCode
#include <qstyleoption.h>
%End

public:
    enum
    {
        Type,
    };

    enum
    {
        Version,
    };

    QFlags<QStyleOptionFrameV2::FrameFeature> features;
    QString text;
    Qt::Alignment textAlignment;
    QColor textColor;
    int lineWidth;
    int midLineWidth;
    QStyleOptionGroupBox();
    QStyleOptionGroupBox(const QStyleOptionGroupBox &other);
};
