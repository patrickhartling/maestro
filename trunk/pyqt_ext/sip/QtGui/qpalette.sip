// qpalette.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qpalette.h>
%End


class QPalette
{

%TypeHeaderCode
#include <qpalette.h>
%End

public:
    QPalette();
    QPalette(const QColor &button);
    QPalette(Qt::GlobalColor button);
    QPalette(const QColor &button, const QColor &background);
    QPalette(const QBrush &foreground, const QBrush &button, const QBrush &light, const QBrush &dark, const QBrush &mid, const QBrush &text, const QBrush &bright_text, const QBrush &base, const QBrush &background);
    QPalette(const QColor &foreground, const QColor &background, const QColor &light, const QColor &dark, const QColor &mid, const QColor &text, const QColor &base);
    QPalette(const QVariant &) /NoDerived/;
%MethodCode
        sipCpp = new QPalette(qVariantValue<QPalette>(*a0));
%End

    QPalette(const QPalette &palette);
    ~QPalette();
    operator QVariant() const;

    enum ColorGroup
    {
        Active,
        Disabled,
        Inactive,
        NColorGroups,
        Current,
        All,
        Normal,
    };

    enum ColorRole
    {
        WindowText,
        Foreground,
        Button,
        Light,
        Midlight,
        Dark,
        Mid,
        Text,
        BrightText,
        ButtonText,
        Base,
        Window,
        Background,
        Shadow,
        Highlight,
        HighlightedText,
        Link,
        LinkVisited,
        AlternateBase,
        NColorRoles,
        NoRole,
    };

    QPalette::ColorGroup currentColorGroup() const;
    void setCurrentColorGroup(QPalette::ColorGroup cg);
    const QColor &color(QPalette::ColorGroup cg, QPalette::ColorRole cr) const;
    const QBrush &brush(QPalette::ColorGroup cg, QPalette::ColorRole cr) const;
    void setBrush(QPalette::ColorGroup cg, QPalette::ColorRole cr, const QBrush &brush);
    void setColorGroup(QPalette::ColorGroup cr, const QBrush &foreground, const QBrush &button, const QBrush &light, const QBrush &dark, const QBrush &mid, const QBrush &text, const QBrush &bright_text, const QBrush &base, const QBrush &background);
    bool isEqual(QPalette::ColorGroup cr1, QPalette::ColorGroup cr2) const;
    const QColor &color(QPalette::ColorRole cr) const;
    const QBrush &brush(QPalette::ColorRole cr) const;
    const QBrush &foreground() const;
    const QBrush &windowText() const;
    const QBrush &button() const;
    const QBrush &light() const;
    const QBrush &dark() const;
    const QBrush &mid() const;
    const QBrush &text() const;
    const QBrush &base() const;
    const QBrush &alternateBase() const;
    const QBrush &window() const;
    const QBrush &background() const;
    const QBrush &midlight() const;
    const QBrush &brightText() const;
    const QBrush &buttonText() const;
    const QBrush &shadow() const;
    const QBrush &highlight() const;
    const QBrush &highlightedText() const;
    const QBrush &link() const;
    const QBrush &linkVisited() const;
    bool operator==(const QPalette &p) const;
    bool operator!=(const QPalette &p) const;
    bool isCopyOf(const QPalette &p) const;
    int serialNumber() const;
    QPalette resolve(const QPalette &) const;
    uint resolve() const;
    void resolve(uint mask);
    void setColor(QPalette::ColorGroup acg, QPalette::ColorRole acr, const QColor &acolor);
    void setColor(QPalette::ColorRole acr, const QColor &acolor);
    void setBrush(QPalette::ColorRole acr, const QBrush &abrush);
};

QDataStream &operator<<(QDataStream &s, const QPalette &p /Constrained/);
QDataStream &operator>>(QDataStream &ds, QPalette &p /Constrained/);
