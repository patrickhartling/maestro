// qtextlayout.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QTextInlineObject
{

%TypeHeaderCode
#include <qtextlayout.h>
%End

public:
    bool isValid() const;
    QRectF rect() const;
    qreal width() const;
    qreal ascent() const;
    qreal descent() const;
    qreal height() const;
    Qt::LayoutDirection textDirection() const;
    void setWidth(qreal w);
    void setAscent(qreal a);
    void setDescent(qreal d);
    int textPosition() const;
    int formatIndex() const;
    QTextFormat format() const;
};

class QTextLayout
{

%TypeHeaderCode
#include <qtextlayout.h>
%End

public:
    QTextLayout();
    QTextLayout(const QString &text);
    QTextLayout(const QString &text, const QFont &font, QPaintDevice *paintdevice = 0);
    QTextLayout(const QTextBlock &b);
    ~QTextLayout();
    void setFont(const QFont &f);
    QFont font() const;
    void setText(const QString &string);
    QString text() const;
    void setTextOption(const QTextOption &option);
    QTextOption textOption() const;
    void setPreeditArea(int position, const QString &text);
    int preeditAreaPosition() const;
    QString preeditAreaText() const;

    struct FormatRange
    {

%TypeHeaderCode
#include <qtextlayout.h>
%End

        int start;
        int length;
        QTextCharFormat format;
    };

    void setAdditionalFormats(const QList<QTextLayout::FormatRange> &overrides);
    QList<QTextLayout::FormatRange> additionalFormats() const;
    void clearAdditionalFormats();
    void setCacheEnabled(bool enable);
    bool cacheEnabled() const;
    void beginLayout();
    void endLayout();
    QTextLine createLine();
    int lineCount() const;
    QTextLine lineAt(int i) const;
    QTextLine lineForTextPosition(int pos) const;

    enum CursorMode
    {
        SkipCharacters,
        SkipWords,
    };

    bool isValidCursorPosition(int pos) const;
    int nextCursorPosition(int oldPos, QTextLayout::CursorMode mode = QTextLayout::SkipCharacters) const;
    int previousCursorPosition(int oldPos, QTextLayout::CursorMode mode = QTextLayout::SkipCharacters) const;
    void draw(QPainter *p, const QPointF &pos, const QVector<QTextLayout::FormatRange> &selections = QVector<QTextLayout::FormatRange>(), const QRectF &clip = QRectF()) const;
    void drawCursor(QPainter *p, const QPointF &pos, int cursorPosition) const;
    QPointF position() const;
    void setPosition(const QPointF &p);
    QRectF boundingRect() const;
    qreal minimumWidth() const;
    qreal maximumWidth() const;

private:
    QTextLayout(const QTextLayout &);
};

class QTextLine
{

%TypeHeaderCode
#include <qtextlayout.h>
%End

public:
    QTextLine();
    bool isValid() const;
    QRectF rect() const;
    qreal x() const;
    qreal y() const;
    qreal width() const;
    qreal ascent() const;
    qreal descent() const;
    qreal height() const;
    qreal naturalTextWidth() const;
    QRectF naturalTextRect() const;

    enum Edge
    {
        Leading,
        Trailing,
    };

    enum CursorPosition
    {
        CursorBetweenCharacters,
        CursorOnCharacter,
    };

    qreal cursorToX(int *cursorPos /In, Out/, QTextLine::Edge edge = QTextLine::Leading) const;
    int xToCursor(qreal x, QTextLine::CursorPosition = QTextLine::CursorBetweenCharacters) const;
    void setLineWidth(qreal width);
    void setNumColumns(int columns);
    void setPosition(const QPointF &pos);
    int textStart() const;
    int textLength() const;
    int lineNumber() const;
    void draw(QPainter *p, const QPointF &point, const QTextLayout::FormatRange *selection = 0) const;
};
