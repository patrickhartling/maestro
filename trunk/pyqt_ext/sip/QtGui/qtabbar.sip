// qtabbar.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QTabBar : QWidget
{

%TypeHeaderCode
#include <qtabbar.h>
%End

public:
    explicit QTabBar(QWidget *parent /TransferThis/ = 0);
    virtual ~QTabBar();

    enum Shape
    {
        RoundedNorth,
        RoundedSouth,
        RoundedWest,
        RoundedEast,
        TriangularNorth,
        TriangularSouth,
        TriangularWest,
        TriangularEast,
    };

    QTabBar::Shape shape() const;
    void setShape(QTabBar::Shape shape);
    int addTab(const QString &text);
    int addTab(const QIcon &icon, const QString &text);
    int insertTab(int index, const QString &text);
    int insertTab(int index, const QIcon &icon, const QString &text);
    void removeTab(int index);
    bool isTabEnabled(int index) const;
    void setTabEnabled(int index, bool);
    QString tabText(int index) const;
    void setTabText(int index, const QString &text);
    QColor tabTextColor(int index) const;
    void setTabTextColor(int index, const QColor &color);
    QIcon tabIcon(int index) const;
    void setTabIcon(int index, const QIcon &icon);
%If (PyQt_ToolTip)
    void setTabToolTip(int index, const QString &tip);
%End
%If (PyQt_ToolTip)
    QString tabToolTip(int index) const;
%End
%If (PyQt_WhatsThis)
    void setTabWhatsThis(int index, const QString &text);
%End
%If (PyQt_WhatsThis)
    QString tabWhatsThis(int index) const;
%End
    void setTabData(int index, const QVariant &data);
    QVariant tabData(int index) const;
    QRect tabRect(int index) const;
    int currentIndex() const;
    int count() const;
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    void setDrawBase(bool drawTheBase);
    bool drawBase() const;
    QSize iconSize() const;
    void setIconSize(const QSize &size);

public slots:
    void setCurrentIndex(int index);

signals:
    void currentChanged(int index);

protected:
    virtual QSize tabSizeHint(int index) const;
    virtual void tabInserted(int index);
    virtual void tabRemoved(int index);
    virtual void tabLayoutChange();
    virtual bool event(QEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void changeEvent(QEvent *);

private:
    QTabBar(const QTabBar &);
};
