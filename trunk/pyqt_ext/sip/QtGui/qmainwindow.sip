// qmainwindow.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QMainWindow : QWidget
{

%TypeHeaderCode
#include <qmainwindow.h>
%End

public:
    QMainWindow(QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
    virtual ~QMainWindow();
    QSize iconSize() const;
    void setIconSize(const QSize &iconSize);
    Qt::ToolButtonStyle toolButtonStyle() const;
    void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle);
    QMenuBar *menuBar() const;
    void setMenuBar(QMenuBar *menubar /Transfer/);
    QWidget * menuWidget();
    void setMenuWidget(QWidget *menuBar /Transfer/);
    QStatusBar *statusBar() const;
    void setStatusBar(QStatusBar *statusbar /Transfer/);
    QWidget *centralWidget() const;
    void setCentralWidget(QWidget *widget /Transfer/);
    void setCorner(Qt::Corner corner, Qt::DockWidgetArea area);
    Qt::DockWidgetArea corner(Qt::Corner corner) const;
    void addToolBarBreak(Qt::ToolBarArea area = Qt::TopToolBarArea);
    void insertToolBarBreak(QToolBar *before);
    void addToolBar(Qt::ToolBarArea area, QToolBar *toolbar);
    void addToolBar(QToolBar *toolbar);
    QToolBar *addToolBar(const QString &title);
    void insertToolBar(QToolBar *before, QToolBar *toolbar);
    void removeToolBar(QToolBar *toolbar);
    Qt::ToolBarArea toolBarArea(QToolBar *toolbar) const;
    void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget);
    void addDockWidget(Qt::DockWidgetArea area, QDockWidget *dockwidget, Qt::Orientation orientation);
    void splitDockWidget(QDockWidget *after, QDockWidget *dockwidget, Qt::Orientation orientation);
    void tabifyDockWidget(QDockWidget *first, QDockWidget *second);
    void removeDockWidget(QDockWidget *dockwidget);
    Qt::DockWidgetArea dockWidgetArea(QDockWidget *dockwidget) const;
    bool isDockNestingEnabled() const;
    void setDockNestingEnabled(bool enabled);
    bool isAnimated() const;
    void setAnimated(bool enabled);
    QByteArray saveState(int version = 0) const;
    bool restoreState(const QByteArray &state, int version = 0);
    virtual QMenu *createPopupMenu() /Factory/;

signals:
    void iconSizeChanged(const QSize &iconSize);
    void toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle);

protected:
    virtual void contextMenuEvent(QContextMenuEvent *event);
    virtual bool event(QEvent *event);

private:
    QMainWindow(const QMainWindow &);
};
