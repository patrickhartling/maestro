// qdatetimeedit.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qdatetimeedit.h>
%End


class QDateTimeEdit : QAbstractSpinBox
{

%TypeHeaderCode
#include <qdatetimeedit.h>
%End

public:
    enum Section
    {
        NoSection,
        AmPmSection,
        MSecSection,
        SecondSection,
        MinuteSection,
        HourSection,
        DaySection,
        MonthSection,
        YearSection,
        TimeSections_Mask,
        DateSections_Mask,
    };

    typedef QFlags<QDateTimeEdit::Section> Sections;
    explicit QDateTimeEdit(QWidget *parent /TransferThis/ = 0);
    QDateTimeEdit(const QDateTime &dt, QWidget *parent /TransferThis/ = 0);
    QDateTimeEdit(const QDate &d, QWidget *parent /TransferThis/ = 0);
    QDateTimeEdit(const QTime &t, QWidget *parent /TransferThis/ = 0);
    QDateTime dateTime() const;
    QDate date() const;
    QTime time() const;
    QDate minimumDate() const;
    void setMinimumDate(const QDate &min);
    void clearMinimumDate();
    QDate maximumDate() const;
    void setMaximumDate(const QDate &max);
    void clearMaximumDate();
    void setDateRange(const QDate &min, const QDate &max);
    QTime minimumTime() const;
    void setMinimumTime(const QTime &min);
    void clearMinimumTime();
    QTime maximumTime() const;
    void setMaximumTime(const QTime &max);
    void clearMaximumTime();
    void setTimeRange(const QTime &min, const QTime &max);
    QFlags<QDateTimeEdit::Section> displayedSections() const;
    QDateTimeEdit::Section currentSection() const;
    void setCurrentSection(QDateTimeEdit::Section section);
    QString sectionText(QDateTimeEdit::Section s) const;
    QString displayFormat() const;
    void setDisplayFormat(const QString &format);
    virtual QSize sizeHint() const;
    virtual void clear();
    virtual void stepBy(int steps);
    virtual bool event(QEvent *e);

signals:
    void dateTimeChanged(const QDateTime &date);
    void timeChanged(const QTime &date);
    void dateChanged(const QDate &date);

public slots:
    void setDateTime(const QDateTime &dateTime);
    void setDate(const QDate &date);
    void setTime(const QTime &time);

protected:
    virtual void keyPressEvent(QKeyEvent *e);
    virtual void wheelEvent(QWheelEvent *e);
    virtual void focusInEvent(QFocusEvent *e);
    virtual bool focusNextPrevChild(bool next);
    virtual QValidator::State validate(QString &input, int &pos) const;
    virtual void fixup(QString &input) const;
    virtual QDateTime dateTimeFromText(const QString &text) const;
    virtual QString textFromDateTime(const QDateTime &dt) const;
    virtual QFlags<QAbstractSpinBox::StepEnabledFlag> stepEnabled() const;

private:
    QDateTimeEdit(const QDateTimeEdit &);
};

class QTimeEdit : QDateTimeEdit
{

%TypeHeaderCode
#include <qdatetimeedit.h>
%End

public:
    QTimeEdit(QWidget *parent /TransferThis/ = 0);
    QTimeEdit(const QTime &t, QWidget *parent /TransferThis/ = 0);
};

class QDateEdit : QDateTimeEdit
{

%TypeHeaderCode
#include <qdatetimeedit.h>
%End

public:
    QDateEdit(QWidget *parent /TransferThis/ = 0);
    QDateEdit(const QDate &t, QWidget *parent /TransferThis/ = 0);
};

QFlags<QDateTimeEdit::Section> operator|(QDateTimeEdit::Section f1, QFlags<QDateTimeEdit::Section> f2);
QFlags<QDateTimeEdit::Section> operator|(QDateTimeEdit::Section f1, QDateTimeEdit::Section f2);
