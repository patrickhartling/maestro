// qthread.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QThread : QObject
{

%TypeHeaderCode
#include <qthread.h>
%End

public:
    static Qt::HANDLE currentThreadId();
    static QThread *currentThread();
    explicit QThread(QObject *parent /TransferThis/ = 0);
    virtual ~QThread();

    enum Priority
    {
        IdlePriority,
        LowestPriority,
        LowPriority,
        NormalPriority,
        HighPriority,
        HighestPriority,
        TimeCriticalPriority,
        InheritPriority,
    };

    bool isFinished() const;
    bool isRunning() const;
    void setPriority(QThread::Priority priority);
    QThread::Priority priority() const;
    void setStackSize(uint stackSize);
    uint stackSize() const;
    void exit(int retcode = 0) /ReleaseGIL/;

public slots:
    void start(QThread::Priority = QThread::InheritPriority) /ReleaseGIL/;
    void terminate();
    void quit();

public:
    bool wait(unsigned long time = ULONG_MAX) /ReleaseGIL/;

signals:
    void started();
    void finished();
    void terminated();

protected:
    virtual void run() = 0 /NewThread/;
    int exec() /PyName=exec_, ReleaseGIL/;
    static void setTerminationEnabled(bool enabled = true);
    static void sleep(unsigned long) /ReleaseGIL/;
    static void msleep(unsigned long) /ReleaseGIL/;
    static void usleep(unsigned long) /ReleaseGIL/;
};
