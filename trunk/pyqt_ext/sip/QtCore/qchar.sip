// qchar.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qchar.h>
%End


struct QLatin1Char
{

%TypeHeaderCode
#include <qchar.h>
%End

    explicit QLatin1Char(char c);
    const char toLatin1() const;
    const ushort unicode() const;
};

class QChar
{

%TypeHeaderCode
#include <qchar.h>
%End

public:
    QChar();
    QChar(char c);
    QChar(QLatin1Char ch);
    QChar(uchar c, uchar r);
    QChar(int rc);
    QChar(QChar::SpecialCharacter s);

    enum SpecialCharacter
    {
        Null,
        Nbsp,
        ReplacementCharacter,
        ObjectReplacementCharacter,
        ByteOrderMark,
        ByteOrderSwapped,
        ParagraphSeparator,
        LineSeparator,
    };

    enum Category
    {
        NoCategory,
        Mark_NonSpacing,
        Mark_SpacingCombining,
        Mark_Enclosing,
        Number_DecimalDigit,
        Number_Letter,
        Number_Other,
        Separator_Space,
        Separator_Line,
        Separator_Paragraph,
        Other_Control,
        Other_Format,
        Other_Surrogate,
        Other_PrivateUse,
        Other_NotAssigned,
        Letter_Uppercase,
        Letter_Lowercase,
        Letter_Titlecase,
        Letter_Modifier,
        Letter_Other,
        Punctuation_Connector,
        Punctuation_Dash,
        Punctuation_Open,
        Punctuation_Close,
        Punctuation_InitialQuote,
        Punctuation_FinalQuote,
        Punctuation_Other,
        Symbol_Math,
        Symbol_Currency,
        Symbol_Modifier,
        Symbol_Other,
        Punctuation_Dask,
    };

    enum Direction
    {
        DirL,
        DirR,
        DirEN,
        DirES,
        DirET,
        DirAN,
        DirCS,
        DirB,
        DirS,
        DirWS,
        DirON,
        DirLRE,
        DirLRO,
        DirAL,
        DirRLE,
        DirRLO,
        DirPDF,
        DirNSM,
        DirBN,
    };

    enum Decomposition
    {
        NoDecomposition,
        Canonical,
        Font,
        NoBreak,
        Initial,
        Medial,
        Final,
        Isolated,
        Circle,
        Super,
        Sub,
        Vertical,
        Wide,
        Narrow,
        Small,
        Square,
        Compat,
        Fraction,
    };

    enum Joining
    {
        OtherJoining,
        Dual,
        Right,
        Center,
    };

    enum CombiningClass
    {
        Combining_BelowLeftAttached,
        Combining_BelowAttached,
        Combining_BelowRightAttached,
        Combining_LeftAttached,
        Combining_RightAttached,
        Combining_AboveLeftAttached,
        Combining_AboveAttached,
        Combining_AboveRightAttached,
        Combining_BelowLeft,
        Combining_Below,
        Combining_BelowRight,
        Combining_Left,
        Combining_Right,
        Combining_AboveLeft,
        Combining_Above,
        Combining_AboveRight,
        Combining_DoubleBelow,
        Combining_DoubleAbove,
        Combining_IotaSubscript,
    };

    enum UnicodeVersion
    {
        Unicode_Unassigned,
        Unicode_1_1,
        Unicode_2_0,
        Unicode_2_1_2,
        Unicode_3_0,
        Unicode_3_1,
        Unicode_3_2,
        Unicode_4_0,
    };

    int digitValue() const;
    QChar toLower() const;
    QChar toUpper() const;
    QChar::Category category() const;
    QChar::Direction direction() const;
    QChar::Joining joining() const;
    bool hasMirrored() const;
    bool isLower() const;
    bool isUpper() const;
    QChar mirroredChar() const;
    QString decomposition() const;
    QChar::Decomposition decompositionTag() const;
    unsigned char combiningClass() const;
    QChar::UnicodeVersion unicodeVersion() const;
    const char toAscii() const;
    const ushort unicode() const;
    static QChar fromAscii(char c);
    bool isNull() const;
    bool isPrint() const;
    bool isPunct() const;
    bool isSpace() const;
    bool isMark() const;
    bool isLetter() const;
    bool isNumber() const;
    bool isLetterOrNumber() const;
    bool isDigit() const;
    bool isSymbol() const;
    uchar cell() const;
    uchar row() const;
    const char toLatin1() const;
    static QChar fromLatin1(char c);
    void setCell(uchar acell);
    void setRow(uchar arow);
};

bool operator==(QChar c1, QChar c2);
bool operator!=(QChar c1, QChar c2);
bool operator<=(QChar c1, QChar c2);
bool operator>=(QChar c1, QChar c2);
bool operator<(QChar c1, QChar c2);
bool operator>(QChar c1, QChar c2);
QDataStream &operator<<(QDataStream &, const QChar & /Constrained/);
QDataStream &operator>>(QDataStream &, QChar & /Constrained/);
