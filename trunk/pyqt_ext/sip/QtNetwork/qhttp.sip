// qhttp.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QHttpHeader
{

%TypeHeaderCode
#include <qhttp.h>
%End

public:
    QHttpHeader();
    QHttpHeader(const QHttpHeader &header);
    QHttpHeader(const QString &str);
    virtual ~QHttpHeader();
    void setValue(const QString &key, const QString &value);
    void setValues(const QList<QPair<QString, QString> > &values);
    void addValue(const QString &key, const QString &value);
    QList<QPair<QString, QString> > values() const;
    bool hasKey(const QString &key) const;
    QStringList keys() const;
    QString value(const QString &key) const;
    QStringList allValues(const QString &key) const;
    void removeValue(const QString &key);
    void removeAllValues(const QString &key);
    bool hasContentLength() const;
    uint contentLength() const;
    void setContentLength(int len);
    bool hasContentType() const;
    QString contentType() const;
    void setContentType(const QString &type);
    virtual QString toString() const;
    bool isValid() const;
    virtual int majorVersion() const = 0;
    virtual int minorVersion() const = 0;

protected:
    virtual bool parseLine(const QString &line, int number);
    bool parse(const QString &str);
    void setValid(bool);
};

class QHttpResponseHeader : QHttpHeader
{

%TypeHeaderCode
#include <qhttp.h>
%End

public:
    QHttpResponseHeader();
    QHttpResponseHeader(const QHttpResponseHeader &header);
    QHttpResponseHeader(const QString &str);
    QHttpResponseHeader(int code, const QString &text = QString(), int majorVer = 1, int minorVer = 1);
    void setStatusLine(int code, const QString &text = QString(), int majorVer = 1, int minorVer = 1);
    int statusCode() const;
    QString reasonPhrase() const;
    virtual int majorVersion() const;
    virtual int minorVersion() const;
    virtual QString toString() const;

protected:
    virtual bool parseLine(const QString &line, int number);
};

class QHttpRequestHeader : QHttpHeader
{

%TypeHeaderCode
#include <qhttp.h>
%End

public:
    QHttpRequestHeader();
    QHttpRequestHeader(const QString &method, const QString &path, int majorVer = 1, int minorVer = 1);
    QHttpRequestHeader(const QHttpRequestHeader &header);
    QHttpRequestHeader(const QString &str);
    void setRequest(const QString &method, const QString &path, int majorVer = 1, int minorVer = 1);
    QString method() const;
    QString path() const;
    virtual int majorVersion() const;
    virtual int minorVersion() const;
    virtual QString toString() const;

protected:
    virtual bool parseLine(const QString &line, int number);
};

class QHttp : QObject
{

%TypeHeaderCode
#include <qhttp.h>
%End

public:
    explicit QHttp(QObject *parent /TransferThis/ = 0);
    QHttp(const QString &hostname, quint16 port = 80, QObject *parent /TransferThis/ = 0);
    virtual ~QHttp();

    enum State
    {
        Unconnected,
        HostLookup,
        Connecting,
        Sending,
        Reading,
        Connected,
        Closing,
    };

    enum Error
    {
        NoError,
        UnknownError,
        HostNotFound,
        ConnectionRefused,
        UnexpectedClose,
        InvalidResponseHeader,
        WrongContentLength,
        Aborted,
    };

    int setHost(const QString &hostname, quint16 port = 80);
    int setSocket(QTcpSocket *socket);
    int setUser(const QString &username, const QString &password = QString());
    int setProxy(const QString &host, int port, const QString &username = QString(), const QString &password = QString());
    int get(const QString &path, QIODevice *to = 0);
    int post(const QString &path, QIODevice *data, QIODevice *to = 0);
    int post(const QString &path, const QByteArray &data, QIODevice *to = 0);
    int head(const QString &path);
    int request(const QHttpRequestHeader &header, QIODevice *device = 0, QIODevice *to = 0);
    int request(const QHttpRequestHeader &header, const QByteArray &data, QIODevice *to = 0);
    int close();
    qint64 bytesAvailable() const;
    SIP_PYOBJECT read(qint64 maxlen) /ReleaseGIL/;
%MethodCode
        // Return the data read or None if there was an error.
        char *s;
        
        if ((s = (char *)sipMalloc(a0)) == NULL)
            sipIsErr = 1;
        else
        {
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                sipFree((ANY *)s);
        
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = PyString_FromStringAndSize(s, len);
        
                sipFree((ANY *)s);
        
                if (sipRes == NULL)
                    sipIsErr = 1;
            }
        }
%End

    QByteArray readAll() /ReleaseGIL/;
    int currentId() const;
    QIODevice *currentSourceDevice() const;
    QIODevice *currentDestinationDevice() const;
    QHttpRequestHeader currentRequest() const;
    QHttpResponseHeader lastResponse() const;
    bool hasPendingRequests() const;
    void clearPendingRequests();
    QHttp::State state() const;
    QHttp::Error error() const;
    QString errorString() const;

public slots:
    void abort();

signals:
    void stateChanged(int);
    void responseHeaderReceived(const QHttpResponseHeader &resp);
    void readyRead(const QHttpResponseHeader &resp);
    void dataSendProgress(int, int);
    void dataReadProgress(int, int);
    void requestStarted(int);
    void requestFinished(int, bool);
    void done(bool);

private:
    QHttp(const QHttp &);
};
