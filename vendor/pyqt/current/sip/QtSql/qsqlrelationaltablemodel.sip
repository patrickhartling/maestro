// qsqlrelationaltablemodel.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QSqlRelation
{

%TypeHeaderCode
#include <qsqlrelationaltablemodel.h>
%End

public:
    QSqlRelation();
    QSqlRelation(const QString &aTableName, const QString &indexCol, const QString &displayCol);
    QString tableName() const;
    QString indexColumn() const;
    QString displayColumn() const;
    bool isValid() const;
};

class QSqlRelationalTableModel : QSqlTableModel
{

%TypeHeaderCode
#include <qsqlrelationaltablemodel.h>
%End

public:
    QSqlRelationalTableModel(QObject *parent /TransferThis/ = 0, QSqlDatabase db = QSqlDatabase());
    virtual ~QSqlRelationalTableModel();
    virtual QVariant data(const QModelIndex &item, int role = Qt::DisplayRole) const;
    virtual bool setData(const QModelIndex &item, const QVariant &value, int role = Qt::EditRole);
    virtual void clear();
    virtual bool select();
    virtual void setTable(const QString &tableName);
    virtual void setRelation(int column, const QSqlRelation &relation);
    QSqlRelation relation(int column) const;
    virtual QSqlTableModel *relationModel(int column) const;
    virtual void revertRow(int row);
%If (Qt_4_2_0 -)
    virtual bool removeColumns(int column, int count, const QModelIndex &parent = QModelIndex());
%End

protected:
    virtual QString selectStatement() const;
    virtual bool updateRowInTable(int row, const QSqlRecord &values);
    virtual QString orderByClause() const;
%If (Qt_4_2_0 -)
    virtual bool insertRowIntoTable(const QSqlRecord &values);
%End
};
