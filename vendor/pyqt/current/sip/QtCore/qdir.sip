// qdir.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qdir.h>
%End


class QDir
{

%TypeHeaderCode
#include <qdir.h>
%End

public:
    enum Filter
    {
        Dirs,
        Files,
        Drives,
        NoSymLinks,
        AllEntries,
        TypeMask,
        Readable,
        Writable,
        Executable,
        PermissionMask,
        Modified,
        Hidden,
        System,
        AccessMask,
        AllDirs,
        CaseSensitive,
        NoDotAndDotDot,
        NoFilter,
    };

    typedef QFlags<QDir::Filter> Filters;

    enum SortFlag
    {
        Name,
        Time,
        Size,
        Unsorted,
        SortByMask,
        DirsFirst,
        Reversed,
        IgnoreCase,
        DirsLast,
        LocaleAware,
        Type,
        NoSort,
    };

    typedef QFlags<QDir::SortFlag> SortFlags;
    QDir(const QDir &);
    QDir(const QString &path = QString());
    QDir(const QString &path, const QString &nameFilter, QFlags<QDir::SortFlag> sort = QDir::SortFlags(QDir::Name|QDir::IgnoreCase), QFlags<QDir::Filter> filter = TypeMask);
    ~QDir();
    void setPath(const QString &path);
    QString path() const;
    QString absolutePath() const;
    QString canonicalPath() const;
    static void addResourceSearchPath(const QString &path);
    QString dirName() const;
    QString filePath(const QString &fileName) const;
    QString absoluteFilePath(const QString &fileName) const;
    QString relativeFilePath(const QString &fileName) const;
    static QString convertSeparators(const QString &pathName);
    bool cd(const QString &dirName);
    bool cdUp();
    QStringList nameFilters() const;
    void setNameFilters(const QStringList &nameFilters);
    QFlags<QDir::Filter> filter() const;
    void setFilter(QFlags<QDir::Filter> filter);
    QFlags<QDir::SortFlag> sorting() const;
    void setSorting(QFlags<QDir::SortFlag> sort);
    uint count() const;
    QString operator[](int) const;
%MethodCode
        int len;
        
        len = sipCpp->count();
        
        if ((a0 = (int)sipConvertFromSequenceIndex(a0, len)) < 0)
            sipIsErr = 1;
        else
            sipRes = new QString((*sipCpp)[a0]);
%End

    QStringList operator[](SIP_PYSLICE) const;
%MethodCode
        #if PY_VERSION_HEX >= 0x02050000
        Py_ssize_t len, start, stop, step, slicelength, i;
        #else
        int len, start, stop, step, slicelength, i;
        #endif
        
        len = sipCpp->count();
        
        if (PySlice_GetIndicesEx((PySliceObject *)a0, len, &start, &stop, &step, &slicelength) < 0)
            sipIsErr = 1;
        else
        {
            sipRes = new QStringList();
        
            for (i = 0; i < slicelength; ++i)
            {
                (*sipRes) += (*sipCpp)[start];
                start += step;
            }
        }
%End

    int __len__() const;
%MethodCode
        sipRes = sipCpp->count();
%End

    int __contains__(const QString &) const;
%MethodCode
        sipRes = bool(sipCpp->entryList().contains(*a0));
%End

    static QStringList nameFiltersFromString(const QString &nameFilter);
    QStringList entryList(QFlags<QDir::Filter> filters = NoFilter, QFlags<QDir::SortFlag> sort = NoSort) const;
    QStringList entryList(const QStringList &nameFilters, QFlags<QDir::Filter> filters = NoFilter, QFlags<QDir::SortFlag> sort = NoSort) const;
    QFileInfoList entryInfoList(QFlags<QDir::Filter> filters = NoFilter, QFlags<QDir::SortFlag> sort = NoSort) const;
    QFileInfoList entryInfoList(const QStringList &nameFilters, QFlags<QDir::Filter> filters = NoFilter, QFlags<QDir::SortFlag> sort = NoSort) const;
    bool mkdir(const QString &dirName) const;
    bool rmdir(const QString &dirName) const;
    bool mkpath(const QString &dirPath) const;
    bool rmpath(const QString &dirPath) const;
    bool isReadable() const;
    bool exists() const;
    bool isRoot() const;
    static bool isRelativePath(const QString &path);
    static bool isAbsolutePath(const QString &path);
    bool isRelative() const;
    bool isAbsolute() const;
    bool makeAbsolute();
    bool operator==(const QDir &dir) const;
    bool operator!=(const QDir &dir) const;
    bool remove(const QString &fileName);
    bool rename(const QString &oldName, const QString &newName);
    bool exists(const QString &name) const;
    static QFileInfoList drives();
    static QChar separator();
    static bool setCurrent(const QString &path);
    static QDir current();
    static QString currentPath();
    static QDir home();
    static QString homePath();
    static QDir root();
    static QString rootPath();
    static QDir temp();
    static QString tempPath();
    static bool match(const QStringList &filters, const QString &fileName);
    static bool match(const QString &filter, const QString &fileName);
    static QString cleanPath(const QString &path);
    void refresh() const;
};

QFlags<QDir::Filter> operator|(QDir::Filter f1, QFlags<QDir::Filter> f2);
QFlags<QDir::Filter> operator|(QDir::Filter f1, QDir::Filter f2);
QFlags<QDir::SortFlag> operator|(QDir::SortFlag f1, QFlags<QDir::SortFlag> f2);
QFlags<QDir::SortFlag> operator|(QDir::SortFlag f1, QDir::SortFlag f2);
