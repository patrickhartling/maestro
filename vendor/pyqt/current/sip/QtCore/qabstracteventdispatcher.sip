// qabstracteventdispatcher.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QAbstractEventDispatcher : QObject
{

%TypeHeaderCode
#include <qabstracteventdispatcher.h>
%End

    typedef QPair<int,int> TimerInfo;

public:
    explicit QAbstractEventDispatcher(QObject *parent /TransferThis/ = 0);
    virtual ~QAbstractEventDispatcher();
    static QAbstractEventDispatcher *instance(QThread *thread = 0);
    virtual bool processEvents(QFlags<QEventLoop::ProcessEventsFlag> flags) = 0 /ReleaseGIL/;
    virtual bool hasPendingEvents() = 0;
    virtual void registerSocketNotifier(QSocketNotifier *notifier) = 0;
    virtual void unregisterSocketNotifier(QSocketNotifier *notifier) = 0;
    int registerTimer(int interval, QObject *object);
    virtual void registerTimer(int timerId, int interval, QObject *object) = 0;
    virtual bool unregisterTimer(int timerId) = 0;
    virtual bool unregisterTimers(QObject *object) = 0;
    virtual QList<QPair<int, int> > registeredTimers(QObject *object) const = 0;
    virtual void wakeUp() = 0;
    virtual void interrupt() = 0;
    virtual void flush() = 0;
    virtual void startingUp();
    virtual void closingDown();

signals:
    void aboutToBlock();
    void awake();
};
