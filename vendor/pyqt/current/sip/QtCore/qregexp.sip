// qregexp.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qregexp.h>
%End


class QRegExp
{

%TypeHeaderCode
#include <qregexp.h>
%End

public:
    enum PatternSyntax
    {
        RegExp,
        Wildcard,
        FixedString,
    };

    enum CaretMode
    {
        CaretAtZero,
        CaretAtOffset,
        CaretWontMatch,
    };

    QRegExp();
    QRegExp(const QString &pattern, Qt::CaseSensitivity cs = Qt::CaseSensitive, QRegExp::PatternSyntax syntax = QRegExp::RegExp);
    QRegExp(const QRegExp &rx);
    ~QRegExp();
    bool operator==(const QRegExp &rx) const;
    bool operator!=(const QRegExp &rx) const;
    bool isEmpty() const;
    bool isValid() const;
    QString pattern() const;
    void setPattern(const QString &pattern);
    Qt::CaseSensitivity caseSensitivity() const;
    void setCaseSensitivity(Qt::CaseSensitivity cs);
    QRegExp::PatternSyntax patternSyntax() const;
    void setPatternSyntax(QRegExp::PatternSyntax syntax);
    bool isMinimal() const;
    void setMinimal(bool minimal);
    bool exactMatch(const QString &str) const;
    int indexIn(const QString &str, int offset = 0, QRegExp::CaretMode caretMode = QRegExp::CaretAtZero) const;
    int lastIndexIn(const QString &str, int offset = -1, QRegExp::CaretMode caretMode = QRegExp::CaretAtZero) const;
    int matchedLength() const;
    int numCaptures() const;
    QStringList capturedTexts();
    QString cap(int nth = 0);
    int pos(int nth = 0);
    QString errorString();
    static QString escape(const QString &str);
};

QDataStream &operator<<(QDataStream &out, const QRegExp &regExp /Constrained/);
QDataStream &operator>>(QDataStream &in, QRegExp &regExp /Constrained/);
