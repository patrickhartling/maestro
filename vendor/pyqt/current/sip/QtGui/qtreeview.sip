// qtreeview.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QTreeView : QAbstractItemView
{

%TypeHeaderCode
#include <qtreeview.h>
%End

public:
    explicit QTreeView(QWidget *parent /TransferThis/ = 0);
    virtual ~QTreeView();
    virtual void setModel(QAbstractItemModel *model);
    virtual void setRootIndex(const QModelIndex &index);
    virtual void setSelectionModel(QItemSelectionModel *selectionModel);
    QHeaderView *header() const;
    void setHeader(QHeaderView *header);
    int indentation() const;
    void setIndentation(int i);
    bool rootIsDecorated() const;
    void setRootIsDecorated(bool show);
    bool uniformRowHeights() const;
    void setUniformRowHeights(bool uniform);
    bool itemsExpandable() const;
    void setItemsExpandable(bool enable);
    int columnViewportPosition(int column) const;
    int columnWidth(int column) const;
    int columnAt(int x) const;
    bool isColumnHidden(int column) const;
    void setColumnHidden(int column, bool hide);
    bool isRowHidden(int row, const QModelIndex &parent) const;
    void setRowHidden(int row, const QModelIndex &parent, bool hide);
    bool isExpanded(const QModelIndex &index) const;
    void setExpanded(const QModelIndex &index, bool expand);
    virtual void keyboardSearch(const QString &search);
    virtual QRect visualRect(const QModelIndex &index) const;
    virtual void scrollTo(const QModelIndex &index, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    virtual QModelIndex indexAt(const QPoint &p) const;
    QModelIndex indexAbove(const QModelIndex &index) const;
    QModelIndex indexBelow(const QModelIndex &index) const;
    virtual void doItemsLayout();
    virtual void reset();

signals:
    void expanded(const QModelIndex &index);
    void collapsed(const QModelIndex &index);

public slots:
    virtual void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
    void hideColumn(int column);
    void showColumn(int column);
    void expand(const QModelIndex &index);
    void collapse(const QModelIndex &index);
    void resizeColumnToContents(int column);
    void sortByColumn(int column);
    virtual void selectAll();

protected slots:
    void columnResized(int column, int oldSize, int newSize);
    void columnCountChanged(int oldCount, int newCount);
    void columnMoved();
    void reexpand();
    void rowsRemoved(const QModelIndex &parent, int first, int last);

protected:
    virtual void scrollContentsBy(int dx, int dy);
    virtual void rowsInserted(const QModelIndex &parent, int start, int end);
    virtual void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual void setSelection(const QRect &rect, QFlags<QItemSelectionModel::SelectionFlag> command);
    virtual QRegion visualRegionForSelection(const QItemSelection &selection) const;
    virtual QModelIndexList selectedIndexes() const;
    virtual void paintEvent(QPaintEvent *e);
    virtual void timerEvent(QTimerEvent *event);
    virtual void mouseReleaseEvent(QMouseEvent *event);
    virtual void drawRow(QPainter *painter, const QStyleOptionViewItem &options, const QModelIndex &index) const;
    virtual void drawBranches(QPainter *painter, const QRect &rect, const QModelIndex &index) const;
    virtual void mousePressEvent(QMouseEvent *e);
    virtual void mouseDoubleClickEvent(QMouseEvent *e);
    virtual void updateGeometries();
    virtual int sizeHintForColumn(int column) const;
    int indexRowSizeHint(const QModelIndex &index) const;
    virtual void horizontalScrollbarAction(int action);
    virtual bool isIndexHidden(const QModelIndex &index) const;

private:
    QTreeView(const QTreeView &);
};
