// qmovie.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QMovie : QObject
{

%TypeHeaderCode
#include <qmovie.h>
%End

public:
    enum MovieState
    {
        NotRunning,
        Paused,
        Running,
    };

    enum CacheMode
    {
        CacheNone,
        CacheAll,
    };

    QMovie(QObject *parent /TransferThis/ = 0);
    QMovie(QIODevice *device, const QByteArray &format = QByteArray(), QObject *parent /TransferThis/ = 0);
    QMovie(const QString &fileName, const QByteArray &format = QByteArray(), QObject *parent /TransferThis/ = 0);
    virtual ~QMovie();
    static QList<QByteArray> supportedFormats();
    void setDevice(QIODevice *device);
    QIODevice *device() const;
    void setFileName(const QString &fileName);
    QString fileName() const;
    void setFormat(const QByteArray &format);
    QByteArray format() const;
    void setBackgroundColor(const QColor &color);
    QColor backgroundColor() const;
    QMovie::MovieState state() const;
    QRect frameRect() const;
    QImage currentImage() const;
    QPixmap currentPixmap() const;
    bool isValid() const;
    bool jumpToFrame(int frameNumber);
    int loopCount() const;
    int frameCount() const;
    int nextFrameDelay() const;
    int currentFrameNumber() const;
    void setSpeed(int percentSpeed);
    int speed() const;
    QSize scaledSize();
    void setScaledSize(const QSize &size);
    QMovie::CacheMode cacheMode();
    void setCacheMode(QMovie::CacheMode mode);

signals:
    void started();
    void resized(const QSize &size);
    void updated(const QRect &rect);
    void stateChanged(QMovie::MovieState state);
    void error(QImageReader::ImageReaderError error);
    void finished();
    void frameChanged(int frameNumber);

public slots:
    void start();
    bool jumpToNextFrame();
    void setPaused(bool paused);
    void stop();

private:
    QMovie(const QMovie &);
};
