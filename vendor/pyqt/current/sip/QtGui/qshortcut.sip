// qshortcut.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QShortcut : QObject
{

%TypeHeaderCode
#include <qshortcut.h>
%End

public:
    explicit QShortcut(QWidget *parent /TransferThis/);
    QShortcut(const QKeySequence &key, QWidget *parent /TransferThis/, SIP_ANYSLOT member = 0, SIP_ANYSLOT ambiguousMember = 0, Qt::ShortcutContext context = Qt::WindowShortcut) [(const QKeySequence &key, QWidget *parent /TransferThis/, const char *member = 0, const char *ambiguousMember = 0, Qt::ShortcutContext context = Qt::WindowShortcut)];
%MethodCode
        // Construct the shortcut without any connections.
        sipCpp = new sipQShortcut(*a0, a1, 0, 0, a4);
        
        if (a2Name || a2Callable)
        {
            void *rx2;
            const char *member2;
        
            // Note we use sipOwner rather than a1Wrapper because /TransferThis/ and
            // /GetWrapper/ are mutually exclusive - but only because they do the same
            // thing.
            rx2 = sipConvertRx(0, "()", (a2Callable ? a2Callable : (PyObject *)*sipOwner), a2Name, &member2);
        
            if (rx2)
                QObject::connect(sipCpp, SIGNAL(activated()), reinterpret_cast<QObject *>(rx2), member2);
            else
                sipIsErr = 1;
        }
        
        if (a3Name || a3Callable)
        {
            void *rx3;
            const char *member3;
        
            // Note we use sipOwner rather than a1Wrapper because /TransferThis/ and
            // /GetWrapper/ are mutually exclusive - but only because they do the same
            // thing.
            rx3 = sipConvertRx(0, "()", (a3Callable ? a3Callable : (PyObject *)*sipOwner), a3Name, &member3);
        
            if (rx3)
                QObject::connect(sipCpp, SIGNAL(activatedAmbiguously()), reinterpret_cast<QObject *>(rx3), member3);
            else
                sipIsErr = 1;
        }
        
        if (sipIsErr)
            delete sipCpp;
%End

    virtual ~QShortcut();
    void setKey(const QKeySequence &key);
    QKeySequence key() const;
    void setEnabled(bool enable);
    bool isEnabled() const;
    void setContext(Qt::ShortcutContext context);
    Qt::ShortcutContext context();
    void setWhatsThis(const QString &text);
    QString whatsThis() const;
    int id() const;
    QWidget *parentWidget() const;

signals:
    void activated();
    void activatedAmbiguously();

protected:
    virtual bool event(QEvent *e);
};
