// qclipboard.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QClipboard : QObject
{

%TypeHeaderCode
#include <qclipboard.h>
%End

    QClipboard(QObject *parent /TransferThis/);
    virtual ~QClipboard();

public:
    enum Mode
    {
        Clipboard,
        Selection,
    };

    void clear(QClipboard::Mode mode = QClipboard::Clipboard);
    bool supportsSelection() const;
    bool ownsSelection() const;
    bool ownsClipboard() const;
    QString text(QClipboard::Mode mode = QClipboard::Clipboard) const;
    QString text(QString &subtype, QClipboard::Mode mode = QClipboard::Clipboard) const;
    void setText(const QString &, QClipboard::Mode mode = QClipboard::Clipboard);
    const QMimeData *mimeData(QClipboard::Mode mode = QClipboard::Clipboard) const;
    void setMimeData(QMimeData *data /GetWrapper/, QClipboard::Mode mode = QClipboard::Clipboard);
%MethodCode
        sipCpp->setMimeData(a0, a1);
        
        // Transfer ownership to C++ and make sure the Python object stays alive by
        // giving it a reference to itself.  The cycle will be broken by QMimeData's
        // virtual dtor.
        sipTransferTo(a0Wrapper, a0Wrapper);
%End

    QImage image(QClipboard::Mode mode = QClipboard::Clipboard) const;
    QPixmap pixmap(QClipboard::Mode mode = QClipboard::Clipboard) const;
    void setImage(const QImage &, QClipboard::Mode mode = QClipboard::Clipboard);
    void setPixmap(const QPixmap &, QClipboard::Mode mode = QClipboard::Clipboard);

signals:
    void selectionChanged();
    void dataChanged();

protected:
    virtual void connectNotify(const char *);
    virtual bool event(QEvent *);

private:
    QClipboard(const QClipboard &);
};
