// qpainterpath.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qpainterpath.h>
%End


class QPainterPath
{

%TypeHeaderCode
#include <qpainterpath.h>
%End

public:
    enum ElementType
    {
        MoveToElement,
        LineToElement,
        CurveToElement,
        CurveToDataElement,
    };

    class Element
    {

%TypeHeaderCode
#include <qpainterpath.h>
%End

    public:
        qreal x;
        qreal y;
        QPainterPath::ElementType type;
        bool isMoveTo() const;
        bool isLineTo() const;
        bool isCurveTo() const;
        bool operator==(const QPainterPath::Element &e) const;
        operator QPointF() const;
    };

    QPainterPath();
    explicit QPainterPath(const QPointF &startPoint);
    QPainterPath(const QPainterPath &other);
    ~QPainterPath();
    void closeSubpath();
    void moveTo(const QPointF &p);
    void lineTo(const QPointF &p);
    void arcTo(const QRectF &rect, qreal startAngle, qreal arcLength);
    void cubicTo(const QPointF &ctrlPt1, const QPointF &ctrlPt2, const QPointF &endPt);
    void quadTo(const QPointF &ctrlPt, const QPointF &endPt);
    QPointF currentPosition() const;
    void addRect(const QRectF &rect);
    void addEllipse(const QRectF &rect);
    void addPolygon(const QPolygonF &polygon);
    void addText(const QPointF &point, const QFont &f, const QString &text);
    void addPath(const QPainterPath &path);
    void addRegion(const QRegion &region);
    void connectPath(const QPainterPath &path);
    bool contains(const QPointF &pt) const;
    bool contains(const QRectF &rect) const;
    bool intersects(const QRectF &rect) const;
    QRectF boundingRect() const;
    QRectF controlPointRect() const;
    Qt::FillRule fillRule() const;
    void setFillRule(Qt::FillRule fillRule);
    QPainterPath toReversed() const;
    QList<QPolygonF> toSubpathPolygons(const QMatrix &matrix = QMatrix()) const;
    QList<QPolygonF> toFillPolygons(const QMatrix &matrix = QMatrix()) const;
    QPolygonF toFillPolygon(const QMatrix &matrix = QMatrix()) const;
    bool operator==(const QPainterPath &other) const;
    bool operator!=(const QPainterPath &other) const;
    void moveTo(qreal x, qreal y);
    void lineTo(qreal x, qreal y);
    void arcTo(qreal x, qreal y, qreal w, qreal h, qreal startAngle, qreal arcLenght);
    void cubicTo(qreal ctrlPt1x, qreal ctrlPt1y, qreal ctrlPt2x, qreal ctrlPt2y, qreal endPtx, qreal endPty);
    void quadTo(qreal ctrlPtx, qreal ctrlPty, qreal endPtx, qreal endPty);
    void addEllipse(qreal x, qreal y, qreal w, qreal h);
    void addRect(qreal x, qreal y, qreal w, qreal h);
    void addText(qreal x, qreal y, const QFont &f, const QString &text);
    bool isEmpty() const;
    int elementCount() const;
    const QPainterPath::Element &elementAt(int i) const;
};

QDataStream &operator<<(QDataStream &, const QPainterPath & /Constrained/);
QDataStream &operator>>(QDataStream &, QPainterPath & /Constrained/);
