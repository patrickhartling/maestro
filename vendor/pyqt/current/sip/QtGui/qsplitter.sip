// qsplitter.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qsplitter.h>
%End


class QSplitter : QFrame
{

%TypeHeaderCode
#include <qsplitter.h>
%End

public:
    explicit QSplitter(QWidget *parent /TransferThis/ = 0);
    QSplitter(Qt::Orientation, QWidget *parent /TransferThis/ = 0);
    virtual ~QSplitter();
    void addWidget(QWidget *widget /Transfer/);
    void insertWidget(int index, QWidget *widget /Transfer/);
    void setOrientation(Qt::Orientation);
    Qt::Orientation orientation() const;
    void setChildrenCollapsible(bool);
    bool childrenCollapsible() const;
    void setCollapsible(int index, bool);
    bool isCollapsible(int index) const;
    void setOpaqueResize(bool opaque = true);
    bool opaqueResize() const;
    void refresh();
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    QList<int> sizes() const;
    void setSizes(const QList<int> &list);
    QByteArray saveState() const;
    bool restoreState(const QByteArray &state);
    int handleWidth() const;
    void setHandleWidth(int);
    int indexOf(QWidget *w) const;
    QWidget *widget(int index) const;
    int count() const;
    void getRange(int index, int *, int *) const;
    QSplitterHandle *handle(int index) const;
    void setStretchFactor(int index, int stretch);

signals:
    void splitterMoved(int pos, int index);

protected:
    virtual QSplitterHandle *createHandle();
    virtual void childEvent(QChildEvent *);
    virtual bool event(QEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void changeEvent(QEvent *);
    void moveSplitter(int pos, int index);
    void setRubberBand(int position);
    int closestLegalPosition(int, int);

private:
    QSplitter(const QSplitter &);
};

QTextStream &operator<<(QTextStream &, const QSplitter &);
QTextStream &operator>>(QTextStream &, QSplitter &);

class QSplitterHandle : QWidget
{

%TypeHeaderCode
#include <qsplitter.h>
%End

public:
    QSplitterHandle(Qt::Orientation o, QSplitter *parent /TransferThis/);
    void setOrientation(Qt::Orientation o);
    Qt::Orientation orientation() const;
    bool opaqueResize() const;
    QSplitter *splitter() const;
    virtual QSize sizeHint() const;

protected:
    virtual void paintEvent(QPaintEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual bool event(QEvent *);
    void moveSplitter(int p);
    int closestLegalPosition(int p);

private:
    QSplitterHandle(const QSplitterHandle &);
};
