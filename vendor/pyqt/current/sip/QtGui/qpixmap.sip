// qpixmap.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qpixmap.h>
%End


class QPixmap : QPaintDevice
{

%TypeHeaderCode
#include <qpixmap.h>
%End

public:
    QPixmap();
    QPixmap(int w, int h);
    QPixmap(const QSize &);
    QPixmap(const QString &fileName, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
    QPixmap(SIP_PYLIST xpm) [(const char **xpm)];
%MethodCode
        // The Python interface is a list of strings that make up the image.
        
        const char **str;
        
        if ((str = QtGui_ListToArray(a0)) == NULL)
            sipIsErr = 1;
        else
        {
            sipCpp = new sipQPixmap(str);
        
            sipFree((ANY *)str);
        }
%End

    QPixmap(const QVariant &) /NoDerived/;
%MethodCode
        sipCpp = new sipQPixmap(qVariantValue<QPixmap>(*a0));
%End

    QPixmap(const QPixmap &);
    virtual ~QPixmap();
    bool isNull() const;
    virtual int devType() const;
    int width() const;
    int height() const;
    QSize size() const;
    QRect rect() const;
    int depth() const;
    static int defaultDepth();
    void fill(const QColor &fillColor = Qt::white);
    void fill(const QWidget *widget, const QPoint &ofs);
    void fill(const QWidget *widget, int xofs, int yofs);
    QBitmap mask() const;
    void setMask(const QBitmap &);
    QPixmap alphaChannel() const;
    void setAlphaChannel(const QPixmap &);
    bool hasAlpha() const;
    bool hasAlphaChannel() const;
    QBitmap createHeuristicMask(bool clipTight = true) const;
    QBitmap createMaskFromColor(const QColor &maskColor) const;
    static QPixmap grabWindow(WId, int x = 0, int y = 0, int w = -1, int h = -1);
    static QPixmap grabWidget(QWidget *widget, const QRect &rect);
    static QPixmap grabWidget(QWidget *widget, int x = 0, int y = 0, int w = -1, int h = -1);
    QPixmap scaled(int w, int h, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio, Qt::TransformationMode mode = Qt::FastTransformation) const;
    QPixmap scaled(const QSize &s, Qt::AspectRatioMode aspectMode = Qt::IgnoreAspectRatio, Qt::TransformationMode mode = Qt::FastTransformation) const;
    QPixmap scaledToWidth(int w, Qt::TransformationMode mode = Qt::FastTransformation) const;
    QPixmap scaledToHeight(int h, Qt::TransformationMode mode = Qt::FastTransformation) const;
    QPixmap transformed(const QMatrix &, Qt::TransformationMode mode = Qt::FastTransformation) const;
    static QMatrix trueMatrix(const QMatrix &m, int w, int h);
    QImage toImage() const;
    static QPixmap fromImage(const QImage &image, Qt::ImageConversionFlags flags = Qt::AutoColor);
    bool load(const QString &fileName, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
    bool loadFromData(const uchar *buf /Array/, uint len /ArraySize/, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
    bool loadFromData(const QByteArray &buf, const char *format = 0, Qt::ImageConversionFlags flags = Qt::AutoColor);
    bool save(const QString &fileName, const char *format, int quality = -1) const;
    bool save(QIODevice *device, const char *format, int quality = -1) const;
%If (WS_WIN)
// Windows specific conversion functions.
enum HBitmapFormat
{
    NoAlpha,
    PremultipliedAlpha
};

HBITMAP toWinHBITMAP(QPixmap::HBitmapFormat format = QPixmap::NoAlpha) const;
static QPixmap fromWinHBITMAP(HBITMAP hbitmap, QPixmap::HBitmapFormat format = QPixmap::NoAlpha);
%End
    QPixmap copy(const QRect &rect = QRect()) const;
    int serialNumber() const;
    bool isDetached() const;
    void detach();
    bool isQBitmap() const;
%If (WS_X11)
    const QX11Info &x11Info() const;
%End
%If (WS_X11)
    Qt::HANDLE x11PictureHandle() const;
%End
%If (WS_X11)
    Qt::HANDLE handle() const;
%End
    virtual QPaintEngine *paintEngine() const;

protected:
    virtual int metric(QPaintDevice::PaintDeviceMetric) const;

public:
    QPixmap copy(int ax, int ay, int awidth, int aheight) const;
    operator QVariant() const;
};

QDataStream &operator<<(QDataStream &, const QPixmap & /Constrained/);
QDataStream &operator>>(QDataStream &, QPixmap & /Constrained/);
