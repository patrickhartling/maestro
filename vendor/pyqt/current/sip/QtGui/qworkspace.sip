// qworkspace.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QWorkspace : QWidget
{

%TypeHeaderCode
#include <qworkspace.h>
%End

public:
    explicit QWorkspace(QWidget *parent /TransferThis/ = 0);
    virtual ~QWorkspace();

    enum WindowOrder
    {
        CreationOrder,
        StackingOrder,
    };

    QWidget *activeWindow() const;
    QWidgetList windowList(QWorkspace::WindowOrder order = QWorkspace::CreationOrder) const;
    QWidget *addWindow(QWidget *w /Transfer/, Qt::WFlags flags = 0);
    virtual QSize sizeHint() const;
    bool scrollBarsEnabled() const;
    void setScrollBarsEnabled(bool enable);
    void setBackground(const QBrush &background);
    QBrush background() const;

signals:
    void windowActivated(QWidget *w);

public slots:
    void setActiveWindow(QWidget *w);
    void cascade();
    void tile();
    void arrangeIcons();
    void closeActiveWindow();
    void closeAllWindows();
    void activateNextWindow();
    void activatePreviousWindow();

protected:
    virtual bool event(QEvent *e);
    virtual void paintEvent(QPaintEvent *e);
    virtual void changeEvent(QEvent *);
    virtual void childEvent(QChildEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual bool eventFilter(QObject *, QEvent *);
    virtual void showEvent(QShowEvent *e);
    virtual void hideEvent(QHideEvent *e);
    virtual void wheelEvent(QWheelEvent *e);

private:
    QWorkspace(const QWorkspace &);
};
