// qmenu.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QMenu : QWidget
{

%TypeHeaderCode
#include <qmenu.h>
%End

public:
    explicit QMenu(QWidget *parent /TransferThis/ = 0);
    QMenu(const QString &title, QWidget *parent /TransferThis/ = 0);
    virtual ~QMenu();
    void addAction(QAction *action);
    QAction *addAction(const QString &text);
    QAction *addAction(const QIcon &icon, const QString &text);
    QAction *addAction(const QString &text, SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member, const QKeySequence &shortcut = 0);
    QAction *addAction(const QIcon &icon, const QString &text, SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member, const QKeySequence &shortcut = 0);
    QAction *addMenu(QMenu *menu);
    QMenu *addMenu(const QString &title);
    QMenu *addMenu(const QIcon &icon, const QString &title);
    QAction *addSeparator();
    QAction *insertMenu(QAction *before, QMenu *menu);
    QAction *insertSeparator(QAction *before);
    void clear();
    void setTearOffEnabled(bool);
    bool isTearOffEnabled() const;
    bool isTearOffMenuVisible() const;
    void hideTearOffMenu();
    void setDefaultAction(QAction *);
    QAction *defaultAction() const;
    void setActiveAction(QAction *act);
    QAction *activeAction() const;
    void popup(const QPoint &pos, QAction *at = 0);
    QAction *exec() /PostHook=__pyQtPostEventLoopHook__, PreHook=__pyQtPreEventLoopHook__, PyName=exec_, ReleaseGIL/;
    QAction *exec(const QPoint &pos, QAction *at = 0) /PostHook=__pyQtPostEventLoopHook__, PreHook=__pyQtPreEventLoopHook__, PyName=exec_, ReleaseGIL/;
    static QAction *exec(QList<QAction*> actions, const QPoint &pos, QAction *at = 0) /PostHook=__pyQtPostEventLoopHook__, PreHook=__pyQtPreEventLoopHook__, PyName=exec_, ReleaseGIL/;
    virtual QSize sizeHint() const;
    QRect actionGeometry(QAction *) const;
    QAction *actionAt(const QPoint &) const;
    QAction *menuAction() const;
    QString title() const;
    void setTitle(const QString &title);
    QIcon icon() const;
    void setIcon(const QIcon &icon);
    void setNoReplayFor(QWidget *widget);

signals:
    void aboutToShow();
    void triggered(QAction *action);
    void hovered(QAction *action);

protected:
    int columnCount() const;
    virtual void changeEvent(QEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void wheelEvent(QWheelEvent *);
    virtual void enterEvent(QEvent *);
    virtual void leaveEvent(QEvent *);
    virtual void hideEvent(QHideEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void actionEvent(QActionEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual bool event(QEvent *);

private:
    QMenu(const QMenu &);
};
