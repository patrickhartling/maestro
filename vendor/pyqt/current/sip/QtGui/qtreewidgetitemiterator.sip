// qtreewidgetitemiterator.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qtreewidgetitemiterator.h>
%End


class QTreeWidgetItemIterator
{

%TypeHeaderCode
#include <qtreewidgetitemiterator.h>
%End

public:
    enum IteratorFlag
    {
        All,
        Hidden,
        NotHidden,
        Selected,
        Unselected,
        Selectable,
        NotSelectable,
        DragEnabled,
        DragDisabled,
        DropEnabled,
        DropDisabled,
        HasChildren,
        NoChildren,
        Checked,
        NotChecked,
        Enabled,
        Disabled,
        Editable,
        NotEditable,
        UserFlag,
    };

    typedef QFlags<QTreeWidgetItemIterator::IteratorFlag> IteratorFlags;
    QTreeWidgetItemIterator(const QTreeWidgetItemIterator &it);
    QTreeWidgetItemIterator(QTreeWidget *widget, QFlags<QTreeWidgetItemIterator::IteratorFlag> flags = All);
    QTreeWidgetItemIterator(QTreeWidgetItem *item, QFlags<QTreeWidgetItemIterator::IteratorFlag> flags = All);
    ~QTreeWidgetItemIterator();
    QTreeWidgetItem *value() const;
%MethodCode
        // SIP doesn't support operator* so this is a thin wrapper around it.
        sipRes = sipCpp->operator*();
%End

    QTreeWidgetItemIterator &operator+=(int n);
    QTreeWidgetItemIterator &operator-=(int n);
};

QFlags<QTreeWidgetItemIterator::IteratorFlag> operator|(QTreeWidgetItemIterator::IteratorFlag f1, QFlags<QTreeWidgetItemIterator::IteratorFlag> f2);
QFlags<QTreeWidgetItemIterator::IteratorFlag> operator|(QTreeWidgetItemIterator::IteratorFlag f1, QTreeWidgetItemIterator::IteratorFlag f2);
