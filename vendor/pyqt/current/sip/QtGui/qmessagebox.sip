// qmessagebox.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QMessageBox : QDialog
{

%TypeHeaderCode
#include <qmessagebox.h>
%End

public:
    enum Icon
    {
        NoIcon,
        Information,
        Warning,
        Critical,
        Question,
    };

    explicit QMessageBox(QWidget *parent /TransferThis/ = 0);
    QMessageBox(const QString &caption, const QString &text, QMessageBox::Icon icon, int button0, int button1, int button2, QWidget *parent /TransferThis/ = 0, Qt::WFlags f = Qt::Dialog|Qt::MSWindowsFixedSizeDialogHint);
    virtual ~QMessageBox();

    enum Button
    {
        NoButton,
        Ok,
        Cancel,
        Yes,
        No,
        Abort,
        Retry,
        Ignore,
        YesAll,
        NoAll,
        ButtonMask,
        Default,
        Escape,
        FlagMask,
    };

    QString text() const;
    void setText(const QString &);
    QMessageBox::Icon icon() const;
    void setIcon(QMessageBox::Icon);
    QPixmap iconPixmap() const;
    void setIconPixmap(const QPixmap &);
    QString buttonText(int button) const;
    void setButtonText(int button, const QString &);
    Qt::TextFormat textFormat() const;
    void setTextFormat(Qt::TextFormat);
    static int information(QWidget *parent, const QString &caption, const QString &text, int button0, int button1 = 0, int button2 = 0) /ReleaseGIL/;
    static int information(QWidget *parent, const QString &caption, const QString &text, const QString &button0Text = QString(), const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
    static int question(QWidget *parent, const QString &caption, const QString &text, int button0, int button1 = 0, int button2 = 0) /ReleaseGIL/;
    static int question(QWidget *parent, const QString &caption, const QString &text, const QString &button0Text = QString(), const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
    static int warning(QWidget *parent, const QString &caption, const QString &text, int button0, int button1, int button2 = 0) /ReleaseGIL/;
    static int warning(QWidget *parent, const QString &caption, const QString &text, const QString &button0Text = QString(), const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
    static int critical(QWidget *parent, const QString &caption, const QString &text, int button0, int button1, int button2 = 0) /ReleaseGIL/;
    static int critical(QWidget *parent, const QString &caption, const QString &text, const QString &button0Text = QString(), const QString &button1Text = QString(), const QString &button2Text = QString(), int defaultButtonNumber = 0, int escapeButtonNumber = -1) /ReleaseGIL/;
    static void about(QWidget *parent, const QString &caption, const QString &text) /ReleaseGIL/;
    static void aboutQt(QWidget *parent, const QString &caption = QString()) /ReleaseGIL/;
    virtual QSize sizeHint() const;
    static QPixmap standardIcon(QMessageBox::Icon icon);

protected:
    virtual void resizeEvent(QResizeEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void closeEvent(QCloseEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void changeEvent(QEvent *);

private:
    QMessageBox(const QMessageBox &);
};
