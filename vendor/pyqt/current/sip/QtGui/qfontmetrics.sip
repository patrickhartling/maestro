// qfontmetrics.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QFontMetrics
{

%TypeHeaderCode
#include <qfontmetrics.h>
%End

public:
    QFontMetrics(const QFont &);
    QFontMetrics(const QFont &, QPaintDevice *pd);
    QFontMetrics(const QFontMetrics &);
    ~QFontMetrics();
    int ascent() const;
    int descent() const;
    int height() const;
    int leading() const;
    int lineSpacing() const;
    int minLeftBearing() const;
    int minRightBearing() const;
    int maxWidth() const;
    int xHeight() const;
    bool inFont(QChar) const;
    int leftBearing(QChar) const;
    int rightBearing(QChar) const;
    int width(const QString &, int len = -1) const;
    int width(QChar) const;
    int charWidth(const QString &str, int pos) const;
    QRect boundingRect(QChar) const;
    QRect boundingRect(const QString &text) const;
    QRect boundingRect(const QRect &r, int flags, const QString &text, int tabstops = 0, SIP_PYLIST tabarray /AllowNone/ = 0) const;
%MethodCode
        int *tabarray = qtgui_tabarray(a4);
        
        sipRes = new QRect(sipCpp->boundingRect(*a0, a1, *a2, a3, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
%End

    QRect boundingRect(int x, int y, int w, int h, int flags, const QString &text, int tabstops = 0, SIP_PYLIST tabarray /AllowNone/ = 0) const;
%MethodCode
        int *tabarray = qtgui_tabarray(a7);
        
        sipRes = new QRect(sipCpp->boundingRect(a0, a1, a2, a3, a4, *a5, a6, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
%End

    QSize size(int flags, const QString &str, int tabstops = 0, SIP_PYLIST tabarray /AllowNone/ = 0) const;
%MethodCode
        int *tabarray = qtgui_tabarray(a3);
        
        sipRes = new QSize(sipCpp->size(a0, *a1, a2, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
%End

    int underlinePos() const;
    int overlinePos() const;
    int strikeOutPos() const;
    int lineWidth() const;
    bool operator==(const QFontMetrics &other) const;
    bool operator!=(const QFontMetrics &other);
};

class QFontMetricsF
{

%TypeHeaderCode
#include <qfontmetrics.h>
%End

public:
    QFontMetricsF(const QFont &);
    QFontMetricsF(const QFont &, QPaintDevice *pd);
    QFontMetricsF(const QFontMetricsF &);
    ~QFontMetricsF();
    qreal ascent() const;
    qreal descent() const;
    qreal height() const;
    qreal leading() const;
    qreal lineSpacing() const;
    qreal minLeftBearing() const;
    qreal minRightBearing() const;
    qreal maxWidth() const;
    qreal xHeight() const;
    bool inFont(QChar) const;
    qreal leftBearing(QChar) const;
    qreal rightBearing(QChar) const;
    qreal width(const QString &string) const;
    qreal width(QChar) const;
    QRectF boundingRect(const QString &string) const;
    QRectF boundingRect(QChar) const;
    QRectF boundingRect(const QRectF &r, int flags, const QString &string, int tabstops = 0, SIP_PYLIST tabarray /AllowNone/ = 0) const;
%MethodCode
        int *tabarray = qtgui_tabarray(a4);
        
        sipRes = new QRectF(sipCpp->boundingRect(*a0, a1, *a2, a3, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
%End

    QSizeF size(int flags, const QString &str, int tabstops = 0, SIP_PYLIST tabarray /AllowNone/ = 0) const;
%MethodCode
        int *tabarray = qtgui_tabarray(a3);
        
        sipRes = new QSizeF(sipCpp->size(a0, *a1, a2, tabarray));
        
        if (!tabarray)
            delete[] tabarray;
%End

    qreal underlinePos() const;
    qreal overlinePos() const;
    qreal strikeOutPos() const;
    qreal lineWidth() const;
    bool operator==(const QFontMetricsF &other) const;
    bool operator!=(const QFontMetricsF &other) const;
};

%ModuleHeaderCode
// Used by QFontMetrics and QFontMetricsF.
int *qtgui_tabarray(PyObject *l);
%End

%ModuleCode
// Convert an optional Python list to a 0 terminated array of integers on the
// heap.
int *qtgui_tabarray(PyObject *l)
{
    if (!l || l == Py_None)
        return 0;

    int *arr = new int[PyList_GET_SIZE(l) + 1];
    int i;

    for (i = 0; i < PyList_GET_SIZE(l); ++i)
        arr[i] = PyInt_AsLong(PyList_GET_ITEM(l, i));

    arr[i] = 0;

    return arr;
}
%End
