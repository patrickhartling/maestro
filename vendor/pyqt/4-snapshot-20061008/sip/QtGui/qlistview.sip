// qlistview.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QListView : QAbstractItemView
{

%TypeHeaderCode
#include <qlistview.h>
%End

public:
    enum Movement
    {
        Static,
        Free,
        Snap,
    };

    enum Flow
    {
        LeftToRight,
        TopToBottom,
    };

    enum ResizeMode
    {
        Fixed,
        Adjust,
    };

    enum LayoutMode
    {
        SinglePass,
        Batched,
    };

    enum ViewMode
    {
        ListMode,
        IconMode,
    };

    explicit QListView(QWidget *parent /TransferThis/ = 0);
    virtual ~QListView();
    void setMovement(QListView::Movement movement);
    QListView::Movement movement() const;
    void setFlow(QListView::Flow flow);
    QListView::Flow flow() const;
    void setWrapping(bool enable);
    bool isWrapping() const;
    void setResizeMode(QListView::ResizeMode mode);
    QListView::ResizeMode resizeMode() const;
    void setLayoutMode(QListView::LayoutMode mode);
    QListView::LayoutMode layoutMode() const;
    void setSpacing(int space);
    int spacing() const;
    void setGridSize(const QSize &size);
    QSize gridSize() const;
    void setViewMode(QListView::ViewMode mode);
    QListView::ViewMode viewMode() const;
    void clearPropertyFlags();
    bool isRowHidden(int row) const;
    void setRowHidden(int row, bool hide);
    void setModelColumn(int column);
    int modelColumn() const;
    void setUniformItemSizes(bool enable);
    bool uniformItemSizes() const;
    virtual QRect visualRect(const QModelIndex &index) const;
    virtual void scrollTo(const QModelIndex &index, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    virtual QModelIndex indexAt(const QPoint &p) const;
    virtual void doItemsLayout();
    virtual void reset();
    virtual void setRootIndex(const QModelIndex &index);

protected:
    virtual void scrollContentsBy(int dx, int dy);
    virtual void dataChanged(const QModelIndex &topLeft, const QModelIndex &bottomRight);
    virtual void rowsInserted(const QModelIndex &parent, int start, int end);
    virtual void rowsAboutToBeRemoved(const QModelIndex &parent, int start, int end);
    virtual bool event(QEvent *e);
    virtual void mouseMoveEvent(QMouseEvent *e);
    virtual void mouseReleaseEvent(QMouseEvent *e);
    virtual void timerEvent(QTimerEvent *e);
    virtual void resizeEvent(QResizeEvent *e);
    virtual void dragMoveEvent(QDragMoveEvent *e);
    virtual void dragLeaveEvent(QDragLeaveEvent *e);
    virtual void dropEvent(QDropEvent *e);
    virtual void startDrag(Qt::DropActions supportedActions);
    virtual QStyleOptionViewItem viewOptions() const;
    virtual void paintEvent(QPaintEvent *e);
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction cursorAction, Qt::KeyboardModifiers modifiers);
    QRect rectForIndex(const QModelIndex &index) const;
    void setPositionForIndex(const QPoint &position, const QModelIndex &index);
    virtual void setSelection(const QRect &rect, QFlags<QItemSelectionModel::SelectionFlag> command);
    virtual QRegion visualRegionForSelection(const QItemSelection &selection) const;
    virtual QModelIndexList selectedIndexes() const;
    virtual void updateGeometries();
    virtual bool isIndexHidden(const QModelIndex &index) const;

private:
    QListView(const QListView &);
};
