// qabstractspinbox.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qabstractspinbox.h>
%End


class QAbstractSpinBox : QWidget
{

%TypeHeaderCode
#include <qabstractspinbox.h>
%End

public:
    explicit QAbstractSpinBox(QWidget *parent /TransferThis/ = 0);
    virtual ~QAbstractSpinBox();

    enum StepEnabledFlag
    {
        StepNone,
        StepUpEnabled,
        StepDownEnabled,
    };

    typedef QFlags<QAbstractSpinBox::StepEnabledFlag> StepEnabled;

    enum ButtonSymbols
    {
        UpDownArrows,
        PlusMinus,
    };

    QAbstractSpinBox::ButtonSymbols buttonSymbols() const;
    void setButtonSymbols(QAbstractSpinBox::ButtonSymbols bs);
    QString text() const;
    QString specialValueText() const;
    void setSpecialValueText(const QString &s);
    bool wrapping() const;
    void setWrapping(bool w);
    void setReadOnly(bool r);
    bool isReadOnly() const;
    void setAlignment(Qt::Alignment flag);
    Qt::Alignment alignment() const;
    void setFrame(bool);
    bool hasFrame() const;
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    void interpretText();
    virtual bool event(QEvent *event);
    virtual QValidator::State validate(QString &input, int &pos) const;
    virtual void fixup(QString &input) const;
    virtual void stepBy(int steps);

public slots:
    void stepUp();
    void stepDown();
    void selectAll();
    virtual void clear();

protected:
    virtual void resizeEvent(QResizeEvent *e);
    virtual void keyPressEvent(QKeyEvent *e);
    virtual void keyReleaseEvent(QKeyEvent *e);
    virtual void wheelEvent(QWheelEvent *e);
    virtual void focusInEvent(QFocusEvent *e);
    virtual void focusOutEvent(QFocusEvent *e);
    virtual void contextMenuEvent(QContextMenuEvent *e);
    virtual void changeEvent(QEvent *e);
    virtual void closeEvent(QCloseEvent *e);
    virtual void hideEvent(QHideEvent *e);
    virtual void mousePressEvent(QMouseEvent *e);
    virtual void mouseReleaseEvent(QMouseEvent *e);
    virtual void mouseMoveEvent(QMouseEvent *e);
    virtual void timerEvent(QTimerEvent *e);
    virtual void paintEvent(QPaintEvent *e);
    virtual void showEvent(QShowEvent *e);
    QLineEdit *lineEdit() const;
    void setLineEdit(QLineEdit *e /Transfer/);
    virtual QFlags<QAbstractSpinBox::StepEnabledFlag> stepEnabled() const;

signals:
    void editingFinished();

private:
    QAbstractSpinBox(const QAbstractSpinBox &);
};

QFlags<QAbstractSpinBox::StepEnabledFlag> operator|(QAbstractSpinBox::StepEnabledFlag f1, QFlags<QAbstractSpinBox::StepEnabledFlag> f2);
QFlags<QAbstractSpinBox::StepEnabledFlag> operator|(QAbstractSpinBox::StepEnabledFlag f1, QAbstractSpinBox::StepEnabledFlag f2);
