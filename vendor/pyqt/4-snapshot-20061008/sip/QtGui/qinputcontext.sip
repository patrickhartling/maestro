// qinputcontext.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QInputContext : QObject
{

%TypeHeaderCode
#include <qinputcontext.h>
%End

public:
    explicit QInputContext(QObject *parent /TransferThis/ = 0);
    virtual ~QInputContext();
    virtual QString identifierName() = 0;
    virtual QString language() = 0;
    virtual void reset() = 0;
    virtual void update();
    virtual void mouseHandler(int x, QMouseEvent *event);
    virtual QFont font() const;
    virtual bool isComposing() const = 0;
    QWidget *focusWidget() const;
    virtual void setFocusWidget(QWidget *w);
    virtual void widgetDestroyed(QWidget *w);
    virtual QList<QAction*> actions();
    virtual bool filterEvent(const QEvent *event);
    void sendEvent(const QInputMethodEvent &event);

    enum StandardFormat
    {
        PreeditFormat,
        SelectionFormat,
    };

    QTextFormat standardFormat(QInputContext::StandardFormat s) const;

private:
    QInputContext(const QInputContext &);
};
