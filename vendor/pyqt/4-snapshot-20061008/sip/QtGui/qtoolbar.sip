// qtoolbar.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QToolBar : QWidget
{

%TypeHeaderCode
#include <qtoolbar.h>
%End

public:
    QToolBar(const QString &title, QWidget *parent /TransferThis/ = 0);
    explicit QToolBar(QWidget *parent /TransferThis/ = 0);
    virtual ~QToolBar();
    void setMovable(bool movable);
    bool isMovable() const;
    void setAllowedAreas(Qt::ToolBarAreas areas);
    Qt::ToolBarAreas allowedAreas() const;
    bool isAreaAllowed(Qt::ToolBarArea area) const;
    void setOrientation(Qt::Orientation orientation);
    Qt::Orientation orientation() const;
    void clear();
    void addAction(QAction *action);
    QAction *addAction(const QString &text);
    QAction *addAction(const QIcon &icon, const QString &text);
    QAction *addAction(const QString &text, SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member);
    QAction *addAction(const QIcon &icon, const QString &text, SIP_RXOBJ_CON receiver, SIP_SLOT_CON() member);
    QAction *addSeparator();
    QAction *insertSeparator(QAction *before);
    QAction *addWidget(QWidget *widget);
    QAction *insertWidget(QAction *before, QWidget *widget);
    QRect actionGeometry(QAction *action) const;
    QAction *actionAt(const QPoint &p) const;
    QAction *actionAt(int ax, int ay) const;
    QAction *toggleViewAction() const;
    QSize iconSize() const;
    Qt::ToolButtonStyle toolButtonStyle() const;

public slots:
    void setIconSize(const QSize &iconSize);
    void setToolButtonStyle(Qt::ToolButtonStyle toolButtonStyle);

signals:
    void actionTriggered(QAction *action);
    void movableChanged(bool movable);
    void allowedAreasChanged(Qt::ToolBarAreas allowedAreas);
    void orientationChanged(Qt::Orientation orientation);
    void iconSizeChanged(const QSize &iconSize);
    void toolButtonStyleChanged(Qt::ToolButtonStyle toolButtonStyle);

protected:
    virtual void actionEvent(QActionEvent *event);
    virtual void changeEvent(QEvent *event);
    virtual void childEvent(QChildEvent *event);
    virtual void paintEvent(QPaintEvent *event);
    virtual void resizeEvent(QResizeEvent *event);
    virtual bool event(QEvent *event);

private:
    QToolBar(const QToolBar &);
};
