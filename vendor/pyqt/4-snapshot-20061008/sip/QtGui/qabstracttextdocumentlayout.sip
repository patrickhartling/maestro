// qabstracttextdocumentlayout.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QAbstractTextDocumentLayout : QObject
{

%TypeHeaderCode
#include <qabstracttextdocumentlayout.h>
%End

public:
    explicit QAbstractTextDocumentLayout(QTextDocument *doc);
    virtual ~QAbstractTextDocumentLayout();

    struct Selection
    {

%TypeHeaderCode
#include <qabstracttextdocumentlayout.h>
%End

        QTextCursor cursor;
        QTextCharFormat format;
    };

    struct PaintContext
    {

%TypeHeaderCode
#include <qabstracttextdocumentlayout.h>
%End

        PaintContext();
        int cursorPosition;
        QPalette palette;
        QRectF clip;
        QVector<QAbstractTextDocumentLayout::Selection> selections;
    };

    virtual void draw(QPainter *painter, const QAbstractTextDocumentLayout::PaintContext &context) = 0;
    virtual int hitTest(const QPointF &point, Qt::HitTestAccuracy accuracy) const = 0;
    QString anchorAt(const QPointF &pos) const;
    virtual int pageCount() const = 0;
    virtual QSizeF documentSize() const = 0;
    virtual QRectF frameBoundingRect(QTextFrame *frame) const = 0;
    virtual QRectF blockBoundingRect(const QTextBlock &block) const = 0;
    void setPaintDevice(QPaintDevice *device);
    QPaintDevice *paintDevice() const;
    QTextDocument *document() const;

signals:
    void update(const QRectF & = QRectF(0.0, 0.0, 1.0e+9, 1.0e+9));
    void documentSizeChanged(const QSizeF &newSize);
    void pageCountChanged(int newPages);

protected:
    virtual void documentChanged(int from, int charsRemoved, int charsAdded) = 0;
    virtual void resizeInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &format);
    virtual void positionInlineObject(QTextInlineObject item, int posInDocument, const QTextFormat &format);
    virtual void drawInlineObject(QPainter *painter, const QRectF &rect, QTextInlineObject object, int posInDocument, const QTextFormat &format);
    QTextCharFormat format(int pos);
};
