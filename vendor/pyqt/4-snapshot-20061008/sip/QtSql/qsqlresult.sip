// qsqlresult.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QSqlResult
{

%TypeHeaderCode
#include <qsqlresult.h>
%End

public:
    virtual ~QSqlResult();
    virtual QVariant handle() const;

protected:
    enum BindingSyntax
    {
        PositionalBinding,
        NamedBinding,
    };

    explicit QSqlResult(const QSqlDriver *db);
    int at() const;
    QString lastQuery() const;
    QSqlError lastError() const;
    bool isValid() const;
    bool isActive() const;
    bool isSelect() const;
    bool isForwardOnly() const;
    const QSqlDriver *driver() const;
    virtual void setAt(int at);
    virtual void setActive(bool a);
    virtual void setLastError(const QSqlError &e);
    virtual void setQuery(const QString &query);
    virtual void setSelect(bool s);
    virtual void setForwardOnly(bool forward);
    virtual bool exec() /PyName=exec_, ReleaseGIL/;
    virtual bool prepare(const QString &query) /ReleaseGIL/;
    virtual bool savePrepare(const QString &sqlquery);
    virtual void bindValue(int pos, const QVariant &val, QSql::ParamType type);
    virtual void bindValue(const QString &placeholder, const QVariant &val, QSql::ParamType type);
    void addBindValue(const QVariant &val, QSql::ParamType type);
    QVariant boundValue(const QString &placeholder) const;
    QVariant boundValue(int pos) const;
    QSql::ParamType bindValueType(const QString &placeholder) const;
    QSql::ParamType bindValueType(int pos) const;
    int boundValueCount() const;
    QVector<QVariant> &boundValues() const;
    QString executedQuery() const;
    QString boundValueName(int pos) const;
    void clear();
    bool hasOutValues() const;
    QSqlResult::BindingSyntax bindingSyntax() const;
    virtual QVariant data(int i) = 0;
    virtual bool isNull(int i) = 0;
    virtual bool reset(const QString &sqlquery) = 0;
    virtual bool fetch(int i) = 0 /ReleaseGIL/;
    virtual bool fetchNext() /ReleaseGIL/;
    virtual bool fetchPrevious() /ReleaseGIL/;
    virtual bool fetchFirst() = 0 /ReleaseGIL/;
    virtual bool fetchLast() = 0 /ReleaseGIL/;
    virtual int size() = 0;
    virtual int numRowsAffected() = 0;
    virtual QSqlRecord record() const;
    virtual QVariant lastInsertId() const;

private:
    QSqlResult(const QSqlResult &);
};
