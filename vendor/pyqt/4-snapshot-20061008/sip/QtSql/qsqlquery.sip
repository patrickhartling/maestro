// qsqlquery.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QSqlQuery
{

%TypeHeaderCode
#include <qsqlquery.h>
%End

public:
%If (Qt_4_2_0 -)

    enum BatchExecutionMode
    {
        ValuesAsRows,
        ValuesAsColumns,
    };

%End
    QSqlQuery(QSqlResult *r);
    QSqlQuery(const QString &query = QString(), QSqlDatabase db = QSqlDatabase());
    explicit QSqlQuery(QSqlDatabase db);
    QSqlQuery(const QSqlQuery &other);
    ~QSqlQuery();
    bool isValid() const;
    bool isActive() const;
    bool isNull(int field) const;
    int at() const;
    QString lastQuery() const;
    int numRowsAffected() const;
    QSqlError lastError() const;
    bool isSelect() const;
    int size() const;
    const QSqlDriver *driver() const;
    const QSqlResult *result() const;
    bool isForwardOnly() const;
    QSqlRecord record() const;
    void setForwardOnly(bool forward);
    bool exec(const QString &query) /PyName=exec_, ReleaseGIL/;
    QVariant value(int i) const;
    bool seek(int i, bool relative = false) /ReleaseGIL/;
    bool next() /ReleaseGIL/;
    bool previous() /ReleaseGIL/;
    bool first() /ReleaseGIL/;
    bool last() /ReleaseGIL/;
    void clear() /ReleaseGIL/;
    bool exec() /PyName=exec_, ReleaseGIL/;
%If (Qt_4_2_0 -)
    bool execBatch(QSqlQuery::BatchExecutionMode mode = QSqlQuery::ValuesAsRows);
%End
    bool prepare(const QString &query) /ReleaseGIL/;
    void bindValue(const QString &placeholder, const QVariant &val, QSql::ParamType type = QSql::In);
    void bindValue(int pos, const QVariant &val, QSql::ParamType type = QSql::In);
    void addBindValue(const QVariant &val, QSql::ParamType type = QSql::In);
    QVariant boundValue(const QString &placeholder) const;
    QVariant boundValue(int pos) const;
    QMap<QString,QVariant> boundValues() const;
    QString executedQuery() const;
    QVariant lastInsertId() const;
};
