// qglframebufferobject.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtOpenGL Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%If (Qt_4_2_0 -)

class QGLFramebufferObject : QPaintDevice
{

%TypeHeaderCode
#include <qglframebufferobject.h>
%End

public:
    QGLFramebufferObject(const QSize &size, GLenum target = GL_TEXTURE_2D);
    QGLFramebufferObject(int width, int height, GLenum target = GL_TEXTURE_2D);
    virtual ~QGLFramebufferObject();
    bool isValid() const;
    bool bind();
    bool release();
    GLuint texture() const;
    QSize size() const;
    QImage toImage() const;
    virtual QPaintEngine *paintEngine() const;
    GLuint handle() const;
    static bool hasOpenGLFramebufferObjects();

protected:
    virtual int metric(QPaintDevice::PaintDeviceMetric metric) const;

private:
    QGLFramebufferObject(const QGLFramebufferObject &);
};

%End
