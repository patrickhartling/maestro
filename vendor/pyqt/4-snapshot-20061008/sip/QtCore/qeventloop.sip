// qeventloop.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qeventloop.h>
%End


class QEventLoop : QObject
{

%TypeHeaderCode
#include <qeventloop.h>
%End

public:
    explicit QEventLoop(QObject *parent /TransferThis/ = 0);
    virtual ~QEventLoop();

    enum ProcessEventsFlag
    {
        AllEvents,
        ExcludeUserInputEvents,
        ExcludeSocketNotifiers,
        WaitForMoreEvents,
        X11ExcludeTimers,
        DeferredDeletion,
    };

    typedef QFlags<QEventLoop::ProcessEventsFlag> ProcessEventsFlags;
    bool processEvents(QFlags<QEventLoop::ProcessEventsFlag> flags = AllEvents) /ReleaseGIL/;
    void processEvents(QFlags<QEventLoop::ProcessEventsFlag> flags, int maximumTime) /ReleaseGIL/;
    int exec(QFlags<QEventLoop::ProcessEventsFlag> flags = AllEvents) /PostHook=__pyQtPreEventLoopHook__, PreHook=__pyQtPostEventLoopHook__, PyName=exec_, ReleaseGIL/;
    void exit(int returnCode = 0);
    bool isRunning() const;
    void wakeUp();

public slots:
    void quit();
};

QFlags<QEventLoop::ProcessEventsFlag> operator|(QEventLoop::ProcessEventsFlag f1, QFlags<QEventLoop::ProcessEventsFlag> f2);
QFlags<QEventLoop::ProcessEventsFlag> operator|(QEventLoop::ProcessEventsFlag f1, QEventLoop::ProcessEventsFlag f2);
