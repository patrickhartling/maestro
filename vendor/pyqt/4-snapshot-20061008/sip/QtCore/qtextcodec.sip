// qtextcodec.sip generated by MetaSIP on Wed Oct 11 03:37:27 2006
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


%ModuleHeaderCode
#include <qtextcodec.h>
%End


class QTextCodec
{

%TypeHeaderCode
#include <qtextcodec.h>
%End

public:
    static QTextCodec *codecForName(const QByteArray &name);
    static QTextCodec *codecForName(const char *name);
    static QTextCodec *codecForMib(int mib);
    static QTextCodec *codecForHtml(const QByteArray &ba);
    static QList<QByteArray> availableCodecs();
    static QList<int> availableMibs();
    static QTextCodec *codecForLocale();
    static void setCodecForLocale(QTextCodec *c);
    QTextDecoder *makeDecoder() const /Factory/;
    QTextEncoder *makeEncoder() const /Factory/;
    bool canEncode(QChar) const;
    bool canEncode(const QString &) const;
    QString toUnicode(const QByteArray &) const;
    QString toUnicode(const char *chars) const;
    QByteArray fromUnicode(const QString &uc) const;

    enum ConversionFlag
    {
        DefaultConversion,
        ConvertInvalidToNull,
        IgnoreHeader,
    };

    typedef QFlags<QTextCodec::ConversionFlag> ConversionFlags;

    struct ConverterState
    {

%TypeHeaderCode
#include <qtextcodec.h>
%End

        ConverterState(QFlags<QTextCodec::ConversionFlag> f = QTextCodec::DefaultConversion);
        ~ConverterState();

    private:
        ConverterState(const QTextCodec::ConverterState &);
    };

    QString toUnicode(const char *in /Array/, int length /ArraySize/, QTextCodec::ConverterState *state = 0) const;
    QByteArray fromUnicode(const QChar *in, int length, QTextCodec::ConverterState *state = 0) const;
    virtual QByteArray name() const = 0;
    virtual QList<QByteArray> aliases() const;
    virtual int mibEnum() const = 0;

protected:
    virtual QString convertToUnicode(const char *in /Array/, int length /ArraySize/, QTextCodec::ConverterState *state) const = 0;
    virtual QByteArray convertFromUnicode(const QChar *in, int length, QTextCodec::ConverterState *state) const = 0;
    QTextCodec();
    virtual ~QTextCodec();

public:
    static QTextCodec *codecForTr();
    static void setCodecForTr(QTextCodec *c);
    static QTextCodec *codecForCStrings();
    static void setCodecForCStrings(QTextCodec *c);

private:
    QTextCodec(const QTextCodec &);
};

QFlags<QTextCodec::ConversionFlag> operator|(QTextCodec::ConversionFlag f1, QFlags<QTextCodec::ConversionFlag> f2);
QFlags<QTextCodec::ConversionFlag> operator|(QTextCodec::ConversionFlag f1, QTextCodec::ConversionFlag f2);

class QTextEncoder
{

%TypeHeaderCode
#include <qtextcodec.h>
%End

public:
    explicit QTextEncoder(const QTextCodec *codec);
    ~QTextEncoder();
    QByteArray fromUnicode(const QString &str);

private:
    QTextEncoder(const QTextEncoder &);
};

class QTextDecoder
{

%TypeHeaderCode
#include <qtextcodec.h>
%End

public:
    explicit QTextDecoder(const QTextCodec *codec);
    ~QTextDecoder();
    QString toUnicode(const char *chars /Array/, int len /ArraySize/);
    QString toUnicode(const QByteArray &ba);

private:
    QTextDecoder(const QTextDecoder &);
};
