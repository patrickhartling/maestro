// qsvgrenderer.sip generated by MetaSIP on Wed Oct 11 03:37:28 2006
//
// This file is part of the QtSvg Python extension module.
//
// Copyright (c) 2006
// 	Riverbank Computing Limited <info@riverbankcomputing.co.uk>
// 
// This file is part of PyQt.
// 
// This copy of PyQt is free software; you can redistribute it and/or modify it
// under the terms of the GNU General Public License as published by the Free
// Software Foundation; either version 2, or (at your option) any later
// version.
// 
// PyQt is supplied in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
// 
// You should have received a copy of the GNU General Public License along with
// PyQt; see the file LICENSE.  If not, write to the Free Software Foundation,
// Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.


class QSvgRenderer : QObject
{

%TypeHeaderCode
#include <qsvgrenderer.h>
%End

%ConvertToSubClassCode
    static struct class_graph {
            char *name;
            sipWrapperType **type;
            int yes, no;
        } graph[] = {
            {sipName_QSvgRenderer,	&sipClass_QSvgRenderer,	-1, 1},
            {sipName_QSvgWidget,	&sipClass_QSvgWidget,	-1, -1},
        };
    
        int i = 0;
    
        sipClass = NULL;
    
        do
        {
            struct class_graph *cg = &graph[i];
    
            if (cg->name != NULL && sipCpp->inherits(cg->name))
            {
                sipClass = *cg->type;
                i = cg->yes;
            }
            else
                i = cg->no;
        }
        while (i >= 0);
%End

public:
    QSvgRenderer(QObject *parent /TransferThis/ = 0);
    QSvgRenderer(const QString &filename, QObject *parent /TransferThis/ = 0);
    QSvgRenderer(const QByteArray &contents, QObject *parent /TransferThis/ = 0);
    virtual ~QSvgRenderer();
    bool isValid() const;
%If (Qt_4_2_0 -)
    QMatrix matrixForElement(const QString &id) const;
%End
    QSize defaultSize() const;
%If (Qt_4_2_0 -)
    bool elementExists(const QString &id) const;
%End
    QRect viewBox() const;
%If (Qt_4_2_0 -)
    QRectF viewBoxF() const;
%End
    void setViewBox(const QRect &viewbox);
%If (Qt_4_2_0 -)
    void setViewBox(const QRectF &viewbox);
%End
    bool animated() const;
%If (Qt_4_2_0 -)
    QRectF boundsOnElement(const QString &id) const;
%End
    int framesPerSecond() const;
    void setFramesPerSecond(int num);
    int currentFrame() const;
    void setCurrentFrame(int);
    int animationDuration() const;

public slots:
    bool load(const QString &filename);
    bool load(const QByteArray &contents);
    void render(QPainter *p);
%If (Qt_4_2_0 -)
    void render(QPainter *p, const QRectF &bounds);
%End
%If (Qt_4_2_0 -)
    void render(QPainter *p, const QString &elementId, const QRectF &bounds = QRectF());
%End

signals:
    void repaintNeeded();
};
